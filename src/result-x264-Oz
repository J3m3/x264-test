Comparing x264_src/encoder/lookahead.s and x264_src/encoder/lookahead.mod.s
Comparing x264_src/encoder/analyse.s and x264_src/encoder/analyse.mod.s
5284c5284
< 	movq	%rdi, %r15
---
> 	movq	%rdi, %rbp
5287,5288c5287,5288
< 	movl	%eax, 25792(%r15)
< 	cmpl	$0, 544(%r15)
---
> 	movl	%eax, 25792(%rbp)
> 	cmpl	$0, 544(%rbp)
5290c5290
< 	movl	428(%r15), %ecx
---
> 	movl	428(%rbp), %ecx
5297c5297
< 	movl	25800(%r15), %edx
---
> 	movl	25800(%rbp), %edx
5304c5304
< 	movl	%edx, 25792(%r15)
---
> 	movl	%edx, 25792(%rbp)
5308c5308
< 	cmpl	$1, 7248(%r15)
---
> 	cmpl	$1, 7248(%rbp)
5325c5325
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5329,5330c5329,5330
< 	andl	$0, 17396(%r15)
< 	andl	$0, 16420(%r15)
---
> 	andl	$0, 17396(%rbp)
> 	andl	$0, 16420(%rbp)
5337c5337
< 	cmpl	%eax, 16428(%r15)
---
> 	cmpl	%eax, 16428(%rbp)
5353c5353
< 	movl	25812(%r15), %edx
---
> 	movl	25812(%rbp), %edx
5360c5360
< 	cmpl	$0, 440(%r15)
---
> 	cmpl	$0, 440(%rbp)
5370c5370
< 	cmpl	$0, 452(%r15)
---
> 	cmpl	$0, 452(%rbp)
5375,5376c5375,5376
< 	movl	%eax, 17416(%r15)
< 	movl	7248(%r15), %eax
---
> 	movl	%eax, 17416(%rbp)
> 	movl	7248(%rbp), %eax
5378c5378
< 	movq	%r15, 24(%rsp)                  # 8-byte Spill
---
> 	movq	%rbp, 24(%rsp)                  # 8-byte Spill
5388c5388
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5392c5392
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5400c5400
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5405c5405
< 	movl	$2, 17384(%r15)
---
> 	movl	$2, 17384(%rbp)
5412c5412
< 	movl	%edx, 17384(%r15)
---
> 	movl	%edx, 17384(%rbp)
5420c5420
< 	movl	%esi, 17384(%r15)
---
> 	movl	%esi, 17384(%rbp)
5425,5426c5425,5426
< 	movl	$3, 17384(%r15)
< 	jmp	.LBB11_535
---
> 	movl	$3, 17384(%rbp)
> 	jmp	.LBB11_537
5428,5430c5428,5430
< 	movl	96(%r15), %r8d
< 	movl	420(%r15), %esi
< 	movl	16384(%r15), %ecx
---
> 	movl	96(%rbp), %r8d
> 	movl	420(%rbp), %esi
> 	movl	16384(%rbp), %ecx
5435c5435
< 	popq	%r11
---
> 	popq	%rdi
5437d5436
< 	movl	%r11d, %edi
5439,5440c5438,5439
< 	movl	%edi, 16440(%r15)
< 	movq	3200(%r15), %rdx
---
> 	movl	%edi, 16440(%rbp)
> 	movq	3200(%rbp), %rdx
5447c5446
< 	movl	%r9d, 16448(%r15)
---
> 	movl	%r9d, 16448(%rbp)
5450,5452c5449,5451
< 	leal	-1(,%rsi,4), %ebp
< 	cmpl	%ebp, %edi
< 	movl	%ebp, %esi
---
> 	leal	-1(,%rsi,4), %r11d
> 	cmpl	%r11d, %edi
> 	movl	%r11d, %esi
5456,5458c5455,5457
< 	movl	%esi, 16456(%r15)
< 	cmpl	%ebp, %r9d
< 	movl	%ebp, %edi
---
> 	movl	%esi, 16456(%rbp)
> 	cmpl	%r11d, %r9d
> 	movl	%r11d, %edi
5462c5461
< 	movl	%edi, 16464(%r15)
---
> 	movl	%edi, 16464(%rbp)
5469c5468
< 	movq	14704(%r15), %r8
---
> 	movq	14704(%rbp), %r8
5477c5476
< 	movq	14688(%r15), %r9
---
> 	movq	14688(%rbp), %r9
5483c5482
< 	movl	%edi, 16464(%r15)
---
> 	movl	%edi, 16464(%rbp)
5487c5486
< 	movl	%esi, 16472(%r15)
---
> 	movl	%esi, 16472(%rbp)
5490c5489
< 	movl	%edi, 16480(%r15)
---
> 	movl	%edi, 16480(%rbp)
5494,5496c5493,5497
< 	movl	%ebx, 96(%rsp)                  # 4-byte Spill
< 	movl	16388(%r15), %ebx
< 	movb	7268(%r15), %cl
---
> 	movl	%ebx, 112(%rsp)                 # 4-byte Spill
> 	movl	%r11d, 96(%rsp)                 # 4-byte Spill
> 	movl	%r10d, 104(%rsp)                # 4-byte Spill
> 	movl	16388(%rbp), %ebx
> 	movb	7268(%rbp), %cl
5499c5500
< 	movl	%esi, 128(%rsp)                 # 4-byte Spill
---
> 	movl	%esi, 72(%rsp)                  # 4-byte Spill
5502,5503c5503,5504
< 	movl	%edx, 112(%rsp)                 # 4-byte Spill
< 	cmpl	$2, 1852(%r15)
---
> 	movl	%edx, 136(%rsp)                 # 4-byte Spill
> 	cmpl	$2, 1852(%rbp)
5506,5508c5507
< 	movl	%ebp, 88(%rsp)                  # 4-byte Spill
< 	movl	%r10d, 72(%rsp)                 # 4-byte Spill
< 	orl	16436(%r15), %ebx
---
> 	orl	16436(%rbp), %ebx
5510c5509,5510
< 	movl	424(%r15), %ebp
---
> 	movq	%rbp, %rcx
> 	movl	424(%rbp), %ebp
5512c5512
< 	xorl	%ecx, %ecx
---
> 	xorl	%edx, %edx
5514,5519c5514,5515
< 	sete	%cl
< 	leaq	14864(%r15), %rax
< 	movq	%rax, 40(%rsp)                  # 8-byte Spill
< 	leaq	14704(%r15), %rax
< 	movq	%rax, 48(%rsp)                  # 8-byte Spill
< 	leaq	14856(%r15), %rax
---
> 	sete	%dl
> 	leaq	14864(%rcx), %rax
5521,5523c5517,5523
< 	leaq	14696(%r15), %rax
< 	movq	%rax, 104(%rsp)                 # 8-byte Spill
< 	movl	%r14d, 120(%rsp)                # 4-byte Spill
---
> 	leaq	14704(%rcx), %rax
> 	movq	%rax, 40(%rsp)                  # 8-byte Spill
> 	leaq	14856(%rcx), %rax
> 	movq	%rax, 64(%rsp)                  # 8-byte Spill
> 	leaq	14696(%rcx), %rax
> 	movq	%rax, 80(%rsp)                  # 8-byte Spill
> 	movl	%r14d, 128(%rsp)                # 4-byte Spill
5527c5527
< 	testl	%ecx, %ecx
---
> 	testl	%edx, %edx
5531,5536c5531,5536
< 	subl	$1, %ecx
< 	movl	%ecx, 64(%rsp)                  # 4-byte Spill
< 	movq	40(%rsp), %r13                  # 8-byte Reload
< 	cmovbq	48(%rsp), %r13                  # 8-byte Folded Reload
< 	movq	56(%rsp), %rax                  # 8-byte Reload
< 	cmovbq	104(%rsp), %rax                 # 8-byte Folded Reload
---
> 	subl	$1, %edx
> 	movl	%edx, 48(%rsp)                  # 4-byte Spill
> 	movq	56(%rsp), %r13                  # 8-byte Reload
> 	cmovbq	40(%rsp), %r13                  # 8-byte Folded Reload
> 	movq	64(%rsp), %rax                  # 8-byte Reload
> 	cmovbq	80(%rsp), %rax                  # 8-byte Folded Reload
5562,5563c5562
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movl	64(%rsp), %ecx                  # 4-byte Reload
---
> 	movl	48(%rsp), %edx                  # 4-byte Reload
5567c5566
< 	jl	.LBB11_535
---
> 	jl	.LBB11_537
5570c5569
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5572c5571
< 	jmp	.LBB11_535
---
> 	jmp	.LBB11_537
5577c5576,5577
< 	cmpl	$0, 12(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	cmpl	$0, 12(%rbp)
5580c5580
< 	movl	424(%r15), %r14d
---
> 	movl	424(%rbp), %r14d
5582c5582
< 	cmpl	$0, 16436(%r15)
---
> 	cmpl	$0, 16436(%rbp)
5586c5586
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5589,5596c5589,5590
< 	movl	7248(%r15), %eax
< 	movl	72(%rsp), %r10d                 # 4-byte Reload
< 	movl	120(%rsp), %edx                 # 4-byte Reload
< 	pushq	$-96
< 	.cfi_adjust_cfa_offset 8
< 	popq	%r11
< 	.cfi_adjust_cfa_offset -8
< 	movl	88(%rsp), %ebp                  # 4-byte Reload
---
> 	movl	7248(%rbp), %eax
> 	movl	128(%rsp), %edx                 # 4-byte Reload
5598c5592
< 	movl	128(%rsp), %edi                 # 4-byte Reload
---
> 	movl	72(%rsp), %edi                  # 4-byte Reload
5601c5595,5599
< 	subl	%ecx, %r11d
---
> 	pushq	$-96
> 	.cfi_adjust_cfa_offset 8
> 	popq	%rsi
> 	.cfi_adjust_cfa_offset -8
> 	subl	%ecx, %esi
5603,5608c5601,5610
< 	movl	112(%rsp), %esi                 # 4-byte Reload
< 	addl	%edi, %esi
< 	shll	$6, %esi
< 	addl	$96, %esi
< 	cmpl	%edx, %r11d
< 	cmovll	%r11d, %edx
---
> 	movl	136(%rsp), %r8d                 # 4-byte Reload
> 	addl	%edi, %r8d
> 	shll	$6, %r8d
> 	addl	$96, %r8d
> 	cmpl	%edx, %esi
> 	cmovll	%esi, %edx
> 	movl	112(%rsp), %edi                 # 4-byte Reload
> 	cmpl	%edi, %esi
> 	cmovll	%edi, %edx
> 	movl	%esi, 16444(%rbp)
5610,5617c5612,5616
< 	cmpl	%ecx, %r11d
< 	cmovll	%ecx, %edx
< 	movl	%r11d, 16444(%r15)
< 	cmpl	%ebp, %esi
< 	cmovll	%esi, %ebp
< 	movl	%esi, 16452(%r15)
< 	cmpl	%ecx, %esi
< 	cmovll	%ecx, %ebp
---
> 	cmpl	%ecx, %r8d
> 	cmovll	%r8d, %ecx
> 	movl	%r8d, 16452(%rbp)
> 	cmpl	%edi, %r8d
> 	cmovll	%edi, %ecx
5619,5622c5618,5621
< 	cmpl	%r14d, %ebp
< 	cmovll	%ebp, %r14d
< 	movl	%edx, 16460(%r15)
< 	movl	%r14d, 16468(%r15)
---
> 	cmpl	%r14d, %ecx
> 	cmovll	%ecx, %r14d
> 	movl	%edx, 16460(%rbp)
> 	movl	%r14d, 16468(%rbp)
5625c5624
< 	movl	%edx, 16476(%r15)
---
> 	movl	%edx, 16476(%rbp)
5628c5627,5628
< 	movl	%r14d, 16484(%r15)
---
> 	movl	%r14d, 16484(%rbp)
> 	movl	104(%rsp), %r10d                # 4-byte Reload
5654c5654
< 	testb	$32, 388(%r15)
---
> 	testb	$32, 388(%rbp)
5657,5658c5657,5658
< 	movslq	16392(%r15), %rdx
< 	movl	7252(%r15), %esi
---
> 	movslq	16392(%rbp), %rdx
> 	movl	7252(%rbp), %esi
5664c5664
< 	cmpl	$3, 16408(%r15)
---
> 	cmpl	$3, 16408(%rbp)
5667c5667
< 	cmpl	$4, 16584(%r15)
---
> 	cmpl	$4, 16584(%rbp)
5670c5670
< 	cmpl	$4, 16580(%r15)
---
> 	cmpl	$4, 16580(%rbp)
5673c5673
< 	cmpl	$4, 16588(%r15)
---
> 	cmpl	$4, 16588(%rbp)
5676c5676
< 	cmpl	$4, 16592(%r15)
---
> 	cmpl	$4, 16592(%rbp)
5682c5682
< 	movq	14704(%r15), %rsi
---
> 	movq	14704(%rbp), %rsi
5687,5689c5687,5689
< 	movl	26728(%r15), %edx
< 	addl	26724(%r15), %edx
< 	addl	26732(%r15), %edx
---
> 	movl	26728(%rbp), %edx
> 	addl	26724(%rbp), %edx
> 	addl	26732(%rbp), %edx
5696c5696
< 	andl	$0, 17420(%r15)
---
> 	andl	$0, 17420(%rbp)
5701c5701
< 	movq	%rcx, 176(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 192(%rsp)                 # 8-byte Spill
5705c5705
< 	cmpl	$0, 96(%r15)
---
> 	cmpl	$0, 96(%rbp)
5708,5709c5708,5709
< 	movl	16384(%r15), %eax
< 	movq	14688(%r15), %rcx
---
> 	movl	16384(%rbp), %eax
> 	movq	14688(%rbp), %rcx
5728c5728
< 	jmp	.LBB11_535
---
> 	jmp	.LBB11_537
5732c5732,5733
< 	movl	16384(%r15), %eax
---
> 	movq	24(%rsp), %r14                  # 8-byte Reload
> 	movl	16384(%r14), %eax
5734,5735c5735,5736
< 	movq	21424(%r15,%rax,8), %rdi
< 	movl	25008(%r15), %esi
---
> 	movq	21424(%r14,%rax,8), %rdi
> 	movl	25008(%r14), %esi
5738c5739
< 	callq	*32808(%r15)
---
> 	callq	*32808(%r14)
5743c5744,5745
< 	cmpl	$0, 444(%r15)
---
> 	cmpl	$0, 444(%r14)
> 	movq	%r14, %rbp
5746c5748
< 	cmpl	$2, 1852(%r15)
---
> 	cmpl	$2, 1852(%rbp)
5749,5750c5751,5752
< 	movswl	25766(%r15), %eax
< 	cmpl	%eax, 16468(%r15)
---
> 	movswl	25766(%rbp), %eax
> 	cmpl	%eax, 16468(%rbp)
5753c5755
< 	cmpl	$3, 428(%r15)
---
> 	cmpl	$3, 428(%rbp)
5759c5761,5762
< 	cmpl	$0, 464(%r15)
---
> 	cmpl	$0, 464(%r14)
> 	movq	%r14, %rbp
5762,5764c5765,5767
< 	movl	25792(%r15), %edx
< 	subl	17428(%r15), %edx
< 	movl	496(%r15), %eax
---
> 	movl	25792(%rbp), %edx
> 	subl	17428(%rbp), %edx
> 	movl	496(%rbp), %eax
5768c5771
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5791c5794
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5794,5795c5797,5798
< 	movl	$18, 17384(%r15)
< 	cmpl	$0, 25820(%r15)
---
> 	movl	$18, 17384(%rbp)
> 	cmpl	$0, 25820(%rbp)
5857c5860
< 	movq	24(%rsp), %r15                  # 8-byte Reload
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
5860c5863
< 	cmpl	$6, 16584(%r15)
---
> 	cmpl	$6, 16584(%rbp)
5863c5866
< 	cmpl	$6, 16580(%r15)
---
> 	cmpl	$6, 16580(%rbp)
5866c5869
< 	cmpl	$6, 16588(%r15)
---
> 	cmpl	$6, 16588(%rbp)
5869c5872
< 	cmpl	$6, 16592(%r15)
---
> 	cmpl	$6, 16592(%rbp)
5872c5875
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5877c5880
< 	movl	16384(%r15), %eax
---
> 	movl	16384(%rbp), %eax
5879,5880c5882,5883
< 	movq	21424(%r15,%rax,8), %rdi
< 	movl	25008(%r15), %esi
---
> 	movq	21424(%rbp,%rax,8), %rdi
> 	movl	25008(%rbp), %esi
5886c5889
< 	callq	*32808(%r15)
---
> 	callq	*32808(%rbp)
5891c5894
< 	movq	%rax, 17384(%r15)
---
> 	movq	%rax, 17384(%rbp)
5895c5898
< 	movslq	21416(%r15), %rcx
---
> 	movslq	21416(%rbp), %rcx
5897c5900
< 	jge	.LBB11_535
---
> 	jge	.LBB11_537
5900,5901c5903,5904
< 	movq	16720(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	16720(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
5910,5914c5913,5917
< 	movl	%eax, 160(%rsp)                 # 4-byte Spill
< 	leaq	21424(%r15), %rax
< 	movq	%rax, 64(%rsp)                  # 8-byte Spill
< 	movl	388(%r15), %eax
< 	movl	%eax, 152(%rsp)                 # 4-byte Spill
---
> 	movl	%eax, 176(%rsp)                 # 4-byte Spill
> 	leaq	21424(%rbp), %rax
> 	movq	%rax, 48(%rsp)                  # 8-byte Spill
> 	movl	388(%rbp), %eax
> 	movl	%eax, 144(%rsp)                 # 4-byte Spill
5916c5919
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
5920c5923
< 	leaq	520(%rsp), %r14
---
> 	leaq	512(%rsp), %r14
5922,5923c5925
< 	movl	21416(%r15), %eax
< 	movq	%r15, %rsi
---
> 	movl	21416(%rbp), %eax
5927,5928c5929,5930
< 	leaq	368(%rsp), %rdi
< 	andl	$0, -128(%rdi)
---
> 	leaq	368(%rsp), %rsi
> 	andl	$0, -128(%rsi)
5930,5936c5932,5938
< 	movq	%rdx, -120(%rdi)
< 	movq	25008(%rsi), %rdx
< 	movq	%rdx, -8(%rdi)
< 	movdqa	21344(%rsi), %xmm0
< 	movdqu	%xmm0, -40(%rdi)
< 	movq	21360(%rsi), %rdx
< 	movq	%rdx, -24(%rdi)
---
> 	movq	%rdx, -120(%rsi)
> 	movq	25008(%rbp), %rdx
> 	movq	%rdx, -8(%rsi)
> 	movdqa	21344(%rbp), %xmm0
> 	movdqu	%xmm0, -40(%rsi)
> 	movq	21360(%rbp), %rdx
> 	movq	%rdx, -24(%rsi)
5939c5941
< 	leaq	7584(%rsi), %rbp
---
> 	addq	$7584, %rbp                     # imm = 0x1DA0
5941c5943
< 	movq	%rbp, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rbp, 56(%rsp)                  # 8-byte Spill
5954c5956
< 	subl	%eax, 520(%rsp)
---
> 	subl	%eax, 512(%rsp)
5989c5991
< 	movq	%r15, 48(%rsp)                  # 8-byte Spill
---
> 	movq	%r15, 40(%rsp)                  # 8-byte Spill
5995c5997
< 	leaq	624(%rsp), %r8
---
> 	leaq	608(%rsp), %r8
5997c5999
< 	movl	624(%rsp), %ecx
---
> 	movl	608(%rsp), %ecx
6004c6006
< 	movq	48(%rsp), %r15                  # 8-byte Reload
---
> 	movq	40(%rsp), %r15                  # 8-byte Reload
6060c6062
< 	addl	%ecx, 520(%rsp)
---
> 	addl	%ecx, 512(%rsp)
6083,6084c6085,6086
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	leaq	25132(%r15), %rdi
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	leaq	25132(%rbp), %rdi
6096c6098
< 	movl	$4, 17384(%r15)
---
> 	movl	$4, 17384(%rbp)
6101c6103
< 	popq	%r14
---
> 	popq	%r15
6108c6110
< 	movl	388(%r15), %ebx
---
> 	movl	388(%rbp), %ebx
6112c6114
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6119c6121
< 	cmpl	25764(%r15), %r8d
---
> 	cmpl	25764(%rbp), %r8d
6125,6126c6127,6128
< 	movl	$16, 17388(%r15)
< 	leaq	25248(%r15), %rdi
---
> 	movl	$16, 17388(%rbp)
> 	leaq	25248(%rbp), %rdi
6138c6140
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6141,6142c6143,6144
< 	movl	17404(%r15), %eax
< 	orl	17400(%r15), %eax
---
> 	movl	17404(%rbp), %eax
> 	orl	17400(%rbp), %eax
6145c6147
< 	movl	$6, 17384(%r15)
---
> 	movl	$6, 17384(%rbp)
6149c6151
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6157c6159
< 	cmpl	$0, 25820(%r15)
---
> 	cmpl	$0, 25820(%rbp)
6160c6162
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6166c6168
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6168,6171c6170,6172
< 	movl	%eax, %ecx
< 	imull	$6, 1092(%rsp), %eax
< 	subl	$-128, %eax
< 	sarl	$8, %eax
---
> 	imull	$6, 1092(%rsp), %ecx
> 	subl	$-128, %ecx
> 	sarl	$8, %ecx
6173c6174,6175
< 	cmpl	%eax, %ecx
---
> 	movl	%eax, 156(%rsp)                 # 4-byte Spill
> 	cmpl	%ecx, %eax
6175c6177
< 	movl	%ebx, 17420(%r15)
---
> 	movl	%ebx, 17420(%rbp)
6179,6180c6181,6182
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	jne	.LBB11_535
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	jne	.LBB11_537
6182c6184,6185
< 	movl	$268435456, %ecx                # imm = 0x10000000
---
> 	movl	$268435456, 156(%rsp)           # 4-byte Folded Spill
>                                         # imm = 0x10000000
6185,6186c6188,6190
< 	movl	$268435456, %ecx                # imm = 0x10000000
< 	cmpl	$0, 25820(%r15)
---
> 	movl	$268435456, 156(%rsp)           # 4-byte Folded Spill
>                                         # imm = 0x10000000
> 	cmpl	$0, 25820(%rbp)
6193c6197
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6195d6198
< 	movl	$268435456, %ecx                # imm = 0x10000000
6197c6200
< 	cmpl	$3, 428(%r15)
---
> 	cmpl	$3, 428(%rbp)
6206c6209
< 	movslq	21416(%r15), %rcx
---
> 	movslq	21416(%rbp), %rcx
6211,6212c6214,6215
< 	movq	16720(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	16720(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
6217d6219
< 	movl	%ecx, 172(%rsp)                 # 4-byte Spill
6222,6226c6224,6228
< 	movq	%rax, 144(%rsp)                 # 8-byte Spill
< 	movl	388(%r15), %eax
< 	movl	%eax, 136(%rsp)                 # 4-byte Spill
< 	andl	$0, 17420(%r15)
< 	movl	$7, 17384(%r15)
---
> 	movq	%rax, 160(%rsp)                 # 8-byte Spill
> 	movl	388(%rbp), %eax
> 	movl	%eax, 144(%rsp)                 # 4-byte Spill
> 	andl	$0, 17420(%rbp)
> 	movl	$7, 17384(%rbp)
6228c6230
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6239,6240c6241,6242
< 	btl	$8, 136(%rsp)                   # 4-byte Folded Reload
< 	jb	.LBB11_214
---
> 	btl	$8, 144(%rsp)                   # 4-byte Folded Reload
> 	jb	.LBB11_215
6257c6259
< 	popq	%r13
---
> 	popq	%r15
6263,6266c6265,6268
< 	movl	%eax, 208(%rsp)
< 	movl	%eax, 588(%rsp)
< 	leaq	1520(%rsp), %rdx
< 	movl	-380(%rdx), %esi
---
> 	movl	%eax, 216(%rsp)
> 	movl	%eax, 572(%rsp)
> 	leaq	1520(%rsp), %rsi
> 	movl	-380(%rsi), %edi
6268c6270
< 	leaq	220(%rsp), %rcx
---
> 	leaq	228(%rsp), %rcx
6270,6271c6272,6273
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movq	21416(%r15), %xmm0              # xmm0 = mem[0],zero
---
> 	movq	24(%rsp), %rdx                  # 8-byte Reload
> 	movq	21416(%rdx), %xmm0              # xmm0 = mem[0],zero
6275c6277
< 	leaq	216(%rsp), %rax
---
> 	leaq	224(%rsp), %rax
6279,6280c6281,6282
< 	movdqa	%xmm2, 592(%rsp)
< 	leaq	752(%rsp), %rcx
---
> 	movdqa	%xmm2, 576(%rsp)
> 	leaq	736(%rsp), %rcx
6282c6284
< 	movq	-416(%rdx), %rax
---
> 	movq	-416(%rsi), %rax
6284c6286
< 	movq	25008(%r15), %rax
---
> 	movq	25008(%rdx), %rax
6286c6288
< 	movdqa	21344(%r15), %xmm0
---
> 	movdqa	21344(%rdx), %xmm0
6288c6290
< 	movq	21360(%r15), %rax
---
> 	movq	21360(%rdx), %rax
6291c6293
< 	movl	%eax, 136(%rdx)
---
> 	movl	%eax, 136(%rsi)
6294,6302c6296,6304
< 	leaq	21424(%r15), %rax
< 	movq	%rax, 192(%rsp)                 # 8-byte Spill
< 	leaq	24752(%r15), %rax
< 	movq	%rax, 200(%rsp)                 # 8-byte Spill
< 	leaq	25720(%r15), %rax
< 	movq	%rax, 88(%rsp)                  # 8-byte Spill
< 	leaq	16720(%r15), %rax
< 	movq	%rax, 152(%rsp)                 # 8-byte Spill
< 	xorl	%edi, %edi
---
> 	leaq	21424(%rdx), %rax
> 	movq	%rax, 208(%rsp)                 # 8-byte Spill
> 	leaq	24752(%rdx), %rax
> 	movq	%rax, 168(%rsp)                 # 8-byte Spill
> 	leaq	25720(%rdx), %rax
> 	movq	%rax, 128(%rsp)                 # 8-byte Spill
> 	leaq	16720(%rdx), %rax
> 	movq	%rax, 120(%rsp)                 # 8-byte Spill
> 	xorl	%esi, %esi
6307,6308c6309,6310
< 	testl	%r13d, %r13d
< 	js	.LBB11_234
---
> 	testl	%r15d, %r15d
> 	js	.LBB11_235
6311,6312c6313,6314
< 	movl	%edi, 120(%rsp)                 # 4-byte Spill
< 	testl	%edi, %edi
---
> 	movl	%esi, 72(%rsp)                  # 4-byte Spill
> 	testl	%esi, %esi
6314c6316
< 	cmpl	$1, %r13d
---
> 	cmpl	$1, %r15d
6316,6317c6318,6319
< 	movl	%r13d, %edi
< 	movq	%rdi, %rdx
---
> 	movl	%r15d, %esi
> 	movq	%rsi, %rdx
6319,6320c6321,6322
< 	addq	88(%rsp), %rdx                  # 8-byte Folded Reload
< 	movq	%rdx, 96(%rsp)                  # 8-byte Spill
---
> 	addq	128(%rsp), %rdx                 # 8-byte Folded Reload
> 	movq	%rdx, 104(%rsp)                 # 8-byte Spill
6323c6325
< 	movq	%rdi, %rax
---
> 	movq	%rsi, %rax
6325,6326c6327,6328
< 	addq	152(%rsp), %rax                 # 8-byte Folded Reload
< 	movq	%rax, 56(%rsp)                  # 8-byte Spill
---
> 	addq	120(%rsp), %rax                 # 8-byte Folded Reload
> 	movq	%rax, 64(%rsp)                  # 8-byte Spill
6330c6332
< 	testl	%r13d, %r13d
---
> 	testl	%r15d, %r15d
6334c6336
< 	movq	%r8, 112(%rsp)                  # 8-byte Spill
---
> 	movq	%r8, 96(%rsp)                   # 8-byte Spill
6338c6340
< 	movq	%r8, 128(%rsp)                  # 8-byte Spill
---
> 	movq	%r8, 112(%rsp)                  # 8-byte Spill
6342c6344
< 	movq	%r8, 72(%rsp)                   # 8-byte Spill
---
> 	movq	%r8, 136(%rsp)                  # 8-byte Spill
6346c6348
< 	imulq	$1536, %rdi, %rax               # imm = 0x600
---
> 	imulq	$1536, %rsi, %rax               # imm = 0x600
6349,6353c6351,6355
< 	movq	%rdi, 64(%rsp)                  # 8-byte Spill
< 	shlq	$7, %rdi
< 	addq	200(%rsp), %rdi                 # 8-byte Folded Reload
< 	movq	%rdi, 104(%rsp)                 # 8-byte Spill
< 	addq	192(%rsp), %rbx                 # 8-byte Folded Reload
---
> 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
> 	shlq	$7, %rsi
> 	addq	168(%rsp), %rsi                 # 8-byte Folded Reload
> 	movq	%rsi, 80(%rsp)                  # 8-byte Spill
> 	addq	208(%rsp), %rbx                 # 8-byte Folded Reload
6358c6360
< 	movq	64(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	48(%rsp), %rcx                  # 8-byte Reload
6364c6366
< 	testl	%esi, %esi
---
> 	testl	%edi, %edi
6368c6370
< 	cmpl	$1, %r13d
---
> 	cmpl	$1, %r15d
6376,6378c6378,6380
< 	movq	%r9, 48(%rsp)                   # 8-byte Spill
< 	movl	%esi, 40(%rsp)                  # 4-byte Spill
< 	movq	64(%rsp), %rbp                  # 8-byte Reload
---
> 	movq	%r9, 40(%rsp)                   # 8-byte Spill
> 	movl	%edi, 56(%rsp)                  # 4-byte Spill
> 	movq	48(%rsp), %rbp                  # 8-byte Reload
6381c6383
< 	movl	%eax, 640(%rsp)
---
> 	movl	%eax, 624(%rsp)
6383,6384c6385,6386
< 	movq	%rax, 656(%rsp)
< 	movq	%rax, 704(%rsp)
---
> 	movq	%rax, 640(%rsp)
> 	movq	%rax, 688(%rsp)
6386c6388
< 	movups	%xmm0, 664(%rsp)
---
> 	movups	%xmm0, 648(%rsp)
6388c6390
< 	movdqu	%xmm0, 680(%rsp)
---
> 	movdqu	%xmm0, 664(%rsp)
6390,6391c6392,6393
< 	movq	%rax, 696(%rsp)
< 	movq	104(%rsp), %rax                 # 8-byte Reload
---
> 	movq	%rax, 680(%rsp)
> 	movq	80(%rsp), %rax                  # 8-byte Reload
6393c6395
< 	movq	%rax, 736(%rsp)
---
> 	movq	%rax, 720(%rsp)
6395,6396c6397,6398
< 	movq	%rax, 648(%rsp)
< 	movl	%r14d, 644(%rsp)
---
> 	movq	%rax, 632(%rsp)
> 	movl	%r14d, 628(%rsp)
6398c6400
< 	movl	%r13d, %esi
---
> 	movl	%r15d, %esi
6400c6402
< 	leaq	752(%rsp), %rcx
---
> 	leaq	736(%rsp), %rcx
6403c6405
< 	movl	%r13d, %esi
---
> 	movl	%r15d, %esi
6405,6406c6407
< 	movl	%r13d, %r15d
< 	leaq	520(%rsp), %r13
---
> 	leaq	512(%rsp), %r13
6408c6409
< 	leaq	584(%rsp), %r8
---
> 	leaq	568(%rsp), %r8
6410,6411c6411,6412
< 	movl	584(%rsp), %ecx
< 	movq	592(%rsp,%rbp,8), %r8
---
> 	movl	568(%rsp), %ecx
> 	movq	576(%rsp,%rbp,8), %r8
6413c6414
< 	leaq	624(%rsp), %rsi
---
> 	leaq	608(%rsp), %rsi
6415d6415
< 	movl	%r15d, %r13d
6417,6418c6417,6418
< 	movl	760(%rsp), %eax
< 	addl	640(%rsp), %eax
---
> 	movl	744(%rsp), %eax
> 	addl	624(%rsp), %eax
6420c6420
< 	movl	%eax, 760(%rsp)
---
> 	movl	%eax, 744(%rsp)
6429,6430c6429,6430
< 	movq	112(%rsp), %rdi                 # 8-byte Reload
< 	leaq	624(%rsp), %rsi
---
> 	movq	96(%rsp), %rdi                  # 8-byte Reload
> 	leaq	608(%rsp), %rsi
6434,6435c6434,6435
< 	movl	764(%rsp), %eax
< 	movq	48(%rsp), %r9                   # 8-byte Reload
---
> 	movl	748(%rsp), %eax
> 	movq	40(%rsp), %r9                   # 8-byte Reload
6437c6437
< 	movq	56(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	64(%rsp), %rcx                  # 8-byte Reload
6442c6442
< 	movl	40(%rsp), %esi                  # 4-byte Reload
---
> 	movl	56(%rsp), %edi                  # 4-byte Reload
6446c6446
< 	testl	%esi, %esi
---
> 	testl	%edi, %edi
6450c6450
< 	movq	128(%rsp), %rax                 # 8-byte Reload
---
> 	movq	112(%rsp), %rax                 # 8-byte Reload
6452c6452
< 	movq	96(%rsp), %r8                   # 8-byte Reload
---
> 	movq	104(%rsp), %r8                  # 8-byte Reload
6458,6460c6458,6460
< 	movl	$65535, %edi                    # imm = 0xFFFF
< 	andl	%edi, %ecx
< 	movq	72(%rsp), %rax                  # 8-byte Reload
---
> 	movl	$65535, %esi                    # imm = 0xFFFF
> 	andl	%esi, %ecx
> 	movq	136(%rsp), %rax                 # 8-byte Reload
6467c6467
< 	andl	%edi, %eax
---
> 	andl	%esi, %eax
6471,6472c6471,6472
< 	cmovael	%ecx, %esi
< 	testl	%r13d, %r13d
---
> 	cmovael	%ecx, %edi
> 	testl	%r15d, %r15d
6485c6485
< 	movl	120(%rsp), %edi                 # 4-byte Reload
---
> 	movl	72(%rsp), %esi                  # 4-byte Reload
6490c6490
< 	popq	%rdi
---
> 	popq	%rsi
6494c6494
< 	movl	%r13d, %eax
---
> 	movl	%r15d, %eax
6497c6497
< 	testl	%edi, %edi
---
> 	testl	%esi, %esi
6500d6499
< 	movq	24(%rsp), %r15                  # 8-byte Reload
6504,6505c6503,6505
< 	cmpl	%r14d, 21420(%r15)
< 	je	.LBB11_234
---
> 	movq	24(%rsp), %rcx                  # 8-byte Reload
> 	cmpl	%r14d, 21420(%rcx)
> 	je	.LBB11_235
6508c6508
< 	testl	%edi, %edi
---
> 	testl	%esi, %esi
6514,6515c6514,6515
< 	subl	$1, %r13d
< 	cmovbl	%eax, %r13d
---
> 	subl	$1, %r15d
> 	cmovbl	%eax, %r15d
6521c6521
< 	movslq	21420(%r15), %rcx
---
> 	movslq	21420(%rbp), %rcx
6523c6523
< 	jge	.LBB11_535
---
> 	jge	.LBB11_537
6526,6527c6526,6527
< 	movq	16976(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	16976(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
6532,6533c6532,6533
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movl	$18, 17384(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	$18, 17384(%rbp)
6535c6535
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6538c6538
< 	cmpl	$18, 17384(%r15)
---
> 	cmpl	$18, 17384(%rbp)
6545c6545
< 	movslq	21416(%r15), %rdx
---
> 	movslq	21416(%rbp), %rdx
6550,6551c6550,6551
< 	movq	(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
6556c6556
< 	movl	1656(%rsp), %r14d
---
> 	movl	1656(%rsp), %r15d
6559c6559
< 	cmpl	%r14d, %eax
---
> 	cmpl	%r15d, %eax
6561c6561
< 	cmovll	%eax, %r14d
---
> 	cmovll	%eax, %r15d
6564,6565c6564,6565
< 	cmpl	%r14d, %eax
< 	cmovll	%eax, %r14d
---
> 	cmpl	%r15d, %eax
> 	cmovll	%eax, %r15d
6572,6574c6572,6574
< 	cmpl	%r14d, %ecx
< 	cmovll	%ecx, %r14d
< 	movl	%r14d, 36(%rsp)
---
> 	cmpl	%r15d, %ecx
> 	cmovll	%ecx, %r15d
> 	movl	%r15d, 36(%rsp)
6580c6580
< 	movl	%edx, 84(%rsp)                  # 4-byte Spill
---
> 	movl	%edx, 92(%rsp)                  # 4-byte Spill
6584c6584
< 	imull	$33, %r14d, %eax
---
> 	imull	$33, %r15d, %eax
6592c6592
< 	jle	.LBB11_250
---
> 	jle	.LBB11_251
6594,6595c6594,6595
< 	btl	$8, 136(%rsp)                   # 4-byte Folded Reload
< 	jb	.LBB11_219
---
> 	btl	$8, 144(%rsp)                   # 4-byte Folded Reload
> 	jb	.LBB11_220
6598c6598
< 	je	.LBB11_238
---
> 	je	.LBB11_239
6600,6601c6600,6602
< 	movl	%r14d, 236(%rsp)
< 	jmp	.LBB11_487
---
> 	movl	%r15d, 236(%rsp)
> 	movq	%rbp, %r13
> 	jmp	.LBB11_489
6607c6608
< 	movslq	21420(%r15), %rdx
---
> 	movslq	21420(%rbp), %rdx
6609c6610
< 	jge	.LBB11_590
---
> 	jge	.LBB11_592
6612,6613c6613,6614
< 	movq	(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
6618,6619c6619,6620
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movl	$6, 17384(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	$6, 17384(%rbp)
6621c6622
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6625c6626
< 	popq	%r14
---
> 	popq	%r15
6628c6629
< 	cmpl	$6, 17384(%r15)
---
> 	cmpl	$6, 17384(%rbp)
6635c6636
< 	movslq	21416(%r15), %rdx
---
> 	movslq	21416(%rbp), %rdx
6637c6638
< 	jge	.LBB11_590
---
> 	jge	.LBB11_592
6640,6641c6641,6642
< 	movq	(%r15,%rax,8), %rcx
< 	movslq	16392(%r15), %rdx
---
> 	movq	(%rbp,%rax,8), %rcx
> 	movslq	16392(%rbp), %rdx
6646c6647
< 	testb	$16, 152(%rsp)                  # 1-byte Folded Reload
---
> 	testb	$16, 144(%rsp)                  # 1-byte Folded Reload
6650,6651c6651,6652
< 	movl	-808(%r12), %r13d
< 	movl	%r13d, 36(%rsp)
---
> 	movl	-808(%r12), %r14d
> 	movl	%r14d, 36(%rsp)
6656c6657
< 	movl	%eax, 136(%rsp)                 # 4-byte Spill
---
> 	movl	%eax, 168(%rsp)                 # 4-byte Spill
6659c6660
< .LBB11_341:                             # %if.end384
---
> .LBB11_343:                             # %if.end384
6662c6663
< 	jmp	.LBB11_343
---
> 	jmp	.LBB11_345
6664,6665c6665,6666
< 	cmpl	$0, 436(%r15)
< 	je	.LBB11_217
---
> 	cmpl	$0, 436(%rbp)
> 	je	.LBB11_218
6667,6669c6668,6670
< 	movl	21416(%r15), %eax
< 	leal	-1(%rax), %ebp
< 	movl	$13, 17388(%r15)
---
> 	movl	21416(%rbp), %eax
> 	leal	-1(%rax), %r15d
> 	movl	$13, 17388(%rbp)
6670a6672
> 	leaq	1812(%rsp), %rbx
6677c6679
< 	cmpl	26652(%r15), %eax
---
> 	cmpl	26652(%rbp), %eax
6680c6682
< 	cmpl	$0, 16580(%r15)
---
> 	cmpl	$0, 16580(%rbp)
6683c6685
< 	cmpl	$0, 16584(%r15)
---
> 	cmpl	$0, 16584(%rbp)
6686,6687c6688,6689
< 	movsbl	25123(%r15), %eax
< 	xorl	%ebp, %ebp
---
> 	movsbl	25123(%rbp), %eax
> 	xorl	%r15d, %r15d
6691,6692c6693,6694
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6694,6695c6696,6697
< 	movsbl	25124(%r15), %eax
< 	cmpl	%eax, %ebp
---
> 	movsbl	25124(%rbp), %eax
> 	cmpl	%eax, %r15d
6698,6699c6700,6701
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6701,6702c6703,6704
< 	movsbl	25126(%r15), %eax
< 	cmpl	%eax, %ebp
---
> 	movsbl	25126(%rbp), %eax
> 	cmpl	%eax, %r15d
6705,6706c6707,6708
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6708,6709c6710,6711
< 	movsbl	25128(%r15), %eax
< 	cmpl	%eax, %ebp
---
> 	movsbl	25128(%rbp), %eax
> 	cmpl	%eax, %r15d
6712,6713c6714,6715
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6715,6716c6717,6718
< 	movsbl	25131(%r15), %eax
< 	cmpl	%eax, %ebp
---
> 	movsbl	25131(%rbp), %eax
> 	cmpl	%eax, %r15d
6719,6720c6721,6722
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6722,6723c6724,6725
< 	movsbl	25147(%r15), %eax
< 	cmpl	%eax, %ebp
---
> 	movsbl	25147(%rbp), %eax
> 	cmpl	%eax, %r15d
6726,6727c6728,6729
< 	cmpl	%eax, 26652(%r15)
< 	cmovnel	%eax, %ebp
---
> 	cmpl	%eax, 26652(%rbp)
> 	cmovnel	%eax, %r15d
6729c6731
< 	testl	%ebp, %ebp
---
> 	testl	%r15d, %r15d
6734c6736
< 	cmovnsl	%ebp, %eax
---
> 	cmovnsl	%r15d, %eax
6740c6742
< 	leaq	1812(%rsp), %rdx
---
> 	movq	%rbx, %rdx
6747,6748c6749,6750
< 	movq	16728(%r15,%rcx,8), %rsi
< 	movslq	16392(%r15), %rdi
---
> 	movq	16728(%rbp,%rcx,8), %rsi
> 	movslq	16392(%rbp), %rdi
6766c6768
< 	movq	%rcx, 48(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
6774c6776
< 	movq	25008(%r15), %rdx
---
> 	movq	25008(%rbp), %rdx
6777c6779
< 	movl	%edx, 96(%rsp)                  # 4-byte Spill
---
> 	movl	%edx, 104(%rsp)                 # 4-byte Spill
6779c6781
< 	movl	%edx, 112(%rsp)                 # 4-byte Spill
---
> 	movl	%edx, 96(%rsp)                  # 4-byte Spill
6783c6785
< 	addq	21344(%r15), %rdx
---
> 	addq	21344(%rbp), %rdx
6786c6788
< 	movl	%edx, 128(%rsp)                 # 4-byte Spill
---
> 	movl	%edx, 112(%rsp)                 # 4-byte Spill
6788c6790
< 	movl	%edx, 72(%rsp)                  # 4-byte Spill
---
> 	movl	%edx, 136(%rsp)                 # 4-byte Spill
6791c6793
< 	movq	21352(%r15), %rdx
---
> 	movq	21352(%rbp), %rdx
6794c6796
< 	addq	21360(%r15), %rcx
---
> 	addq	21360(%rbp), %rcx
6798c6800
< 	movq	%r8, 104(%rsp)                  # 8-byte Spill
---
> 	movq	%r8, 80(%rsp)                   # 8-byte Spill
6801c6803
< 	movl	%eax, 56(%rsp)                  # 4-byte Spill
---
> 	movl	%eax, 64(%rsp)                  # 4-byte Spill
6803c6805
< 	movq	%rdi, 88(%rsp)                  # 8-byte Spill
---
> 	movq	%rdi, 128(%rsp)                 # 8-byte Spill
6805c6807
< 	movl	%eax, 120(%rsp)                 # 4-byte Spill
---
> 	movl	%eax, 72(%rsp)                  # 4-byte Spill
6811c6813
< 	cmpl	%ebp, %eax
---
> 	cmpl	%r15d, %eax
6815,6816c6817
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	cmpl	26652(%rax), %ebx
---
> 	cmpl	26652(%rbp), %ebx
6820c6821
< 	movl	%ebp, %r12d
---
> 	movl	%r15d, %r12d
6822,6823c6823,6824
< 	movslq	%ebx, %rbp
< 	movzwl	(%rax,%rbp,2), %eax
---
> 	movslq	%ebx, %r15
> 	movzwl	(%rax,%r15,2), %eax
6825c6826
< 	imulq	$48, %rbp, %rcx
---
> 	imulq	$48, %r15, %rcx
6827,6828c6828,6829
< 	imull	112(%rsp), %eax                 # 4-byte Folded Reload
< 	addl	96(%rsp), %eax                  # 4-byte Folded Reload
---
> 	imull	96(%rsp), %eax                  # 4-byte Folded Reload
> 	addl	104(%rsp), %eax                 # 4-byte Folded Reload
6830c6831
< 	movq	64(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	48(%rsp), %rdi                  # 8-byte Reload
6844,6845c6845,6846
< 	imull	72(%rsp), %edx                  # 4-byte Folded Reload
< 	addl	128(%rsp), %edx                 # 4-byte Folded Reload
---
> 	imull	136(%rsp), %edx                 # 4-byte Folded Reload
> 	addl	112(%rsp), %edx                 # 4-byte Folded Reload
6853,6854c6854
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	addq	24752(%r15,%rbp,8), %rcx
---
> 	addq	24752(%rbp,%r15,8), %rcx
6857c6857
< 	addq	24496(%r15,%rbp,8), %rax
---
> 	addq	24496(%rbp,%r15,8), %rax
6859,6860c6859,6860
< 	imulq	$192, %rbp, %rax
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
---
> 	imulq	$192, %r15, %rax
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
6864,6865c6864,6865
< 	movq	%r15, %rdi
< 	movq	104(%rsp), %rsi                 # 8-byte Reload
---
> 	movq	%rbp, %rdi
> 	movq	80(%rsp), %rsi                  # 8-byte Reload
6867c6867
< 	movl	56(%rsp), %edx                  # 4-byte Reload
---
> 	movl	64(%rsp), %edx                  # 4-byte Reload
6876c6876
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6878c6878
< 	movl	120(%rsp), %edx                 # 4-byte Reload
---
> 	movl	72(%rsp), %edx                  # 4-byte Reload
6882c6882
< 	cmpl	%ebx, 26652(%r15)
---
> 	cmpl	%ebx, 26652(%rbp)
6886c6886
< 	movq	88(%rsp), %rax                  # 8-byte Reload
---
> 	movq	128(%rsp), %rax                 # 8-byte Reload
6889c6889
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6897c6897
< 	imulq	$20, %rbp, %rdx
---
> 	imulq	$20, %r15, %rdx
6900c6900
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6911c6911
< 	imulq	$20, %rbp, %rdx
---
> 	imulq	$20, %r15, %rdx
6914c6914
< 	movq	48(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rcx                  # 8-byte Reload
6915a6916
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
6920c6921
< 	movq	48(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	40(%rsp), %rdi                  # 8-byte Reload
6922,6923c6923
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	callq	*32816(%rax)
---
> 	callq	*32816(%rbp)
6926c6926
< 	movl	%r12d, %ebp
---
> 	movl	%r12d, %r15d
6931,6933c6931,6932
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	movl	26652(%rax), %eax
< 	cmpl	%eax, %ebp
---
> 	movl	26652(%rbp), %eax
> 	cmpl	%eax, %r15d
6942c6941
< 	movq	48(%rsp), %r12                  # 8-byte Reload
---
> 	movq	40(%rsp), %r12                  # 8-byte Reload
6945,6947c6944,6945
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movq	%r15, %rdi
< 	movq	104(%rsp), %r13                 # 8-byte Reload
---
> 	movq	%rbp, %rdi
> 	movq	80(%rsp), %r13                  # 8-byte Reload
6949c6947
< 	movl	56(%rsp), %edx                  # 4-byte Reload
---
> 	movl	64(%rsp), %edx                  # 4-byte Reload
6960c6958
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
6962c6960
< 	movl	56(%rsp), %edx                  # 4-byte Reload
---
> 	movl	64(%rsp), %edx                  # 4-byte Reload
6971c6969
< 	movq	88(%rsp), %rax                  # 8-byte Reload
---
> 	movq	128(%rsp), %rax                 # 8-byte Reload
6973c6971,6972
< 	cmpl	$0, 128(%r15)
---
> 	cmpl	$0, 128(%rbp)
> 	leaq	1812(%rsp), %rbx
6977c6976
< 	testb	$32, 388(%r15)
---
> 	testb	$32, 388(%rbp)
6983c6982
< 	movq	48(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rcx                  # 8-byte Reload
6993,6994c6992,6993
< 	cmpl	$0, 128(%r15)
< 	jne	.LBB11_274
---
> 	cmpl	$0, 128(%rbp)
> 	jne	.LBB11_214
7000c6999
< 	jne	.LBB11_274
---
> 	jne	.LBB11_214
7007,7008c7006,7009
< 	jmp	.LBB11_274
< .LBB11_214:                             # %for.cond.preheader.i
---
> .LBB11_214:                             # %x264_mb_analyse_inter_p8x8_mixed_ref.exit
> 	movl	$50529027, 17392(%rbp)          # imm = 0x3030303
> 	jmp	.LBB11_275
> .LBB11_215:                             # %for.cond.preheader.i
7019c7020
< .LBB11_215:                             # %for.cond.i3521
---
> .LBB11_216:                             # %for.cond.i3521
7023,7024c7024,7025
< # %bb.216:                              # %for.body.i3524
<                                         #   in Loop: Header=BB11_215 Depth=1
---
> # %bb.217:                              # %for.body.i3524
>                                         #   in Loop: Header=BB11_216 Depth=1
7045,7046c7046,7047
< 	jmp	.LBB11_215
< .LBB11_217:                             # %if.else207
---
> 	jmp	.LBB11_216
> .LBB11_218:                             # %if.else207
7049c7050
< 	cmpl	%r8d, 26652(%r15)
---
> 	cmpl	%r8d, 26652(%rbp)
7051c7052
< 	movl	128(%r15), %eax
---
> 	movl	128(%rbp), %eax
7054,7055c7055,7057
< 	je	.LBB11_266
< # %bb.218:                              # %cond.true6.i
---
> 	leaq	1812(%rsp), %rdx
> 	je	.LBB11_267
> # %bb.219:                              # %cond.true6.i
7059,7064c7061,7066
< 	jmp	.LBB11_267
< .LBB11_219:                             # %if.then1263
< 	cmpl	$0, 436(%r15)
< 	je	.LBB11_414
< # %bb.220:                              # %if.then1268
< 	movq	21416(%r15), %xmm0              # xmm0 = mem[0],zero
---
> 	jmp	.LBB11_268
> .LBB11_220:                             # %if.then1263
> 	cmpl	$0, 436(%rbp)
> 	je	.LBB11_417
> # %bb.221:                              # %if.then1268
> 	movq	21416(%rbp), %xmm0              # xmm0 = mem[0],zero
7067,7068c7069,7070
< 	movq	%xmm1, 624(%rsp)
< 	leaq	25123(%r15), %rax
---
> 	movq	%xmm1, 608(%rsp)
> 	leaq	25123(%rbp), %rax
7073c7075
< .LBB11_221:                             # %for.cond.i3605
---
> .LBB11_222:                             # %for.cond.i3605
7076,7082c7078,7084
< 	je	.LBB11_255
< # %bb.222:                              # %for.body.i3608
<                                         #   in Loop: Header=BB11_221 Depth=1
< 	cmpl	$0, 624(%rsp,%rdi,4)
< 	jle	.LBB11_224
< # %bb.223:                              # %land.lhs.true.i3611
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	je	.LBB11_256
> # %bb.223:                              # %for.body.i3608
>                                         #   in Loop: Header=BB11_222 Depth=1
> 	cmpl	$0, 608(%rsp,%rdi,4)
> 	jle	.LBB11_225
> # %bb.224:                              # %land.lhs.true.i3611
>                                         #   in Loop: Header=BB11_222 Depth=1
7087,7089c7089,7091
< 	je	.LBB11_225
< .LBB11_224:                             # %if.end109.i3609
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	je	.LBB11_226
> .LBB11_225:                             # %if.end109.i3609
>                                         #   in Loop: Header=BB11_222 Depth=1
7092,7102c7094,7104
< 	jmp	.LBB11_221
< .LBB11_225:                             # %land.lhs.true9.i
<                                         #   in Loop: Header=BB11_221 Depth=1
< 	cmpl	$0, 16580(%r15)
< 	jle	.LBB11_224
< # %bb.226:                              # %land.lhs.true12.i
<                                         #   in Loop: Header=BB11_221 Depth=1
< 	cmpl	$0, 16584(%r15)
< 	jle	.LBB11_224
< # %bb.227:                              # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	jmp	.LBB11_222
> .LBB11_226:                             # %land.lhs.true9.i
>                                         #   in Loop: Header=BB11_222 Depth=1
> 	cmpl	$0, 16580(%rbp)
> 	jle	.LBB11_225
> # %bb.227:                              # %land.lhs.true12.i
>                                         #   in Loop: Header=BB11_222 Depth=1
> 	cmpl	$0, 16584(%rbp)
> 	jle	.LBB11_225
> # %bb.228:                              # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7115,7117c7117,7119
< 	jg	.LBB11_229
< # %bb.228:                              # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	jg	.LBB11_230
> # %bb.229:                              # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7119,7120c7121,7122
< .LBB11_229:                             # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> .LBB11_230:                             # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7123,7125c7125,7127
< 	jg	.LBB11_231
< # %bb.230:                              # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	jg	.LBB11_232
> # %bb.231:                              # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7127,7128c7129,7130
< .LBB11_231:                             # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> .LBB11_232:                             # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7131,7133c7133,7135
< 	jg	.LBB11_233
< # %bb.232:                              # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
---
> 	jg	.LBB11_234
> # %bb.233:                              # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
7135,7139c7137,7141
< .LBB11_233:                             # %if.then.i3614
<                                         #   in Loop: Header=BB11_221 Depth=1
< 	movl	%r8d, 624(%rsp,%rdi,4)
< 	jmp	.LBB11_224
< .LBB11_234:                             # %for.end269.i
---
> .LBB11_234:                             # %if.then.i3614
>                                         #   in Loop: Header=BB11_222 Depth=1
> 	movl	%r8d, 608(%rsp,%rdi,4)
> 	jmp	.LBB11_225
> .LBB11_235:                             # %for.end269.i
7144c7146,7147
< 	callq	*32816(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	callq	*32816(%rbp)
7149c7152
< 	callq	*32816(%r15)
---
> 	callq	*32816(%rbp)
7155,7156c7158,7159
< 	movzwl	(%rdx,%rsi,2), %r13d
< 	addl	%ecx, %r13d
---
> 	movzwl	(%rdx,%rsi,2), %r15d
> 	addl	%ecx, %r15d
7158,7159c7161,7162
< 	addq	192(%rsp), %rdx                 # 8-byte Folded Reload
< 	movl	25008(%r15), %ecx
---
> 	addq	208(%rsp), %rdx                 # 8-byte Folded Reload
> 	movl	25008(%rbp), %ecx
7166c7169
< 	popq	%rbp
---
> 	popq	%r13
7168,7169c7171,7172
< 	movl	%ebp, 8(%rsp)
< 	movl	%ebp, (%rsp)
---
> 	movl	%r13d, 8(%rsp)
> 	movl	%r13d, (%rsp)
7171,7172c7174,7175
< 	leaq	208(%rsp), %rsi
< 	callq	*32624(%r15)
---
> 	leaq	216(%rsp), %rsi
> 	callq	*32624(%rbp)
7176c7179
< 	leaq	(%r15,%rax), %rdx
---
> 	leaq	(%rax,%rbp), %rdx
7178c7181
< 	movl	25008(%r15), %ecx
---
> 	movl	25008(%rbp), %ecx
7182,7183c7185,7186
< 	movl	%ebp, 8(%rsp)
< 	movl	%ebp, (%rsp)
---
> 	movl	%r13d, 8(%rsp)
> 	movl	%r13d, (%rsp)
7185c7188
< 	leaq	588(%rsp), %r14
---
> 	leaq	572(%rsp), %r14
7187,7188c7190,7191
< 	callq	*32624(%r15)
< 	leaq	208(%rsp), %rcx
---
> 	callq	*32624(%rbp)
> 	leaq	216(%rsp), %rcx
7195c7198
< 	addq	26624(%r15), %rdx
---
> 	addq	26624(%rbp), %rdx
7200c7203
< 	movl	%ebp, %esi
---
> 	movl	%r13d, %esi
7203,7205c7206,7208
< 	callq	*32640(%r15)
< 	movq	21344(%r15), %rdi
< 	movl	%ebp, %esi
---
> 	callq	*32640(%rbp)
> 	movq	21344(%rbp), %rdi
> 	movl	%r13d, %esi
7207,7209c7210,7212
< 	movl	%ebp, %ecx
< 	callq	*31816(%r15)
< 	addl	%r13d, %eax
---
> 	movl	%r13d, %ecx
> 	callq	*31816(%rbp)
> 	addl	%r15d, %eax
7215,7218c7218,7220
< 	je	.LBB11_237
< # %bb.235:                              # %if.then394.i
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	leaq	22960(%r15), %rax
---
> 	je	.LBB11_238
> # %bb.236:                              # %if.then394.i
> 	leaq	22960(%rbp), %rax
7241c7243
< 	movq	192(%rsp), %rdx                 # 8-byte Reload
---
> 	movq	208(%rsp), %rdx                 # 8-byte Reload
7243c7245
< 	movl	25008(%r15), %ecx
---
> 	movl	25008(%rbp), %ecx
7248c7250
< 	addq	26624(%r15), %rsi
---
> 	addq	26624(%rbp), %rsi
7259,7260c7261,7264
< 	callq	*32640(%r15)
< 	movq	21344(%r15), %rdi
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	callq	*32640(%rax)
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	movq	21344(%rax), %rdi
7264c7268,7269
< 	callq	*31816(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	callq	*31816(%rbp)
7266c7271
< 	addl	%r14d, %r13d
---
> 	addl	%r14d, %r15d
7268c7273
< 	addl	%r13d, %ecx
---
> 	addl	%r15d, %ecx
7271,7272c7276,7277
< 	jge	.LBB11_237
< # %bb.236:                              # %if.then505.i
---
> 	jge	.LBB11_238
> # %bb.237:                              # %if.then505.i
7278c7283
< .LBB11_237:                             # %if.end522.i
---
> .LBB11_238:                             # %if.end522.i
7286d7290
< 	movq	24(%rsp), %r15                  # 8-byte Reload
7288,7292c7292,7296
< .LBB11_238:                             # %lor.lhs.false1603
< 	cmpl	$0, 16408(%r15)
< 	je	.LBB11_485
< # %bb.239:                              # %if.else1608
< 	movq	144(%rsp), %rax                 # 8-byte Reload
---
> .LBB11_239:                             # %lor.lhs.false1603
> 	cmpl	$0, 16408(%rbp)
> 	je	.LBB11_487
> # %bb.240:                              # %if.else1608
> 	movq	160(%rsp), %rax                 # 8-byte Reload
7295,7296c7299,7300
< .LBB11_240:                             # %for.cond1736.preheader
< 	movl	%r14d, %r13d
---
> .LBB11_241:                             # %for.cond1736.preheader
> 	movl	%r15d, %r13d
7299,7300c7303,7304
< 	movl	84(%rsp), %eax                  # 4-byte Reload
< .LBB11_241:                             # %for.cond1736
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
> .LBB11_242:                             # %for.cond1736
7303,7306c7307,7310
< 	je	.LBB11_481
< # %bb.242:                              # %for.body1740
<                                         #   in Loop: Header=BB11_241 Depth=1
< 	movzbl	(%r15,%r14), %r15d
---
> 	je	.LBB11_483
> # %bb.243:                              # %for.body1740
>                                         #   in Loop: Header=BB11_242 Depth=1
> 	movzbl	(%rbp,%r14), %r15d
7308,7310c7312,7314
< 	je	.LBB11_249
< # %bb.243:                              # %if.end1751
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> 	je	.LBB11_250
> # %bb.244:                              # %if.end1751
>                                         #   in Loop: Header=BB11_242 Depth=1
7312,7314c7316,7318
< 	je	.LBB11_246
< # %bb.244:                              # %if.then1755
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> 	je	.LBB11_247
> # %bb.245:                              # %if.then1755
>                                         #   in Loop: Header=BB11_242 Depth=1
7323c7327
< 	movl	84(%rsp), %eax                  # 4-byte Reload
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
7325,7327c7329,7331
< 	je	.LBB11_246
< # %bb.245:                              # %if.then1767
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> 	je	.LBB11_247
> # %bb.246:                              # %if.then1767
>                                         #   in Loop: Header=BB11_242 Depth=1
7331,7332c7335,7336
< .LBB11_246:                             # %if.end1774
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> .LBB11_247:                             # %if.end1774
>                                         #   in Loop: Header=BB11_242 Depth=1
7334,7336c7338,7340
< 	je	.LBB11_249
< # %bb.247:                              # %if.then1778
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> 	je	.LBB11_250
> # %bb.248:                              # %if.then1778
>                                         #   in Loop: Header=BB11_242 Depth=1
7345c7349
< 	movl	84(%rsp), %eax                  # 4-byte Reload
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
7347,7349c7351,7353
< 	je	.LBB11_249
< # %bb.248:                              # %if.then1790
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> 	je	.LBB11_250
> # %bb.249:                              # %if.then1790
>                                         #   in Loop: Header=BB11_242 Depth=1
7353,7354c7357,7358
< .LBB11_249:                             # %cleanup1798
<                                         #   in Loop: Header=BB11_241 Depth=1
---
> .LBB11_250:                             # %cleanup1798
>                                         #   in Loop: Header=BB11_242 Depth=1
7357,7359c7361,7363
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	jmp	.LBB11_241
< .LBB11_250:                             # %if.then1240
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	jmp	.LBB11_242
> .LBB11_251:                             # %if.then1240
7361c7365
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
7363c7367
< 	movl	%r14d, %edx
---
> 	movl	%r15d, %edx
7365c7369
< 	movl	172(%rsp), %eax                 # 4-byte Reload
---
> 	movl	156(%rsp), %eax                 # 4-byte Reload
7368,7369c7372,7373
< # %bb.251:                              # %if.then1240
< 	movl	172(%rsp), %eax                 # 4-byte Reload
---
> # %bb.252:                              # %if.then1240
> 	movl	156(%rsp), %eax                 # 4-byte Reload
7372,7373c7376,7377
< # %bb.252:                              # %if.then1240
< 	movl	172(%rsp), %eax                 # 4-byte Reload
---
> # %bb.253:                              # %if.then1240
> 	movl	156(%rsp), %eax                 # 4-byte Reload
7376,7377c7380,7381
< # %bb.253:                              # %if.then1240
< 	movl	172(%rsp), %eax                 # 4-byte Reload
---
> # %bb.254:                              # %if.then1240
> 	movl	156(%rsp), %eax                 # 4-byte Reload
7380,7381c7384,7385
< # %bb.254:                              # %if.then1256
< 	movl	$18, 17384(%r15)
---
> # %bb.255:                              # %if.then1256
> 	movl	$18, 17384(%rbp)
7383c7387
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
7385,7387c7389,7391
< 	jmp	.LBB11_590
< .LBB11_255:                             # %for.cond.cleanup.i3620
< 	movl	$13, 17388(%r15)
---
> 	jmp	.LBB11_592
> .LBB11_256:                             # %for.cond.cleanup.i3620
> 	movl	$13, 17388(%rbp)
7390,7391c7394,7395
< 	leaq	21464(%r15), %rax
< 	movq	%rax, 504(%rsp)                 # 8-byte Spill
---
> 	leaq	21464(%rbp), %rax
> 	movq	%rax, 496(%rsp)                 # 8-byte Spill
7396,7398c7400,7402
< 	movq	%rax, 96(%rsp)                  # 8-byte Spill
< 	xorl	%r12d, %r12d
< .LBB11_256:                             # %for.cond111.i
---
> 	movq	%rax, 104(%rsp)                 # 8-byte Spill
> 	xorl	%r15d, %r15d
> .LBB11_257:                             # %for.cond111.i
7400,7406c7404,7410
<                                         #     Child Loop BB11_258 Depth 2
<                                         #       Child Loop BB11_260 Depth 3
< 	cmpq	$4, %r12
< 	je	.LBB11_420
< # %bb.257:                              # %for.body115.i
<                                         #   in Loop: Header=BB11_256 Depth=1
< 	movl	%r12d, %edx
---
>                                         #     Child Loop BB11_259 Depth 2
>                                         #       Child Loop BB11_261 Depth 3
> 	cmpq	$4, %r15
> 	je	.LBB11_423
> # %bb.258:                              # %for.body115.i
>                                         #   in Loop: Header=BB11_257 Depth=1
> 	movl	%r15d, %edx
7408c7412
< 	movl	%r12d, %eax
---
> 	movl	%r15d, %eax
7411c7415
< 	movq	%rcx, 520(%rsp)
---
> 	movq	%rcx, 512(%rsp)
7415c7419
< 	movq	25008(%r15), %rcx
---
> 	movq	25008(%rbp), %rcx
7418c7422
< 	movl	%ecx, 128(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 112(%rsp)                 # 4-byte Spill
7420c7424
< 	movl	%ecx, 72(%rsp)                  # 4-byte Spill
---
> 	movl	%ecx, 136(%rsp)                 # 4-byte Spill
7424c7428
< 	addq	21344(%r15), %rcx
---
> 	addq	21344(%rbp), %rcx
7427c7431
< 	movl	%ecx, 120(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 72(%rsp)                  # 4-byte Spill
7430c7434
< 	movq	21352(%r15), %rcx
---
> 	movq	21352(%rbp), %rcx
7433c7437
< 	addq	21360(%r15), %rax
---
> 	addq	21360(%rbp), %rax
7435c7439
< 	movl	%ecx, 88(%rsp)                  # 4-byte Spill
---
> 	movl	%ecx, 128(%rsp)                 # 4-byte Spill
7438,7439c7442,7443
< 	movq	%rdx, 112(%rsp)                 # 8-byte Spill
< 	movl	%r12d, %eax
---
> 	movq	%rdx, 96(%rsp)                  # 8-byte Spill
> 	movl	%r15d, %eax
7441,7447c7445,7451
< 	movl	%eax, 152(%rsp)                 # 4-byte Spill
< 	leaq	1(%r12), %rax
< 	movq	%rax, 104(%rsp)                 # 8-byte Spill
< 	leal	(,%r12,4), %eax
< 	movl	%eax, 136(%rsp)                 # 4-byte Spill
< 	imulq	$144, %r12, %rax
< 	movq	%rax, 512(%rsp)                 # 8-byte Spill
---
> 	movl	%eax, 120(%rsp)                 # 4-byte Spill
> 	leaq	1(%r15), %rax
> 	movq	%rax, 80(%rsp)                  # 8-byte Spill
> 	leal	(,%r15,4), %eax
> 	movl	%eax, 144(%rsp)                 # 4-byte Spill
> 	imulq	$144, %r15, %rax
> 	movq	%rax, 504(%rsp)                 # 8-byte Spill
7449a7454,7456
> 	movq	%rax, 56(%rsp)                  # 8-byte Spill
> 	movq	496(%rsp), %r12                 # 8-byte Reload
> 	movq	168(%rsp), %rax                 # 8-byte Reload
7451,7454d7457
< 	movq	504(%rsp), %rax                 # 8-byte Reload
< 	movq	%rax, 160(%rsp)                 # 8-byte Spill
< 	movq	200(%rsp), %rax                 # 8-byte Reload
< 	movq	%rax, 48(%rsp)                  # 8-byte Spill
7456,7458c7459,7461
< 	movq	%r12, 224(%rsp)                 # 8-byte Spill
< .LBB11_258:                             # %for.cond165.i
<                                         #   Parent Loop BB11_256 Depth=1
---
> 	movq	%r15, 176(%rsp)                 # 8-byte Spill
> .LBB11_259:                             # %for.cond165.i
>                                         #   Parent Loop BB11_257 Depth=1
7460c7463
<                                         #       Child Loop BB11_260 Depth 3
---
>                                         #       Child Loop BB11_261 Depth 3
7462,7465c7465,7468
< 	je	.LBB11_265
< # %bb.259:                              # %for.body169.i
<                                         #   in Loop: Header=BB11_258 Depth=2
< 	movq	40(%rsp), %rcx                  # 8-byte Reload
---
> 	je	.LBB11_266
> # %bb.260:                              # %for.body169.i
>                                         #   in Loop: Header=BB11_259 Depth=2
> 	movq	56(%rsp), %rcx                  # 8-byte Reload
7470c7473
< 	movq	%rdx, 184(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 200(%rsp)                 # 8-byte Spill
7474c7477
< 	movq	%rdx, 56(%rsp)                  # 8-byte Spill
---
> 	movq	%rdx, 64(%rsp)                  # 8-byte Spill
7479c7482
< 	movl	624(%rsp,%rbp,4), %eax
---
> 	movl	608(%rsp,%rbp,4), %eax
7484,7485c7487,7488
< 	leaq	(%rcx,%r12,4), %rcx
< 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
---
> 	leaq	(%rcx,%r15,4), %rcx
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
7494,7495c7497,7498
< 	movq	%rax, 64(%rsp)                  # 8-byte Spill
< 	movq	160(%rsp), %r12                 # 8-byte Reload
---
> 	movq	%rax, 48(%rsp)                  # 8-byte Spill
> 	movq	%r12, 184(%rsp)                 # 8-byte Spill
7497,7499c7500,7502
< .LBB11_260:                             # %for.cond181.i
<                                         #   Parent Loop BB11_256 Depth=1
<                                         #     Parent Loop BB11_258 Depth=2
---
> .LBB11_261:                             # %for.cond181.i
>                                         #   Parent Loop BB11_257 Depth=1
>                                         #     Parent Loop BB11_259 Depth=2
7501,7504c7504,7507
< 	cmpq	%r15, 64(%rsp)                  # 8-byte Folded Reload
< 	je	.LBB11_264
< # %bb.261:                              # %for.body187.i
<                                         #   in Loop: Header=BB11_260 Depth=3
---
> 	cmpq	%r15, 48(%rsp)                  # 8-byte Folded Reload
> 	je	.LBB11_265
> # %bb.262:                              # %for.body187.i
>                                         #   in Loop: Header=BB11_261 Depth=3
7509,7510c7512,7513
< 	imull	72(%rsp), %eax                  # 4-byte Folded Reload
< 	addl	128(%rsp), %eax                 # 4-byte Folded Reload
---
> 	imull	136(%rsp), %eax                 # 4-byte Folded Reload
> 	addl	112(%rsp), %eax                 # 4-byte Folded Reload
7526,7527c7529,7530
< 	imull	120(%rsp), %ecx                 # 4-byte Folded Reload
< 	addl	88(%rsp), %ecx                  # 4-byte Folded Reload
---
> 	imull	72(%rsp), %ecx                  # 4-byte Folded Reload
> 	addl	128(%rsp), %ecx                 # 4-byte Folded Reload
7535c7538
< 	movq	48(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rcx                  # 8-byte Reload
7545c7548
< 	movq	112(%rsp), %rsi                 # 8-byte Reload
---
> 	movq	96(%rsp), %rsi                  # 8-byte Reload
7547c7550
< 	movl	152(%rsp), %edx                 # 4-byte Reload
---
> 	movl	120(%rsp), %edx                 # 4-byte Reload
7558c7561
< 	movl	136(%rsp), %edx                 # 4-byte Reload
---
> 	movl	144(%rsp), %edx                 # 4-byte Reload
7565c7568
< 	movq	104(%rsp), %rcx                 # 8-byte Reload
---
> 	movq	80(%rsp), %rcx                  # 8-byte Reload
7572,7573c7575,7576
< 	movq	40(%rsp), %rcx                  # 8-byte Reload
< 	movq	56(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	56(%rsp), %rcx                  # 8-byte Reload
> 	movq	64(%rsp), %rdx                  # 8-byte Reload
7575,7577c7578,7580
< 	jge	.LBB11_263
< # %bb.262:                              # %if.then337.i
<                                         #   in Loop: Header=BB11_260 Depth=3
---
> 	jge	.LBB11_264
> # %bb.263:                              # %if.then337.i
>                                         #   in Loop: Header=BB11_261 Depth=3
7579c7582
< 	movq	184(%rsp), %rdi                 # 8-byte Reload
---
> 	movq	200(%rsp), %rdi                 # 8-byte Reload
7587c7590
< 	movq	144(%rsp), %rax                 # 8-byte Reload
---
> 	movq	160(%rsp), %rax                 # 8-byte Reload
7589,7590c7592,7593
< .LBB11_263:                             # %if.end349.i3673
<                                         #   in Loop: Header=BB11_260 Depth=3
---
> .LBB11_264:                             # %if.end349.i3673
>                                         #   in Loop: Header=BB11_261 Depth=3
7592c7595
< 	movq	96(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	104(%rsp), %rcx                 # 8-byte Reload
7597,7599c7600,7602
< 	jmp	.LBB11_260
< .LBB11_264:                             # %for.cond.cleanup186.i
<                                         #   in Loop: Header=BB11_258 Depth=2
---
> 	jmp	.LBB11_261
> .LBB11_265:                             # %for.cond.cleanup186.i
>                                         #   in Loop: Header=BB11_259 Depth=2
7601,7611c7604,7613
< 	subq	$-128, 48(%rsp)                 # 8-byte Folded Spill
< 	addq	$1536, 160(%rsp)                # 8-byte Folded Spill
<                                         # imm = 0x600
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movq	224(%rsp), %r12                 # 8-byte Reload
< 	jmp	.LBB11_258
< .LBB11_265:                             # %for.cond.cleanup168.i
<                                         #   in Loop: Header=BB11_256 Depth=1
< 	leaq	15132(%rsp), %rax
< 	movq	512(%rsp), %r14                 # 8-byte Reload
< 	leaq	(%rax,%r14), %rbx
---
> 	subq	$-128, 40(%rsp)                 # 8-byte Folded Spill
> 	movq	184(%rsp), %r12                 # 8-byte Reload
> 	addq	$1536, %r12                     # imm = 0x600
> 	movq	176(%rsp), %r15                 # 8-byte Reload
> 	jmp	.LBB11_259
> .LBB11_266:                             # %for.cond.cleanup168.i
>                                         #   in Loop: Header=BB11_257 Depth=1
> 	leaq	15132(%rsp), %r12
> 	movq	504(%rsp), %r14                 # 8-byte Reload
> 	leaq	(%r12,%r14), %rbx
7616,7617c7618,7619
< 	movq	weight_none@GOTPCREL(%rip), %r13
< 	movq	%r13, 16(%rsp)
---
> 	movq	weight_none@GOTPCREL(%rip), %rax
> 	movq	%rax, 16(%rsp)
7620c7622
< 	popq	%rbp
---
> 	popq	%r13
7622,7623c7624,7625
< 	movl	%ebp, 8(%rsp)
< 	movl	%ebp, (%rsp)
---
> 	movl	%r13d, 8(%rsp)
> 	movl	%r13d, (%rsp)
7625c7627
< 	leaq	520(%rsp), %rsi
---
> 	leaq	512(%rsp), %rsi
7627,7630c7629,7632
< 	callq	*32624(%r15)
< 	movq	%rax, 64(%rsp)                  # 8-byte Spill
< 	leaq	15132(%rsp), %rax
< 	addq	%rax, %r14
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	callq	*32624(%rbp)
> 	movq	%rax, 48(%rsp)                  # 8-byte Spill
> 	addq	%r12, %r14
7635,7637c7637,7640
< 	movq	%r13, 16(%rsp)
< 	movl	%ebp, 8(%rsp)
< 	movl	%ebp, (%rsp)
---
> 	movq	weight_none@GOTPCREL(%rip), %rax
> 	movq	%rax, 16(%rsp)
> 	movl	%r13d, 8(%rsp)
> 	movl	%r13d, (%rsp)
7639c7642
< 	leaq	524(%rsp), %rsi
---
> 	leaq	516(%rsp), %rsi
7641,7643c7644,7646
< 	callq	*32624(%r15)
< 	movl	520(%rsp), %ecx
< 	movl	524(%rsp), %r9d
---
> 	callq	*32624(%rbp)
> 	movl	512(%rsp), %ecx
> 	movl	516(%rsp), %r9d
7647c7650
< 	addq	26624(%r15), %rdx
---
> 	addq	26624(%rbp), %rdx
7650,7653c7653,7656
< 	leaq	832(%rsp), %r13
< 	movq	%r13, %rdi
< 	movl	%ebp, %esi
< 	movq	64(%rsp), %rdx                  # 8-byte Reload
---
> 	leaq	832(%rsp), %r12
> 	movq	%r12, %rdi
> 	movl	%r13d, %esi
> 	movq	48(%rsp), %rdx                  # 8-byte Reload
7655c7658
< 	callq	*32664(%r15)
---
> 	callq	*32664(%rbp)
7661,7664c7664,7667
< 	movq	%r13, %rdx
< 	movl	%ebp, %ecx
< 	callq	*31840(%r15)
< 	movl	%eax, 15164(%rsp,%r12,4)
---
> 	movq	%r12, %rdx
> 	movl	%r13d, %ecx
> 	callq	*31840(%rbp)
> 	movl	%eax, 15164(%rsp,%r15,4)
7693c7696
< 	movl	15116(%rsp,%r12,4), %edx
---
> 	movl	15116(%rsp,%r15,4), %edx
7701c7704
< 	movb	%cl, 17392(%r15,%r12)
---
> 	movb	%cl, 17392(%rbp,%r15)
7703c7706
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
7705c7708
< 	movl	%r12d, %edx
---
> 	movl	%r15d, %edx
7708,7711c7711,7714
< 	addq	$4, 96(%rsp)                    # 8-byte Folded Spill
< 	movq	104(%rsp), %r12                 # 8-byte Reload
< 	jmp	.LBB11_256
< .LBB11_266:                             # %entry.cond.end9_crit_edge.i
---
> 	addq	$4, 104(%rsp)                   # 8-byte Folded Spill
> 	movq	80(%rsp), %r15                  # 8-byte Reload
> 	jmp	.LBB11_257
> .LBB11_267:                             # %entry.cond.end9_crit_edge.i
7713c7716
< .LBB11_267:                             # %cond.end9.i
---
> .LBB11_268:                             # %cond.end9.i
7715,7719c7718,7720
< 	leaq	1812(%rsp), %rcx
< 	leaq	(%rcx,%rdi), %rdx
< 	movq	%rdx, 72(%rsp)                  # 8-byte Spill
< 	movl	$13, 17388(%r15)
< 	movq	%rcx, %rdx
---
> 	leaq	(%rdx,%rdi), %rcx
> 	movq	%rcx, 136(%rsp)                 # 8-byte Spill
> 	movl	$13, 17388(%rbp)
7723,7724c7724,7725
< 	addq	64(%rsp), %rcx                  # 8-byte Folded Reload
< 	movq	%rcx, 120(%rsp)                 # 8-byte Spill
---
> 	addq	48(%rsp), %rcx                  # 8-byte Folded Reload
> 	movq	%rcx, 128(%rsp)                 # 8-byte Spill
7726,7727c7727,7728
< 	addq	40(%rsp), %rcx                  # 8-byte Folded Reload
< 	movq	%rcx, 88(%rsp)                  # 8-byte Spill
---
> 	addq	56(%rsp), %rcx                  # 8-byte Folded Reload
> 	movq	%rcx, 72(%rsp)                  # 8-byte Spill
7730,7735c7731,7739
< 	xorl	%r11d, %r11d
< 	movl	%esi, 96(%rsp)                  # 4-byte Spill
< 	movl	%r8d, 112(%rsp)                 # 4-byte Spill
< 	movq	%r9, 128(%rsp)                  # 8-byte Spill
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< .LBB11_268:                             # %for.cond.i3104
---
> 	xorl	%edx, %edx
> 	movl	%esi, 104(%rsp)                 # 4-byte Spill
> 	movl	%r8d, 96(%rsp)                  # 4-byte Spill
> 	movq	%r9, 112(%rsp)                  # 8-byte Spill
> 	pushq	$2
> 	.cfi_adjust_cfa_offset 8
> 	popq	%rbx
> 	.cfi_adjust_cfa_offset -8
> .LBB11_269:                             # %for.cond.i3104
7738,7740c7742,7744
< 	je	.LBB11_273
< # %bb.269:                              # %for.body.i3107
<                                         #   in Loop: Header=BB11_268 Depth=1
---
> 	je	.LBB11_274
> # %bb.270:                              # %for.body.i3107
>                                         #   in Loop: Header=BB11_269 Depth=1
7743c7747
< 	leal	-1(%r14), %ebp
---
> 	leal	-1(%r15), %ebp
7752,7754c7756,7760
< 	movl	25008(%r15), %edx
< 	movl	%edx, 120(%r13)
< 	movl	25012(%r15), %ecx
---
> 	movq	24(%rsp), %rcx                  # 8-byte Reload
> 	movl	25008(%rcx), %r11d
> 	movl	%r11d, 120(%r13)
> 	movq	24(%rsp), %rcx                  # 8-byte Reload
> 	movl	25012(%rcx), %ecx
7759c7765,7767
< 	addq	21344(%r15), %rsi
---
> 	movq	%rdi, 40(%rsp)                  # 8-byte Spill
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	addq	21344(%rdi), %rsi
7764,7765c7772,7773
< 	movq	%rdi, 48(%rsp)                  # 8-byte Spill
< 	movq	21352(%r15), %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	movq	21352(%rdi), %rdi
7768c7776,7777
< 	addq	21360(%r15), %rsi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	addq	21360(%rdi), %rsi
7771,7774c7780,7783
< 	imull	%eax, %edx
< 	leal	(%rsi,%rdx,8), %edx
< 	movslq	%edx, %rdx
< 	movq	120(%rsp), %rdi                 # 8-byte Reload
---
> 	imull	%eax, %r11d
> 	leal	(%rsi,%r11,8), %esi
> 	movslq	%esi, %r11
> 	movq	128(%rsp), %rdi                 # 8-byte Reload
7776c7785
< 	addq	%rdx, %rsi
---
> 	addq	%r11, %rsi
7779c7788
< 	addq	%rdx, %rsi
---
> 	addq	%r11, %rsi
7782c7791
< 	addq	%rdx, %rsi
---
> 	addq	%r11, %rsi
7785c7794
< 	addq	%rdx, %rsi
---
> 	addq	%r11, %rsi
7796,7797c7805,7807
< 	leaq	(%rdx,%rdx), %rax
< 	addq	24752(%r15,%r9,8), %rax
---
> 	leaq	(%r11,%r11), %rax
> 	movq	24(%rsp), %rcx                  # 8-byte Reload
> 	addq	24752(%rcx,%r9,8), %rax
7800,7802c7810,7813
< 	addq	24496(%r15,%r9,8), %rdx
< 	movq	%rdx, 80(%r13)
< 	movq	88(%rsp), %rax                  # 8-byte Reload
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	addq	24496(%rax,%r9,8), %r11
> 	movq	%r11, 80(%r13)
> 	movq	72(%rsp), %rax                  # 8-byte Reload
7804d7814
< 	movq	%r14, %rbx
7807c7817
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
7809,7813c7819
< 	movl	%r11d, %edx
< 	pushq	$2
< 	.cfi_adjust_cfa_offset 8
< 	popq	%rcx
< 	.cfi_adjust_cfa_offset -8
---
> 	movl	%ebx, %ecx
7815,7816c7821,7822
< 	movq	%r10, 56(%rsp)                  # 8-byte Spill
< 	movq	%r11, 104(%rsp)                 # 8-byte Spill
---
> 	movq	%r10, 64(%rsp)                  # 8-byte Spill
> 	movq	%rdx, 80(%rsp)                  # 8-byte Spill
7818c7824
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
7820,7822c7826,7828
< 	movq	72(%rsp), %rdx                  # 8-byte Reload
< 	movq	%rbx, %r13
< 	movl	%ebx, %ecx
---
> 	movq	136(%rsp), %rdx                 # 8-byte Reload
> 	movq	%r15, %r13
> 	movl	%r15d, %ecx
7829c7835
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
7832,7836c7838,7840
< 	pushq	$2
< 	.cfi_adjust_cfa_offset 8
< 	popq	%rcx
< 	.cfi_adjust_cfa_offset -8
< 	movl	%ecx, %r8d
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	%ebx, %ecx
> 	movl	%ebx, %r8d
7839,7842c7843,7846
< 	movq	104(%rsp), %r11                 # 8-byte Reload
< 	movq	56(%rsp), %r10                  # 8-byte Reload
< 	movq	48(%rsp), %rdi                  # 8-byte Reload
< 	movl	96(%rsp), %esi                  # 4-byte Reload
---
> 	movq	80(%rsp), %rdx                  # 8-byte Reload
> 	movq	64(%rsp), %r10                  # 8-byte Reload
> 	movq	40(%rsp), %rdi                  # 8-byte Reload
> 	movl	104(%rsp), %esi                 # 4-byte Reload
7847c7851
< 	movl	%eax, 15132(%rsp,%r11)
---
> 	movl	%eax, 15132(%rsp,%rdx)
7851c7855
< 	movl	128(%r15), %eax
---
> 	movl	128(%rbp), %eax
7853,7857d7856
< 	je	.LBB11_271
< # %bb.270:                              # %lor.lhs.false227.i
<                                         #   in Loop: Header=BB11_268 Depth=1
< 	movq	24(%rsp), %rdx                  # 8-byte Reload
< 	testb	$32, 388(%rdx)
7859,7860c7858,7863
< .LBB11_271:                             # %if.then.i3127
<                                         #   in Loop: Header=BB11_268 Depth=1
---
> # %bb.271:                              # %lor.lhs.false227.i
>                                         #   in Loop: Header=BB11_269 Depth=1
> 	testb	$32, 388(%rbp)
> 	je	.LBB11_273
> .LBB11_272:                             # %if.then.i3127
>                                         #   in Loop: Header=BB11_269 Depth=1
7863,7864c7866,7867
< .LBB11_272:                             # %if.end.i3128
<                                         #   in Loop: Header=BB11_268 Depth=1
---
> .LBB11_273:                             # %if.end.i3128
>                                         #   in Loop: Header=BB11_269 Depth=1
7866,7868c7869,7871
< 	movq	%r13, %r14
< 	incl	%r14d
< 	addq	$4, %r11
---
> 	movq	%r13, %r15
> 	incl	%r15d
> 	addq	$4, %rdx
7870,7873c7873,7876
< 	movl	112(%rsp), %r8d                 # 4-byte Reload
< 	movq	128(%rsp), %r9                  # 8-byte Reload
< 	jmp	.LBB11_268
< .LBB11_273:                             # %for.cond.cleanup.i3130
---
> 	movl	96(%rsp), %r8d                  # 4-byte Reload
> 	movq	112(%rsp), %r9                  # 8-byte Reload
> 	jmp	.LBB11_269
> .LBB11_274:                             # %for.cond.cleanup.i3130
7882,7884c7885,7887
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< .LBB11_274:                             # %x264_mb_analyse_inter_p8x8_mixed_ref.exit
< 	movl	$50529027, 17392(%r15)          # imm = 0x3030303
---
> 	movl	$50529027, 17392(%rbp)          # imm = 0x3030303
> 	leaq	1812(%rsp), %rbx
> .LBB11_275:                             # %if.end209
7892,7894c7895,7897
< 	movl	%edx, 144(%rsp)                 # 4-byte Spill
< 	jge	.LBB11_300
< # %bb.275:                              # %if.then219
---
> 	movl	%edx, 184(%rsp)                 # 4-byte Spill
> 	jge	.LBB11_302
> # %bb.276:                              # %if.then219
7896,7900c7899,7903
< 	movl	%edx, 88(%rsp)                  # 4-byte Spill
< 	movl	%ecx, 160(%rsp)                 # 4-byte Spill
< 	testb	$32, 152(%rsp)                  # 1-byte Folded Reload
< 	je	.LBB11_301
< # %bb.276:                              # %for.cond226.preheader
---
> 	movl	%edx, 120(%rsp)                 # 4-byte Spill
> 	movl	%ecx, 176(%rsp)                 # 4-byte Spill
> 	testb	$32, 144(%rsp)                  # 1-byte Folded Reload
> 	je	.LBB11_303
> # %bb.277:                              # %for.cond226.preheader
7903c7906
< 	movq	%rax, 200(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 208(%rsp)                 # 8-byte Spill
7905c7908
< 	movq	%rax, 192(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 200(%rsp)                 # 8-byte Spill
7912,7913c7915,7916
< 	movl	%eax, 160(%rsp)                 # 4-byte Spill
< 	movq	%rcx, 184(%rsp)                 # 8-byte Spill
---
> 	movl	%eax, 176(%rsp)                 # 4-byte Spill
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
7915,7927d7917
< 	movq	%rax, 128(%rsp)                 # 8-byte Spill
< 	xorl	%ebx, %ebx
< .LBB11_277:                             # %for.cond226
<                                         # =>This Loop Header: Depth=1
<                                         #     Child Loop BB11_279 Depth 2
<                                         #     Child Loop BB11_285 Depth 2
<                                         #     Child Loop BB11_292 Depth 2
< 	cmpq	$4, %rbx
< 	je	.LBB11_302
< # %bb.278:                              # %for.body230
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	%rbx, 88(%rsp)                  # 8-byte Spill
< 	imulq	$144, %rbx, %rax
7928a7919,7931
> 	xorl	%r14d, %r14d
> .LBB11_278:                             # %for.cond226
>                                         # =>This Loop Header: Depth=1
>                                         #     Child Loop BB11_280 Depth 2
>                                         #     Child Loop BB11_286 Depth 2
>                                         #     Child Loop BB11_294 Depth 2
> 	cmpq	$4, %r14
> 	je	.LBB11_304
> # %bb.279:                              # %for.body230
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	%r14, 120(%rsp)                 # 8-byte Spill
> 	imulq	$144, %r14, %rax
> 	movq	%rax, 168(%rsp)                 # 8-byte Spill
7935c7938
< 	addq	64(%rsp), %rax                  # 8-byte Folded Reload
---
> 	addq	48(%rsp), %rax                  # 8-byte Folded Reload
7937c7940
< 	movl	$13, 17388(%r15)
---
> 	movl	$13, 17388(%rbp)
7940,7952c7943,7945
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
< 	movq	%rax, 120(%rsp)                 # 8-byte Spill
< 	movq	104(%rsp), %rcx                 # 8-byte Reload
< 	xorl	%r14d, %r14d
< .LBB11_279:                             # %for.cond.i3148
<                                         #   Parent Loop BB11_277 Depth=1
<                                         # =>  This Inner Loop Header: Depth=2
< 	cmpq	$576, %r14                      # imm = 0x240
< 	je	.LBB11_281
< # %bb.280:                              # %for.body.i3151
<                                         #   in Loop: Header=BB11_279 Depth=2
< 	movzbl	block_idx_x(%rcx), %ebp
< 	movzbl	block_idx_y(%rcx), %r13d
---
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
> 	movq	%rax, 128(%rsp)                 # 8-byte Spill
> 	movq	104(%rsp), %rdx                 # 8-byte Reload
7954,7959c7947,7963
< 	testq	%r14, %r14
< 	sete	%al
< 	movl	%eax, 56(%rsp)                  # 4-byte Spill
< 	movq	128(%rsp), %rdi                 # 8-byte Reload
< 	leaq	1968(%rdi,%r14), %rbx
< 	movl	$6, (%rbx)
---
> .LBB11_280:                             # %for.cond.i3148
>                                         #   Parent Loop BB11_278 Depth=1
>                                         # =>  This Inner Loop Header: Depth=2
> 	cmpq	$576, %rax                      # imm = 0x240
> 	je	.LBB11_282
> # %bb.281:                              # %for.body.i3151
>                                         #   in Loop: Header=BB11_280 Depth=2
> 	movzbl	block_idx_x(%rdx), %ebp
> 	movzbl	block_idx_y(%rdx), %r13d
> 	xorl	%ecx, %ecx
> 	testq	%rax, %rax
> 	sete	%cl
> 	movl	%ecx, 80(%rsp)                  # 4-byte Spill
> 	movq	136(%rsp), %rdi                 # 8-byte Reload
> 	leaq	1968(%rdi,%rax), %r14
> 	movl	$6, (%r14)
> 	movq	%rax, 64(%rsp)                  # 8-byte Spill
7961,7964c7965,7968
< 	movq	%rax, 8(%rbx)
< 	movq	%rcx, 48(%rsp)                  # 8-byte Spill
< 	movslq	25008(%r15), %rdx
< 	movl	%edx, 120(%rbx)
---
> 	movq	%rax, 8(%r14)
> 	movq	24(%rsp), %r15                  # 8-byte Reload
> 	movslq	25008(%r15), %rcx
> 	movl	%ecx, 120(%r14)
7966,7974c7970,7979
< 	movl	%eax, 124(%rbx)
< 	movl	%r13d, %ecx
< 	shll	$6, %ecx
< 	leal	(%rcx,%rbp,4), %ecx
< 	addq	21344(%r15), %rcx
< 	movq	%rcx, 88(%rbx)
< 	movl	%r13d, %ecx
< 	shll	$5, %ecx
< 	leal	(%rcx,%rbp,2), %ecx
---
> 	movl	%eax, 124(%r14)
> 	movq	%rdx, 40(%rsp)                  # 8-byte Spill
> 	movl	%r13d, %edx
> 	shll	$6, %edx
> 	leal	(%rdx,%rbp,4), %edx
> 	addq	21344(%r15), %rdx
> 	movq	%rdx, 88(%r14)
> 	movl	%r13d, %edx
> 	shll	$5, %edx
> 	leal	(%rdx,%rbp,2), %edx
7976,7983c7981,7987
< 	addq	%rcx, %rsi
< 	movq	%rsi, 96(%rbx)
< 	addq	21360(%r15), %rcx
< 	movq	%rcx, 104(%rbx)
< 	leal	(,%r13,4), %ecx
< 	imulq	%rdx, %rcx
< 	leal	(,%rbp,4), %edx
< 	addq	%rdx, %rcx
---
> 	addq	%rdx, %rsi
> 	movq	%rsi, 96(%r14)
> 	addq	21360(%r15), %rdx
> 	movq	%rdx, 104(%r14)
> 	leal	(,%r13,4), %edx
> 	imulq	%rcx, %rdx
> 	leaq	(%rdx,%rbp,4), %rcx
7987c7991
< 	movq	%rdx, 32(%rbx)
---
> 	movq	%rdx, 32(%r14)
7990c7994
< 	movq	%rdx, 40(%rbx)
---
> 	movq	%rdx, 40(%r14)
7993c7997
< 	movq	%rdx, 48(%rbx)
---
> 	movq	%rdx, 48(%r14)
7996c8000
< 	movq	%rdx, 56(%rbx)
---
> 	movq	%rdx, 56(%r14)
7999c8003,8004
< 	leal	(,%rbp,2), %eax
---
> 	leaq	(%rdx,%rbp,2), %rax
> 	movq	32(%rsi), %rdx
8001,8005c8006,8008
< 	movq	32(%rsi), %rax
< 	addq	%rdx, %rax
< 	movq	%rax, 64(%rbx)
< 	addq	40(%rsi), %rdx
< 	movq	%rdx, 72(%rbx)
---
> 	movq	%rdx, 64(%r14)
> 	addq	40(%rsi), %rax
> 	movq	%rax, 72(%r14)
8009,8010c8012,8013
< 	movq	%rax, 112(%rbx)
< 	movl	%edx, 20(%rbx)
---
> 	movq	%rax, 112(%r14)
> 	movl	%edx, 20(%r14)
8012,8017c8015,8021
< 	movq	%rcx, 80(%rbx)
< 	movq	120(%rsp), %rax                 # 8-byte Reload
< 	movq	%rax, 24(%rbx)
< 	leaq	(%rdi,%r14), %r15
< 	addq	$2096, %r15                     # imm = 0x830
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%rcx, 80(%r14)
> 	movq	128(%rsp), %rax                 # 8-byte Reload
> 	movq	%rax, 24(%r14)
> 	movq	64(%rsp), %rax                  # 8-byte Reload
> 	leaq	(%rdi,%rax), %rbx
> 	addq	$2096, %rbx                     # imm = 0x830
> 	movq	%r15, %rdi
8019c8023
< 	movq	48(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
8026c8030
< 	movq	%r15, %r8
---
> 	movq	%rbx, %r8
8028,8029c8032,8033
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
< 	movq	%rbx, %rsi
---
> 	movq	%r15, %rdi
> 	movq	%r14, %rsi
8031c8035
< 	movl	56(%rsp), %ecx                  # 4-byte Reload
---
> 	movl	80(%rsp), %ecx                  # 4-byte Reload
8034,8035c8038
< 	movl	12(%r15), %eax
< 	movq	24(%rsp), %r15                  # 8-byte Reload
---
> 	movl	12(%rbx), %eax
8044,8050c8047,8054
< 	movq	48(%rsp), %rcx                  # 8-byte Reload
< 	addq	$144, %r14
< 	incq	%rcx
< 	jmp	.LBB11_279
< .LBB11_281:                             # %for.cond.cleanup.i3178
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	88(%rsp), %r14                  # 8-byte Reload
---
> 	movq	64(%rsp), %rax                  # 8-byte Reload
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
> 	addq	$144, %rax
> 	incq	%rdx
> 	jmp	.LBB11_280
> .LBB11_282:                             # %for.cond.cleanup.i3178
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	120(%rsp), %r14                 # 8-byte Reload
8052,8056c8056,8060
< 	leaq	2464(%rsp), %rcx
< 	movl	872(%rcx,%rbx), %edx
< 	addl	728(%rcx,%rbx), %edx
< 	addl	1016(%rcx,%rbx), %edx
< 	addl	1160(%rcx,%rbx), %edx
---
> 	leaq	2464(%rsp), %r12
> 	movl	872(%r12,%rbx), %edx
> 	addl	728(%r12,%rbx), %edx
> 	addl	1016(%r12,%rbx), %edx
> 	addl	1160(%r12,%rbx), %edx
8064,8068c8068,8073
< 	cmpl	$0, 16412(%r15)
< 	je	.LBB11_283
< # %bb.282:                              # %if.then.i3187
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	cmpl	$0, 16412(%rbp)
> 	je	.LBB11_284
> # %bb.283:                              # %if.then.i3187
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	%rbp, %rdi
8079,8082c8084,8086
< .LBB11_283:                             # %x264_mb_analyse_inter_p4x4.exit
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	leaq	2464(%rsp), %r12
< 	movq	136(%rsp), %rcx                 # 8-byte Reload
---
> .LBB11_284:                             # %x264_mb_analyse_inter_p4x4.exit
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	168(%rsp), %rcx                 # 8-byte Reload
8084,8087c8088,8091
< 	jge	.LBB11_299
< # %bb.284:                              # %if.then240
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movl	%eax, 152(%rsp)                 # 4-byte Spill
---
> 	jge	.LBB11_288
> # %bb.285:                              # %if.then240
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movl	%eax, 144(%rsp)                 # 4-byte Spill
8090,8092c8094,8096
< 	movq	88(%rsp), %rax                  # 8-byte Reload
< 	movb	$0, 17392(%r15,%rax)
< 	movq	%rcx, 136(%rsp)                 # 8-byte Spill
---
> 	movq	120(%rsp), %rax                 # 8-byte Reload
> 	movb	$0, 17392(%rbp,%rax)
> 	movq	%rcx, 168(%rsp)                 # 8-byte Spill
8096c8100
< 	addq	64(%rsp), %rax                  # 8-byte Folded Reload
---
> 	addq	48(%rsp), %rax                  # 8-byte Folded Reload
8098c8102
< 	movl	$13, 17388(%r15)
---
> 	movl	$13, 17388(%rbp)
8101,8102c8105,8106
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
< 	movq	%rax, 120(%rsp)                 # 8-byte Spill
---
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
> 	movq	%rax, 128(%rsp)                 # 8-byte Spill
8105c8109
< 	movq	%rax, 56(%rsp)                  # 8-byte Spill
---
> 	movq	%rax, 64(%rsp)                  # 8-byte Spill
8107,8111c8111,8115
< 	xorl	%r9d, %r9d
< 	movq	192(%rsp), %r12                 # 8-byte Reload
< 	movq	200(%rsp), %rcx                 # 8-byte Reload
< .LBB11_285:                             # %for.cond.i3209
<                                         #   Parent Loop BB11_277 Depth=1
---
> 	xorl	%r12d, %r12d
> 	movq	200(%rsp), %rbx                 # 8-byte Reload
> 	movq	208(%rsp), %rcx                 # 8-byte Reload
> .LBB11_286:                             # %for.cond.i3209
>                                         #   Parent Loop BB11_278 Depth=1
8114,8116c8118,8120
< 	je	.LBB11_287
< # %bb.286:                              # %for.body.i3212
<                                         #   in Loop: Header=BB11_285 Depth=2
---
> 	je	.LBB11_289
> # %bb.287:                              # %for.body.i3212
>                                         #   in Loop: Header=BB11_286 Depth=2
8118,8123c8122,8127
< 	movzbl	block_idx_x(%rdi,%rax), %ebx
< 	movzbl	block_idx_y(%rdi,%rax), %r13d
< 	leaq	(%rsp,%rcx), %r14
< 	addq	$1088, %r14                     # imm = 0x440
< 	movl	$4, (%r14)
< 	movq	%rax, 48(%rsp)                  # 8-byte Spill
---
> 	movzbl	block_idx_x(%rdi,%rax), %r9d
> 	movzbl	block_idx_y(%rdi,%rax), %r14d
> 	leaq	(%rsp,%rcx), %r13
> 	addq	$1088, %r13                     # imm = 0x440
> 	movl	$4, (%r13)
> 	movq	%rax, 40(%rsp)                  # 8-byte Spill
8125,8149c8129,8154
< 	movq	%rax, 8(%r14)
< 	movslq	25008(%r15), %rdx
< 	movl	%edx, 120(%r14)
< 	movslq	25012(%r15), %rax
< 	movl	%eax, 124(%r14)
< 	movq	%rcx, 96(%rsp)                  # 8-byte Spill
< 	movl	%r13d, %ecx
< 	shll	$6, %ecx
< 	leal	(%rcx,%rbx,4), %ecx
< 	addq	21344(%r15), %rcx
< 	movq	%rcx, 88(%r14)
< 	movl	%r13d, %ecx
< 	shll	$5, %ecx
< 	leal	(%rcx,%rbx,2), %ecx
< 	movq	21352(%r15), %rsi
< 	addq	%rcx, %rsi
< 	movq	%rsi, 96(%r14)
< 	addq	21360(%r15), %rcx
< 	movq	%rcx, 104(%r14)
< 	leal	(,%r13,4), %ecx
< 	imulq	%rdx, %rcx
< 	leal	(,%rbx,4), %edx
< 	addq	%rdx, %rcx
< 	movq	72(%rsp), %r8                   # 8-byte Reload
< 	movq	(%r8), %rdx
---
> 	movq	%rax, 8(%r13)
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movq	%rcx, 80(%rsp)                  # 8-byte Spill
> 	movslq	25008(%rbp), %rcx
> 	movl	%ecx, 120(%r13)
> 	movslq	25012(%rbp), %rax
> 	movl	%eax, 124(%r13)
> 	movl	%r14d, %edx
> 	shll	$6, %edx
> 	leal	(%rdx,%r9,4), %edx
> 	addq	21344(%rbp), %rdx
> 	movq	%rdx, 88(%r13)
> 	movl	%r14d, %edx
> 	shll	$5, %edx
> 	leal	(%rdx,%r9,2), %edx
> 	movq	21352(%rbp), %rsi
> 	addq	%rdx, %rsi
> 	movq	%rsi, 96(%r13)
> 	addq	21360(%rbp), %rdx
> 	movq	%rdx, 104(%r13)
> 	leal	(,%r14,4), %edx
> 	imulq	%rcx, %rdx
> 	leaq	(%rdx,%r9,4), %rcx
> 	movq	%r9, 96(%rsp)                   # 8-byte Spill
> 	movq	72(%rsp), %rsi                  # 8-byte Reload
> 	movq	(%rsi), %rdx
8151,8152c8156,8157
< 	movq	%rdx, 32(%r14)
< 	movq	8(%r8), %rdx
---
> 	movq	%rdx, 32(%r13)
> 	movq	8(%rsi), %rdx
8154,8155c8159,8160
< 	movq	%rdx, 40(%r14)
< 	movq	16(%r8), %rdx
---
> 	movq	%rdx, 40(%r13)
> 	movq	16(%rsi), %rdx
8157,8158c8162,8163
< 	movq	%rdx, 48(%r14)
< 	movq	24(%r8), %rdx
---
> 	movq	%rdx, 48(%r13)
> 	movq	24(%rsi), %rdx
8160,8171c8165,8175
< 	movq	%rdx, 56(%r14)
< 	leal	(,%r13,2), %esi
< 	imulq	%rax, %rsi
< 	leal	(%rbx,%rbx), %eax
< 	addq	%rax, %rsi
< 	movq	32(%r8), %rax
< 	addq	%rsi, %rax
< 	movq	%rax, 64(%r14)
< 	movq	48(%rsp), %rax                  # 8-byte Reload
< 	leaq	(%rdi,%rax), %rdx
< 	addq	40(%r8), %rsi
< 	movq	%rsi, 72(%r14)
---
> 	movq	%rdx, 56(%r13)
> 	leal	(%r14,%r14), %edx
> 	imulq	%rax, %rdx
> 	leaq	(%rdx,%r9,2), %rax
> 	movq	32(%rsi), %rdx
> 	addq	%rax, %rdx
> 	movq	%rdx, 64(%r13)
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
> 	addq	%rdi, %rdx
> 	addq	40(%rsi), %rax
> 	movq	%rax, 72(%r13)
8174,8179c8178,8182
< 	addq	24752(%r15,%rsi,8), %rax
< 	movq	%rax, 112(%r14)
< 	movl	%r9d, %r15d
< 	movl	%esi, 20(%r14)
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	addq	24496(%rax,%rsi,8), %rcx
---
> 	addq	24752(%rbp,%rsi,8), %rax
> 	movq	%rax, 112(%r13)
> 	movl	%r12d, %r15d
> 	movl	%esi, 20(%r13)
> 	addq	24496(%rbp,%rsi,8), %rcx
8181,8184c8184,8187
< 	movq	%rcx, 80(%r14)
< 	movq	120(%rsp), %rax                 # 8-byte Reload
< 	movq	%rax, 24(%r14)
< 	leaq	(%rsp,%r12), %r8
---
> 	movq	%rcx, 80(%r13)
> 	movq	128(%rsp), %rax                 # 8-byte Reload
> 	movq	%rax, 24(%r13)
> 	leaq	(%rsp,%rbx), %r8
8186c8189
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%rbp, %rdi
8193d8195
< 	movl	%r9d, %ebp
8195,8197c8197,8199
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
< 	movq	%r14, %rsi
< 	movq	56(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	%rbp, %rdi
> 	movq	%r13, %rsi
> 	movq	64(%rsp), %rdx                  # 8-byte Reload
8199d8200
< 	movq	24(%rsp), %r15                  # 8-byte Reload
8202c8203
< 	movl	140(%r14), %eax
---
> 	movl	140(%r13), %eax
8204,8206c8205,8208
< 	movq	%r15, %rdi
< 	movl	%ebx, %esi
< 	movl	%r13d, %edx
---
> 	movq	%rbp, %rdi
> 	movq	96(%rsp), %rsi                  # 8-byte Reload
>                                         # kill: def $esi killed $esi killed $rsi
> 	movl	%r14d, %edx
8217,8218c8219
< 	movq	96(%rsp), %rcx                  # 8-byte Reload
< 	movl	%ebp, %r9d
---
> 	movq	80(%rsp), %rcx                  # 8-byte Reload
8221,8223c8222,8224
< 	addq	%rax, %r12
< 	movq	48(%rsp), %rax                  # 8-byte Reload
< 	incl	%r9d
---
> 	addq	%rax, %rbx
> 	movq	40(%rsp), %rax                  # 8-byte Reload
> 	incl	%r12d
8225,8229c8226,8233
< 	jmp	.LBB11_285
< .LBB11_287:                             # %for.cond.cleanup.i3232
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	88(%rsp), %rbx                  # 8-byte Reload
< 	imulq	$288, %rbx, %rdx                # imm = 0x120
---
> 	jmp	.LBB11_286
> .LBB11_288:                             #   in Loop: Header=BB11_278 Depth=1
> 	leaq	1812(%rsp), %rbx
> 	jmp	.LBB11_301
> .LBB11_289:                             # %for.cond.cleanup.i3232
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	120(%rsp), %r14                 # 8-byte Reload
> 	imulq	$288, %r14, %rdx                # imm = 0x120
8232c8236
< 	movq	%rdx, 120(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 128(%rsp)                 # 8-byte Spill
8240,8245c8244,8250
< 	movl	%eax, 5360(%rsp,%rbx,4)
< 	cmpl	$0, 16412(%r15)
< 	je	.LBB11_289
< # %bb.288:                              # %if.then.i3239
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	%r15, %rdi
---
> 	movl	%eax, 5360(%rsp,%r14,4)
> 	movq	24(%rsp), %rbx                  # 8-byte Reload
> 	cmpl	$0, 16412(%rbx)
> 	je	.LBB11_291
> # %bb.290:                              # %if.then.i3239
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	%rbx, %rdi
8248c8253
< 	movl	%ebx, %ecx
---
> 	movl	%r14d, %ecx
8254,8258c8259,8263
< 	addl	5360(%rsp,%rbx,4), %eax
< 	movl	%eax, 5360(%rsp,%rbx,4)
< .LBB11_289:                             # %x264_mb_analyse_inter_p8x4.exit
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movl	152(%rsp), %ecx                 # 4-byte Reload
---
> 	addl	5360(%rsp,%r14,4), %eax
> 	movl	%eax, 5360(%rsp,%r14,4)
> .LBB11_291:                             # %x264_mb_analyse_inter_p8x4.exit
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movl	144(%rsp), %ecx                 # 4-byte Reload
8260,8263c8265,8268
< 	jge	.LBB11_291
< # %bb.290:                              # %if.then254
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movb	$1, 17392(%r15,%rbx)
---
> 	jge	.LBB11_293
> # %bb.292:                              # %if.then254
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movb	$1, 17392(%rbx,%r14)
8265,8268c8270,8273
< .LBB11_291:                             # %if.end263
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movl	%ecx, 152(%rsp)                 # 4-byte Spill
< 	movq	136(%rsp), %rax                 # 8-byte Reload
---
> .LBB11_293:                             # %if.end263
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movl	%ecx, 144(%rsp)                 # 4-byte Spill
> 	movq	168(%rsp), %rax                 # 8-byte Reload
8272,8275c8277,8280
< 	addq	64(%rsp), %rax                  # 8-byte Folded Reload
< 	movq	%rax, 96(%rsp)                  # 8-byte Spill
< 	movl	$13, 17388(%r15)
< 	movq	%rcx, 48(%rsp)                  # 8-byte Spill
---
> 	addq	48(%rsp), %rax                  # 8-byte Folded Reload
> 	movq	%rax, 80(%rsp)                  # 8-byte Spill
> 	movl	$13, 17388(%rbx)
> 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
8277,8279c8282,8284
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
< 	movq	%rax, 112(%rsp)                 # 8-byte Spill
< 	movq	184(%rsp), %rbp                 # 8-byte Reload
---
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
> 	movq	%rax, 96(%rsp)                  # 8-byte Spill
> 	movq	160(%rsp), %rbp                 # 8-byte Reload
8281,8282c8286,8287
< .LBB11_292:                             # %for.cond.i3269
<                                         #   Parent Loop BB11_277 Depth=1
---
> .LBB11_294:                             # %for.cond.i3269
>                                         #   Parent Loop BB11_278 Depth=1
8285,8287c8290,8292
< 	je	.LBB11_294
< # %bb.293:                              # %for.body.i3272
<                                         #   in Loop: Header=BB11_292 Depth=2
---
> 	je	.LBB11_296
> # %bb.295:                              # %for.body.i3272
>                                         #   in Loop: Header=BB11_294 Depth=2
8289,8290c8294,8295
< 	movzbl	block_idx_x(%rdi,%r12), %r13d
< 	movzbl	block_idx_y(%rdi,%r12), %r14d
---
> 	movzbl	block_idx_x(%rdi,%r12), %r14d
> 	movzbl	block_idx_y(%rdi,%r12), %r13d
8294,8296c8299,8302
< 	movslq	25008(%r15), %rdx
< 	movl	%edx, 120(%rbp)
< 	movslq	25012(%r15), %rax
---
> 	movq	24(%rsp), %rbx                  # 8-byte Reload
> 	movslq	25008(%rbx), %rcx
> 	movl	%ecx, 120(%rbp)
> 	movslq	25012(%rbx), %rax
8298,8307c8304,8313
< 	movl	%r14d, %ecx
< 	shll	$6, %ecx
< 	leal	(%rcx,%r13,4), %ecx
< 	addq	21344(%r15), %rcx
< 	movq	%rcx, 88(%rbp)
< 	movl	%r14d, %ecx
< 	shll	$5, %ecx
< 	leal	(%rcx,%r13,2), %ecx
< 	movq	21352(%r15), %rsi
< 	addq	%rcx, %rsi
---
> 	movl	%r13d, %edx
> 	shll	$6, %edx
> 	leal	(%rdx,%r14,4), %edx
> 	addq	21344(%rbx), %rdx
> 	movq	%rdx, 88(%rbp)
> 	movl	%r13d, %edx
> 	shll	$5, %edx
> 	leal	(%rdx,%r14,2), %edx
> 	movq	21352(%rbx), %rsi
> 	addq	%rdx, %rsi
8309,8312c8315,8316
< 	addq	21360(%r15), %rcx
< 	movq	%rcx, 104(%rbp)
< 	leal	(,%r14,4), %ecx
< 	imulq	%rdx, %rcx
---
> 	addq	21360(%rbx), %rdx
> 	movq	%rdx, 104(%rbp)
8314,8316c8318,8321
< 	addq	%rdx, %rcx
< 	movq	96(%rsp), %r8                   # 8-byte Reload
< 	movq	(%r8), %rdx
---
> 	imulq	%rcx, %rdx
> 	leaq	(%rdx,%r14,4), %rcx
> 	movq	80(%rsp), %rsi                  # 8-byte Reload
> 	movq	(%rsi), %rdx
8319c8324
< 	movq	8(%r8), %rdx
---
> 	movq	8(%rsi), %rdx
8322c8327
< 	movq	16(%r8), %rdx
---
> 	movq	16(%rsi), %rdx
8325c8330
< 	movq	24(%r8), %rdx
---
> 	movq	24(%rsi), %rdx
8328,8334c8333,8338
< 	leal	(%r14,%r14), %esi
< 	imulq	%rax, %rsi
< 	leal	(,%r13,2), %eax
< 	addq	%rax, %rsi
< 	movq	32(%r8), %rax
< 	addq	%rsi, %rax
< 	movq	%rax, 64(%rbp)
---
> 	leal	(,%r13,2), %edx
> 	imulq	%rax, %rdx
> 	leaq	(%rdx,%r14,2), %rax
> 	movq	32(%rsi), %rdx
> 	addq	%rax, %rdx
> 	movq	%rdx, 64(%rbp)
8336,8337c8340,8341
< 	addq	40(%r8), %rsi
< 	movq	%rsi, 72(%rbp)
---
> 	addq	40(%rsi), %rax
> 	movq	%rax, 72(%rbp)
8339,8340c8343,8344
< 	movq	48(%rsp), %rsi                  # 8-byte Reload
< 	addq	24752(%r15,%rsi,8), %rax
---
> 	movq	40(%rsp), %rsi                  # 8-byte Reload
> 	addq	24752(%rbx,%rsi,8), %rax
8344,8345c8348
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	addq	24496(%rax,%rsi,8), %rcx
---
> 	addq	24496(%rbx,%rsi,8), %rcx
8348c8351
< 	movq	112(%rsp), %rax                 # 8-byte Reload
---
> 	movq	96(%rsp), %rax                  # 8-byte Reload
8351c8354
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%rbx, %rdi
8356c8359
< 	popq	%rbx
---
> 	popq	%rcx
8358d8360
< 	movl	%ebx, %ecx
8360c8362
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%rbx, %rdi
8362c8364
< 	movq	56(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	64(%rsp), %rdx                  # 8-byte Reload
8364d8365
< 	movq	24(%rsp), %r15                  # 8-byte Reload
8369,8372c8370,8376
< 	movq	%r15, %rdi
< 	movl	%r13d, %esi
< 	movl	%r14d, %edx
< 	movl	%ebx, %ecx
---
> 	movq	%rbx, %rdi
> 	movl	%r14d, %esi
> 	movl	%r13d, %edx
> 	pushq	$1
> 	.cfi_adjust_cfa_offset 8
> 	popq	%rcx
> 	.cfi_adjust_cfa_offset -8
8381,8383c8385,8387
< 	jmp	.LBB11_292
< .LBB11_294:                             # %for.cond.cleanup.i3325
<                                         #   in Loop: Header=BB11_277 Depth=1
---
> 	jmp	.LBB11_294
> .LBB11_296:                             # %for.cond.cleanup.i3325
>                                         #   in Loop: Header=BB11_278 Depth=1
8385c8389
< 	movq	120(%rsp), %rdx                 # 8-byte Reload
---
> 	movq	128(%rsp), %rdx                 # 8-byte Reload
8389c8393
< 	movq	48(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
8394c8398
< 	movq	88(%rsp), %rbx                  # 8-byte Reload
---
> 	movq	120(%rsp), %rbx                 # 8-byte Reload
8396,8400c8400,8405
< 	cmpl	$0, 16412(%r15)
< 	je	.LBB11_296
< # %bb.295:                              # %if.then.i3334
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	cmpl	$0, 16412(%rbp)
> 	je	.LBB11_298
> # %bb.297:                              # %if.then.i3334
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	%rbp, %rdi
8402c8407
< 	movq	96(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	80(%rsp), %rdx                  # 8-byte Reload
8411,8413c8416,8418
< .LBB11_296:                             # %x264_mb_analyse_inter_p4x8.exit
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movl	152(%rsp), %ecx                 # 4-byte Reload
---
> .LBB11_298:                             # %x264_mb_analyse_inter_p4x8.exit
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movl	144(%rsp), %ecx                 # 4-byte Reload
8414a8420
> 	leaq	1812(%rsp), %rbx
8416,8420c8422,8426
< 	jge	.LBB11_298
< # %bb.297:                              # %if.then269
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	88(%rsp), %rcx                  # 8-byte Reload
< 	movb	$2, 17392(%r15,%rcx)
---
> 	jge	.LBB11_300
> # %bb.299:                              # %if.then269
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	120(%rsp), %rcx                 # 8-byte Reload
> 	movb	$2, 17392(%rbp,%rcx)
8422,8424c8428,8430
< .LBB11_298:                             # %if.end278
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	136(%rsp), %rax                 # 8-byte Reload
---
> .LBB11_300:                             # %if.end278
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	168(%rsp), %rax                 # 8-byte Reload
8426,8429c8432,8435
< 	addl	%ecx, 144(%rsp)                 # 4-byte Folded Spill
< .LBB11_299:                             # %if.end285
<                                         #   in Loop: Header=BB11_277 Depth=1
< 	movq	%r15, %rdi
---
> 	addl	%ecx, 184(%rsp)                 # 4-byte Folded Spill
> .LBB11_301:                             # %if.end285
>                                         #   in Loop: Header=BB11_278 Depth=1
> 	movq	%rbp, %rdi
8431,8432c8437,8438
< 	movq	88(%rsp), %rbx                  # 8-byte Reload
< 	movl	%ebx, %edx
---
> 	movq	120(%rsp), %r14                 # 8-byte Reload
> 	movl	%r14d, %edx
8434,8435c8440,8441
< 	incq	%rbx
< 	addq	$576, 128(%rsp)                 # 8-byte Folded Spill
---
> 	incq	%r14
> 	addq	$576, 136(%rsp)                 # 8-byte Folded Spill
8438a8445
> 	addq	%rax, 208(%rsp)                 # 8-byte Folded Spill
8440,8443c8447,8449
< 	addq	%rax, 192(%rsp)                 # 8-byte Folded Spill
< 	addq	%rax, 184(%rsp)                 # 8-byte Folded Spill
< 	jmp	.LBB11_277
< .LBB11_300:
---
> 	addq	%rax, 160(%rsp)                 # 8-byte Folded Spill
> 	jmp	.LBB11_278
> .LBB11_302:
8448,8450c8454,8456
< 	movq	%rcx, 176(%rsp)                 # 8-byte Spill
< 	movl	%eax, 88(%rsp)                  # 4-byte Spill
< .LBB11_301:                             # %if.end292.thread3990
---
> 	movq	%rcx, 192(%rsp)                 # 8-byte Spill
> 	movl	%eax, 120(%rsp)                 # 4-byte Spill
> .LBB11_303:                             # %if.end292.thread3990
8453,8455c8459,8461
< 	jmp	.LBB11_303
< .LBB11_302:                             # %if.end292
< 	movl	144(%rsp), %edx                 # 4-byte Reload
---
> 	jmp	.LBB11_305
> .LBB11_304:                             # %if.end292
> 	movl	184(%rsp), %edx                 # 4-byte Reload
8463c8469
< 	movq	%rax, 176(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 192(%rsp)                 # 8-byte Spill
8465,8466c8471,8472
< 	movl	%edx, 88(%rsp)                  # 4-byte Spill
< .LBB11_303:                             # %land.lhs.true303
---
> 	movl	%edx, 120(%rsp)                 # 4-byte Spill
> .LBB11_305:                             # %land.lhs.true303
8470,8472c8476,8478
< 	cmpl	%edx, 144(%rsp)                 # 4-byte Folded Reload
< 	jge	.LBB11_318
< # %bb.304:                              # %if.then312
---
> 	cmpl	%edx, 184(%rsp)                 # 4-byte Folded Reload
> 	jge	.LBB11_320
> # %bb.306:                              # %if.then312
8484,8485c8490
< 	movl	$14, 17388(%r15)
< 	xorl	%r14d, %r14d
---
> 	movl	$14, 17388(%rbp)
8490c8495,8496
< 	movl	%eax, 136(%rsp)                 # 4-byte Spill
---
> 	movl	%eax, 168(%rsp)                 # 4-byte Spill
> 	xorl	%edi, %edi
8492c8498
< .LBB11_305:                             # %for.cond.i3365
---
> .LBB11_307:                             # %for.cond.i3365
8494,8499c8500,8505
<                                         #     Child Loop BB11_307 Depth 2
< 	cmpq	$2, %r14
< 	je	.LBB11_319
< # %bb.306:                              # %for.body.i3366
<                                         #   in Loop: Header=BB11_305 Depth=1
< 	imulq	$144, %r14, %rax
---
>                                         #     Child Loop BB11_309 Depth 2
> 	cmpq	$2, %rdi
> 	je	.LBB11_321
> # %bb.308:                              # %for.body.i3366
>                                         #   in Loop: Header=BB11_307 Depth=1
> 	imulq	$144, %rdi, %rax
8502c8508
< 	imulq	$288, %r14, %rcx                # imm = 0x120
---
> 	imulq	$288, %rdi, %rcx                # imm = 0x120
8504,8506c8510,8512
< 	leaq	1(,%r14,2), %rdi
< 	movq	%rdi, 104(%rsp)                 # 8-byte Spill
< 	imulq	$144, %rdi, %rdx
---
> 	leaq	1(,%rdi,2), %r8
> 	movq	%r8, 80(%rsp)                   # 8-byte Spill
> 	imulq	$144, %r8, %rdx
8508c8514
< 	xorl	%edi, %edi
---
> 	xorl	%r8d, %r8d
8510,8511c8516,8517
< 	movl	%edx, %r8d
< 	cmovll	%ecx, %r8d
---
> 	movl	%edx, %r9d
> 	cmovll	%ecx, %r9d
8513,8520c8519,8526
< 	leaq	(%r14,%r14), %rcx
< 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
< 	movl	%r8d, 112(%rsp)                 # 4-byte Spill
< 	movl	%r8d, 624(%rsp)
< 	movl	%edx, 628(%rsp)
< 	setne	%dil
< 	incq	%rdi
< 	movq	%rdi, 48(%rsp)                  # 8-byte Spill
---
> 	leaq	(%rdi,%rdi), %rcx
> 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
> 	movl	%r9d, 112(%rsp)                 # 4-byte Spill
> 	movl	%r9d, 608(%rsp)
> 	movl	%edx, 612(%rsp)
> 	setne	%r8b
> 	incq	%r8
> 	movq	%r8, 64(%rsp)                   # 8-byte Spill
8524c8530
< 	movq	25008(%r15), %rcx
---
> 	movq	25008(%rbp), %rcx
8526c8532
< 	movq	%r14, %rcx
---
> 	movq	%rdi, %rcx
8528c8534
< 	addq	21344(%r15), %rcx
---
> 	addq	21344(%rbp), %rcx
8530c8536
< 	movq	%r14, %rcx
---
> 	movq	%rdi, %rcx
8532c8538
< 	movq	21352(%r15), %rdx
---
> 	movq	21352(%rbp), %rdx
8535c8541
< 	addq	21360(%r15), %rcx
---
> 	addq	21360(%rbp), %rcx
8538,8542c8544,8549
< 	leal	(,%r14,8), %eax
< 	movl	%eax, 96(%rsp)                  # 4-byte Spill
< 	movq	%r14, 128(%rsp)                 # 8-byte Spill
< 	leal	(,%r14,4), %eax
< 	movslq	%eax, %r14
---
> 	leal	(,%rdi,8), %eax
> 	movl	%eax, 104(%rsp)                 # 4-byte Spill
> 	movq	%rdi, 136(%rsp)                 # 8-byte Spill
> 	leal	(,%rdi,4), %eax
> 	cltq
> 	movq	%rax, 96(%rsp)                  # 8-byte Spill
8544,8545c8551,8552
< .LBB11_307:                             # %for.cond98.i
<                                         #   Parent Loop BB11_305 Depth=1
---
> .LBB11_309:                             # %for.cond98.i
>                                         #   Parent Loop BB11_307 Depth=1
8547,8551c8554,8558
< 	cmpq	%rbp, 48(%rsp)                  # 8-byte Folded Reload
< 	je	.LBB11_315
< # %bb.308:                              # %for.body101.i
<                                         #   in Loop: Header=BB11_307 Depth=2
< 	movslq	624(%rsp,%rbp,4), %r15
---
> 	cmpq	%rbp, 64(%rsp)                  # 8-byte Folded Reload
> 	je	.LBB11_317
> # %bb.310:                              # %for.body101.i
>                                         #   in Loop: Header=BB11_309 Depth=2
> 	movslq	608(%rsp,%rbp,4), %r15
8556,8558c8563,8564
< 	leaq	1812(%rsp), %rdx
< 	leaq	(%rdx,%rax), %rcx
< 	movl	(%rdx,%rax), %eax
---
> 	leaq	(%rbx,%rax), %rcx
> 	movl	(%rbx,%rax), %eax
8560c8566
< 	movq	104(%rsp), %rax                 # 8-byte Reload
---
> 	movq	80(%rsp), %rax                  # 8-byte Reload
8565c8571
< 	movslq	96(%rsp), %rbx                  # 4-byte Folded Reload
---
> 	movslq	104(%rsp), %rbx                 # 4-byte Folded Reload
8567c8573
< 	movq	64(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	48(%rsp), %rdi                  # 8-byte Reload
8581c8587
< 	imulq	%r14, %rdx
---
> 	imulq	96(%rsp), %rdx                  # 8-byte Folded Reload
8588,8589c8594,8595
< 	movq	24(%rsp), %rdx                  # 8-byte Reload
< 	addq	24752(%rdx,%r15,8), %rcx
---
> 	movq	24(%rsp), %r13                  # 8-byte Reload
> 	addq	24752(%r13,%r15,8), %rcx
8592,8593c8598
< 	movq	24(%rsp), %rcx                  # 8-byte Reload
< 	addq	24496(%rcx,%r15,8), %rax
---
> 	addq	24496(%r13,%r15,8), %rax
8596c8601
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
---
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
8600c8605
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
8602c8607
< 	movq	56(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
8606c8611
< 	popq	%r13
---
> 	popq	%r14
8608c8613
< 	movl	%r13d, %ecx
---
> 	movl	%r14d, %ecx
8615c8620
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
8618c8623
< 	movl	%r13d, %ecx
---
> 	movl	%r14d, %ecx
8621,8626c8626,8629
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	cmpl	%r15d, 26652(%rax)
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	jne	.LBB11_311
< # %bb.309:                              # %for.body101.i
<                                         #   in Loop: Header=BB11_307 Depth=2
---
> 	cmpl	%r15d, 26652(%r13)
> 	jne	.LBB11_313
> # %bb.311:                              # %for.body101.i
>                                         #   in Loop: Header=BB11_309 Depth=2
8628,8631c8631,8634
< 	jne	.LBB11_311
< # %bb.310:                              # %if.then.i3383
<                                         #   in Loop: Header=BB11_307 Depth=2
< 	movq	%r15, %rdi
---
> 	jne	.LBB11_313
> # %bb.312:                              # %if.then.i3383
>                                         #   in Loop: Header=BB11_309 Depth=2
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
8635,8638c8638,8641
< 	jmp	.LBB11_312
< .LBB11_311:                             # %if.else.i3387
<                                         #   in Loop: Header=BB11_307 Depth=2
< 	movq	%r15, %rdi
---
> 	jmp	.LBB11_314
> .LBB11_313:                             # %if.else.i3387
>                                         #   in Loop: Header=BB11_309 Depth=2
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
8647,8648c8650,8651
< .LBB11_312:                             # %if.end.i3384
<                                         #   in Loop: Header=BB11_307 Depth=2
---
> .LBB11_314:                             # %if.end.i3384
>                                         #   in Loop: Header=BB11_309 Depth=2
8653,8655c8656,8659
< 	jge	.LBB11_314
< # %bb.313:                              # %if.then282.i
<                                         #   in Loop: Header=BB11_307 Depth=2
---
> 	leaq	1812(%rsp), %rbx
> 	jge	.LBB11_316
> # %bb.315:                              # %if.then282.i
>                                         #   in Loop: Header=BB11_309 Depth=2
8659,8661c8663,8666
< 	callq	*32816(%r15)
< .LBB11_314:                             # %if.end283.i
<                                         #   in Loop: Header=BB11_307 Depth=2
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	callq	*32816(%rax)
> .LBB11_316:                             # %if.end283.i
>                                         #   in Loop: Header=BB11_309 Depth=2
8663,8670c8668,8675
< 	jmp	.LBB11_307
< .LBB11_315:                             # %for.cond.cleanup100.i
<                                         #   in Loop: Header=BB11_305 Depth=1
< 	movq	128(%rsp), %r14                 # 8-byte Reload
< 	testq	%r14, %r14
< 	jne	.LBB11_317
< # %bb.316:                              # %land.lhs.true285.i
<                                         #   in Loop: Header=BB11_305 Depth=1
---
> 	jmp	.LBB11_309
> .LBB11_317:                             # %for.cond.cleanup100.i
>                                         #   in Loop: Header=BB11_307 Depth=1
> 	movq	136(%rsp), %r15                 # 8-byte Reload
> 	testq	%r15, %r15
> 	jne	.LBB11_319
> # %bb.318:                              # %land.lhs.true285.i
>                                         #   in Loop: Header=BB11_307 Depth=1
8679c8684
< 	imull	88(%rsp), %eax                  # 4-byte Folded Reload
---
> 	imull	120(%rsp), %eax                 # 4-byte Folded Reload
8687,8689c8692,8694
< 	jg	.LBB11_320
< .LBB11_317:                             # %if.end297.i
<                                         #   in Loop: Header=BB11_305 Depth=1
---
> 	jg	.LBB11_322
> .LBB11_319:                             # %if.end297.i
>                                         #   in Loop: Header=BB11_307 Depth=1
8692c8697,8698
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movq	%rbp, %rdi
8694,8695c8700,8701
< 	movq	56(%rsp), %r13                  # 8-byte Reload
< 	movl	%r13d, %edx
---
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
>                                         # kill: def $edx killed $edx killed $rdx
8698c8704
< 	popq	%rbx
---
> 	popq	%r14
8700c8706
< 	movl	%ebx, %ecx
---
> 	movl	%r14d, %ecx
8703c8709
< 	popq	%rbp
---
> 	popq	%r13
8705c8711
< 	movl	%ebp, %r8d
---
> 	movl	%r13d, %r8d
8710c8716
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
8712,8714c8718,8721
< 	movl	%r13d, %edx
< 	movl	%ebx, %ecx
< 	movl	%ebp, %r8d
---
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
>                                         # kill: def $edx killed $edx killed $rdx
> 	movl	%r14d, %ecx
> 	movl	%r13d, %r8d
8717c8724
< 	incq	%r14
---
> 	incq	%r15
8719,8727c8726,8735
< 	jmp	.LBB11_305
< .LBB11_318:
< 	movl	88(%rsp), %eax                  # 4-byte Reload
< 	movl	%eax, %r13d
< 	movl	160(%rsp), %eax                 # 4-byte Reload
< 	movl	%eax, 136(%rsp)                 # 4-byte Spill
< 	movq	176(%rsp), %rax                 # 8-byte Reload
< 	jmp	.LBB11_343
< .LBB11_319:                             # %for.end311.i
---
> 	movq	%r15, %rdi
> 	jmp	.LBB11_307
> .LBB11_320:
> 	movl	120(%rsp), %eax                 # 4-byte Reload
> 	movl	%eax, %r14d
> 	movl	176(%rsp), %eax                 # 4-byte Reload
> 	movl	%eax, 168(%rsp)                 # 4-byte Spill
> 	movq	192(%rsp), %rax                 # 8-byte Reload
> 	jmp	.LBB11_345
> .LBB11_321:                             # %for.end311.i
8731,8732c8739,8740
< 	jmp	.LBB11_321
< .LBB11_320:                             # %if.then295.i
---
> 	jmp	.LBB11_323
> .LBB11_322:                             # %if.then295.i
8734a8743
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
8736,8737c8745,8746
< .LBB11_321:                             # %x264_mb_analyse_inter_p16x8.exit
< 	movl	88(%rsp), %ecx                  # 4-byte Reload
---
> .LBB11_323:                             # %x264_mb_analyse_inter_p16x8.exit
> 	movl	120(%rsp), %ecx                 # 4-byte Reload
8739,8740c8748,8749
< 	jge	.LBB11_323
< # %bb.322:                              # %if.then343
---
> 	jge	.LBB11_325
> # %bb.324:                              # %if.then343
8746c8755
< 	movl	%ecx, 160(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 176(%rsp)                 # 4-byte Spill
8751c8760
< 	movq	%rcx, 176(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 192(%rsp)                 # 8-byte Spill
8753,8754c8762,8763
< .LBB11_323:                             # %if.end346
< 	movl	%ecx, 88(%rsp)                  # 4-byte Spill
---
> .LBB11_325:                             # %if.end346
> 	movl	%ecx, 120(%rsp)                 # 4-byte Spill
8768c8777
< 	movl	$15, 17388(%r15)
---
> 	movl	$15, 17388(%rbp)
8771,8776c8780,8782
< 	movq	%rdx, 152(%rsp)                 # 8-byte Spill
< 	pushq	$2
< 	.cfi_adjust_cfa_offset 8
< 	popq	%r13
< 	.cfi_adjust_cfa_offset -8
< .LBB11_324:                             # %for.cond.i3420
---
> 	movq	%rdx, 144(%rsp)                 # 8-byte Spill
> 	movq	24(%rsp), %r13                  # 8-byte Reload
> .LBB11_326:                             # %for.cond.i3420
8778c8784
<                                         #     Child Loop BB11_326 Depth 2
---
>                                         #     Child Loop BB11_328 Depth 2
8780,8782c8786,8788
< 	je	.LBB11_337
< # %bb.325:                              # %for.body.i3421
<                                         #   in Loop: Header=BB11_324 Depth=1
---
> 	je	.LBB11_339
> # %bb.327:                              # %for.body.i3421
>                                         #   in Loop: Header=BB11_326 Depth=1
8785c8791,8792
< 	leaq	(%rdi,%rax), %r12
---
> 	leaq	(%rdi,%rax), %rcx
> 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
8797,8799c8804,8806
< 	movl	%r9d, 128(%rsp)                 # 4-byte Spill
< 	movl	%r9d, 624(%rsp)
< 	movl	%edx, 628(%rsp)
---
> 	movl	%r9d, 136(%rsp)                 # 4-byte Spill
> 	movl	%r9d, 608(%rsp)
> 	movl	%edx, 612(%rsp)
8802c8809
< 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
---
> 	movq	%rsi, 64(%rsp)                  # 8-byte Spill
8806c8813
< 	movq	25008(%r15), %rcx
---
> 	movq	25008(%rbp), %rcx
8807a8815
> 	movq	%rbp, %rdx
8809c8817
< 	movq	21344(%r15), %rcx
---
> 	movq	21344(%rdx), %rcx
8813c8821
< 	movq	21352(%r15), %rcx
---
> 	movq	21352(%rdx), %rcx
8816c8824
< 	movq	21360(%r15), %rcx
---
> 	movq	21360(%rdx), %rcx
8821c8829
< 	movq	%rax, 56(%rsp)                  # 8-byte Spill
---
> 	movq	%rax, 80(%rsp)                  # 8-byte Spill
8824c8832
< 	movq	%r8, 120(%rsp)                  # 8-byte Spill
---
> 	movq	%r8, 128(%rsp)                  # 8-byte Spill
8830,8831c8838,8839
< .LBB11_326:                             # %for.cond87.i
<                                         #   Parent Loop BB11_324 Depth=1
---
> .LBB11_328:                             # %for.cond87.i
>                                         #   Parent Loop BB11_326 Depth=1
8833,8837c8841,8845
< 	cmpq	%rbx, 48(%rsp)                  # 8-byte Folded Reload
< 	je	.LBB11_334
< # %bb.327:                              # %for.body90.i
<                                         #   in Loop: Header=BB11_326 Depth=2
< 	movslq	624(%rsp,%rbx,4), %r15
---
> 	cmpq	%rbx, 64(%rsp)                  # 8-byte Folded Reload
> 	je	.LBB11_336
> # %bb.329:                              # %for.body90.i
>                                         #   in Loop: Header=BB11_328 Depth=2
> 	movslq	608(%rsp,%rbx,4), %r15
8846c8854
< 	movq	56(%rsp), %rax                  # 8-byte Reload
---
> 	movq	80(%rsp), %rax                  # 8-byte Reload
8853c8861
< 	movq	64(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	48(%rsp), %rdx                  # 8-byte Reload
8872,8873c8880
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	movq	24752(%rax,%r15,8), %rax
---
> 	movq	24752(%r13,%r15,8), %rax
8877,8878c8884
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	movq	24496(%rax,%r15,8), %rax
---
> 	movq	24496(%r13,%r15,8), %rax
8882c8888
< 	addq	40(%rsp), %rax                  # 8-byte Folded Reload
---
> 	addq	56(%rsp), %rax                  # 8-byte Folded Reload
8886c8892
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
8890c8896,8900
< 	movl	%r13d, %ecx
---
> 	pushq	$2
> 	.cfi_adjust_cfa_offset 8
> 	popq	%r12
> 	.cfi_adjust_cfa_offset -8
> 	movl	%r12d, %ecx
8897c8907
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
8900c8910
< 	movl	%r13d, %ecx
---
> 	movl	%r12d, %ecx
8903,8913c8913,8921
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	cmpl	%r15d, 26652(%rax)
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	jne	.LBB11_330
< # %bb.328:                              # %for.body90.i
<                                         #   in Loop: Header=BB11_326 Depth=2
< 	cmpl	$0, 128(%rsp)                   # 4-byte Folded Reload
< 	jne	.LBB11_330
< # %bb.329:                              # %if.then.i3446
<                                         #   in Loop: Header=BB11_326 Depth=2
< 	movq	%r15, %rdi
---
> 	cmpl	%r15d, 26652(%r13)
> 	jne	.LBB11_332
> # %bb.330:                              # %for.body90.i
>                                         #   in Loop: Header=BB11_328 Depth=2
> 	cmpl	$0, 136(%rsp)                   # 4-byte Folded Reload
> 	jne	.LBB11_332
> # %bb.331:                              # %if.then.i3446
>                                         #   in Loop: Header=BB11_328 Depth=2
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
8917,8920c8925,8928
< 	jmp	.LBB11_331
< .LBB11_330:                             # %if.else.i3450
<                                         #   in Loop: Header=BB11_326 Depth=2
< 	movq	%r15, %rdi
---
> 	jmp	.LBB11_333
> .LBB11_332:                             # %if.else.i3450
>                                         #   in Loop: Header=BB11_328 Depth=2
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
8929,8930c8937,8938
< .LBB11_331:                             # %if.end.i3447
<                                         #   in Loop: Header=BB11_326 Depth=2
---
> .LBB11_333:                             # %if.end.i3447
>                                         #   in Loop: Header=BB11_328 Depth=2
8934,8937c8942,8946
< 	cmpl	136(%r12), %eax
< 	jge	.LBB11_333
< # %bb.332:                              # %if.then269.i
<                                         #   in Loop: Header=BB11_326 Depth=2
---
> 	movq	40(%rsp), %rcx                  # 8-byte Reload
> 	cmpl	136(%rcx), %eax
> 	jge	.LBB11_335
> # %bb.334:                              # %if.then269.i
>                                         #   in Loop: Header=BB11_328 Depth=2
8939c8948
< 	movq	%r12, %rdi
---
> 	movq	40(%rsp), %rdi                  # 8-byte Reload
8941,8943c8950,8953
< 	callq	*32816(%r15)
< .LBB11_333:                             # %if.end270.i
<                                         #   in Loop: Header=BB11_326 Depth=2
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	callq	*32816(%rax)
> .LBB11_335:                             # %if.end270.i
>                                         #   in Loop: Header=BB11_328 Depth=2
8945,8951c8955,8961
< 	jmp	.LBB11_326
< .LBB11_334:                             # %for.cond.cleanup89.i
<                                         #   in Loop: Header=BB11_324 Depth=1
< 	cmpq	$0, 120(%rsp)                   # 8-byte Folded Reload
< 	jne	.LBB11_336
< # %bb.335:                              # %land.lhs.true272.i
<                                         #   in Loop: Header=BB11_324 Depth=1
---
> 	jmp	.LBB11_328
> .LBB11_336:                             # %for.cond.cleanup89.i
>                                         #   in Loop: Header=BB11_326 Depth=1
> 	cmpq	$0, 128(%rsp)                   # 8-byte Folded Reload
> 	jne	.LBB11_338
> # %bb.337:                              # %land.lhs.true272.i
>                                         #   in Loop: Header=BB11_326 Depth=1
8953c8963,8964
< 	addl	136(%r12), %ecx
---
> 	movq	40(%rsp), %rax                  # 8-byte Reload
> 	addl	136(%rax), %ecx
8960c8971
< 	imull	88(%rsp), %eax                  # 4-byte Folded Reload
---
> 	imull	120(%rsp), %eax                 # 4-byte Folded Reload
8968,8972c8979,8985
< 	jg	.LBB11_338
< .LBB11_336:                             # %if.end284.i
<                                         #   in Loop: Header=BB11_324 Depth=1
< 	movl	140(%r12), %eax
< 	imulq	152(%rsp), %rax                 # 8-byte Folded Reload
---
> 	jg	.LBB11_340
> .LBB11_338:                             # %if.end284.i
>                                         #   in Loop: Header=BB11_326 Depth=1
> 	movq	40(%rsp), %rcx                  # 8-byte Reload
> 	movl	140(%rcx), %eax
> 	imulq	144(%rsp), %rax                 # 8-byte Folded Reload
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
8974,8978c8987,8991
< 	movq	%rax, 25248(%r15,%rsi,4)
< 	movq	%rax, 25280(%r15,%rsi,4)
< 	movq	%rax, 25312(%r15,%rsi,4)
< 	movq	%rax, 25344(%r15,%rsi,4)
< 	movzbl	20(%r12), %eax
---
> 	movq	%rax, 25248(%rbp,%rsi,4)
> 	movq	%rax, 25280(%rbp,%rsi,4)
> 	movq	%rax, 25312(%rbp,%rsi,4)
> 	movq	%rax, 25344(%rbp,%rsi,4)
> 	movzbl	20(%rcx), %eax
8980c8993
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
8993c9006
< 	movq	56(%rsp), %r8                   # 8-byte Reload
---
> 	movq	80(%rsp), %r8                   # 8-byte Reload
8995,9001c9008,9014
< 	jmp	.LBB11_324
< .LBB11_337:                             # %for.end298.i
< 	movl	8296(%rsp), %r13d
< 	addl	8152(%rsp), %r13d
< 	movl	%r13d, 8000(%rsp)
< 	jmp	.LBB11_339
< .LBB11_338:                             # %if.then282.i3455
---
> 	jmp	.LBB11_326
> .LBB11_339:                             # %for.end298.i
> 	movl	8296(%rsp), %r14d
> 	addl	8152(%rsp), %r14d
> 	movl	%r14d, 8000(%rsp)
> 	jmp	.LBB11_341
> .LBB11_340:                             # %if.then282.i3455
9003c9016,9017
< 	movl	$268435456, %r13d               # imm = 0x10000000
---
> 	movl	$268435456, %r14d               # imm = 0x10000000
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
9005,9011c9019,9025
< .LBB11_339:                             # %x264_mb_analyse_inter_p8x16.exit
< 	movl	88(%rsp), %ecx                  # 4-byte Reload
< 	cmpl	%ecx, %r13d
< 	movq	176(%rsp), %rax                 # 8-byte Reload
< 	jge	.LBB11_342
< # %bb.340:                              # %if.then380
< 	movl	%r13d, 36(%rsp)
---
> .LBB11_341:                             # %x264_mb_analyse_inter_p8x16.exit
> 	movl	120(%rsp), %ecx                 # 4-byte Reload
> 	cmpl	%ecx, %r14d
> 	movq	192(%rsp), %rax                 # 8-byte Reload
> 	jge	.LBB11_344
> # %bb.342:                              # %if.then380
> 	movl	%r14d, 36(%rsp)
9014,9015c9028,9029
< 	jmp	.LBB11_341
< .LBB11_342:
---
> 	jmp	.LBB11_343
> .LBB11_344:
9017,9021c9031,9035
< 	movl	%ecx, %r13d
< 	movl	160(%rsp), %ecx                 # 4-byte Reload
< 	movl	%ecx, 136(%rsp)                 # 4-byte Spill
< .LBB11_343:                             # %if.end384
< 	movl	%eax, 17388(%r15)
---
> 	movl	%ecx, %r14d
> 	movl	176(%rsp), %ecx                 # 4-byte Reload
> 	movl	%ecx, 168(%rsp)                 # 4-byte Spill
> .LBB11_345:                             # %if.end384
> 	movl	%eax, 17388(%rbp)
9023c9037
< 	movq	%rax, 176(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 192(%rsp)                 # 8-byte Spill
9025,9029c9039,9043
< 	jne	.LBB11_364
< # %bb.344:                              # %lor.lhs.false389
< 	cmpl	$0, 16408(%r15)
< 	je	.LBB11_364
< # %bb.345:                              # %if.else394
---
> 	jne	.LBB11_367
> # %bb.346:                              # %lor.lhs.false389
> 	cmpl	$0, 16408(%rbp)
> 	je	.LBB11_367
> # %bb.347:                              # %if.else394
9032c9046
< .LBB11_346:                             # %if.then442
---
> .LBB11_348:                             # %if.then442
9035,9038c9049,9051
< 	leaq	17392(%r15), %r12
< 	movl	$2400, %r14d                    # imm = 0x960
< 	movl	$2256, %eax                     # imm = 0x8D0
< 	movq	%rax, 64(%rsp)                  # 8-byte Spill
---
> 	leaq	17392(%rbp), %r12
> 	movl	$2400, %r15d                    # imm = 0x960
> 	movl	$2256, %ebp                     # imm = 0x8D0
9040,9041c9053,9055
< 	movq	%rax, 48(%rsp)                  # 8-byte Spill
< 	movl	$1968, %ebp                     # imm = 0x7B0
---
> 	movq	%rax, 40(%rsp)                  # 8-byte Spill
> 	movl	$1968, %ecx                     # imm = 0x7B0
> 	movq	%rbx, %rsi
9043,9044c9057,9058
< 	movq	$0, 40(%rsp)                    # 8-byte Folded Spill
< .LBB11_347:                             # %for.cond443
---
> 	xorl	%r14d, %r14d
> .LBB11_349:                             # %for.cond443
9047,9049c9061,9063
< 	je	.LBB11_363
< # %bb.348:                              # %for.body447
<                                         #   in Loop: Header=BB11_347 Depth=1
---
> 	je	.LBB11_366
> # %bb.350:                              # %for.body447
>                                         #   in Loop: Header=BB11_349 Depth=1
9052,9054c9066,9068
< 	ja	.LBB11_356
< # %bb.349:                              # %for.body447
<                                         #   in Loop: Header=BB11_347 Depth=1
---
> 	ja	.LBB11_359
> # %bb.351:                              # %for.body447
>                                         #   in Loop: Header=BB11_349 Depth=1
9056,9058c9070,9074
< .LBB11_350:                             # %sw.bb511
<                                         #   in Loop: Header=BB11_347 Depth=1
< 	leaq	(%rsp,%rbp), %rsi
---
> .LBB11_352:                             # %sw.bb511
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movq	%rcx, %rbx
> 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
> 	leaq	(%rsp,%rcx), %rsi
9060c9076,9078
< 	movq	%r15, %rdi
---
> 	movq	%r14, 56(%rsp)                  # 8-byte Spill
> 	movq	24(%rsp), %r14                  # 8-byte Reload
> 	movq	%r14, %rdi
9062c9080
< 	movq	48(%rsp), %rax                  # 8-byte Reload
---
> 	movq	40(%rsp), %rax                  # 8-byte Reload
9065c9083
< 	movq	%r15, %rdi
---
> 	movq	%r14, %rdi
9067,9068c9085
< 	movq	64(%rsp), %rax                  # 8-byte Reload
< 	leaq	(%rsp,%rax), %rsi
---
> 	leaq	(%rsp,%rbp), %rsi
9070c9087
< 	movq	%r15, %rdi
---
> 	movq	%r14, %rdi
9072c9089
< 	leaq	(%rsp,%r14), %rsi
---
> 	leaq	(%rsp,%r15), %rsi
9074c9091,9092
< 	movq	%r15, %rdi
---
> 	movq	%r14, %rdi
> 	movq	56(%rsp), %r14                  # 8-byte Reload
9075a9094
> 	movq	48(%rsp), %rsi                  # 8-byte Reload
9080,9082c9099,9103
< 	jmp	.LBB11_355
< .LBB11_351:                             # %sw.bb487
<                                         #   in Loop: Header=BB11_347 Depth=1
---
> 	jmp	.LBB11_357
> .LBB11_353:                             # %sw.bb487
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movq	%rcx, %rbx
> 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
9084a9106,9108
> 	movq	%rbp, 64(%rsp)                  # 8-byte Spill
> 	movq	%r15, %rbp
> 	movq	24(%rsp), %r15                  # 8-byte Reload
9090,9094c9114,9119
< 	jmp	.LBB11_354
< .LBB11_352:                             # %sw.bb
<                                         #   in Loop: Header=BB11_347 Depth=1
< 	movq	%r15, %rdi
< 	movq	%rbx, %rsi
---
> 	jmp	.LBB11_356
> .LBB11_354:                             # %sw.bb
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movq	%rcx, %rbx
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	movq	%rsi, %r14
9096,9102c9121,9128
< 	movl	36(%rsp), %eax
< 	addl	136(%rbx), %eax
< 	movq	%rax, 40(%rsp)                  # 8-byte Spill
< 	movl	%eax, 36(%rsp)
< 	jmp	.LBB11_357
< .LBB11_353:                             # %sw.bb463
<                                         #   in Loop: Header=BB11_347 Depth=1
---
> 	movq	%r14, %rsi
> 	movl	36(%rsp), %r14d
> 	addl	136(%rsi), %r14d
> 	jmp	.LBB11_358
> .LBB11_355:                             # %sw.bb463
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movq	%rcx, %rbx
> 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
9104a9131,9133
> 	movq	%rbp, 64(%rsp)                  # 8-byte Spill
> 	movq	%r15, %rbp
> 	movq	24(%rsp), %r15                  # 8-byte Reload
9110,9111c9139,9140
< .LBB11_354:                             # %for.inc559
<                                         #   in Loop: Header=BB11_347 Depth=1
---
> .LBB11_356:                             # %for.inc559
>                                         #   in Loop: Header=BB11_349 Depth=1
9112a9142,9143
> 	movq	%rbp, %r15
> 	movq	64(%rsp), %rbp                  # 8-byte Reload
9114a9146
> 	movq	48(%rsp), %rsi                  # 8-byte Reload
9118,9131d9149
< .LBB11_355:                             # %for.inc559
<                                         #   in Loop: Header=BB11_347 Depth=1
< 	movq	40(%rsp), %rcx                  # 8-byte Reload
< 	addl	%eax, %ecx
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
< 	movl	%ecx, 36(%rsp)
< 	jmp	.LBB11_357
< .LBB11_356:                             # %sw.default
<                                         #   in Loop: Header=BB11_347 Depth=1
< 	movl	$.L.str, %edx
< 	movq	%r15, %rdi
< 	xorl	%esi, %esi
< 	xorl	%eax, %eax
< 	callq	x264_log@PLT
9133c9151,9157
<                                         #   in Loop: Header=BB11_347 Depth=1
---
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	addl	%eax, %r14d
> .LBB11_358:                             # %for.inc559
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movl	%r14d, 36(%rsp)
> .LBB11_360:                             # %for.inc559
>                                         #   in Loop: Header=BB11_349 Depth=1
9136,9138c9160
< 	addq	%rax, %r14
< 	addq	%rax, 64(%rsp)                  # 8-byte Folded Spill
< 	addq	%rax, 48(%rsp)                  # 8-byte Folded Spill
---
> 	addq	%rax, %r15
9140c9162,9165
< 	addq	$144, %rbx
---
> 	addq	%rax, 40(%rsp)                  # 8-byte Folded Spill
> 	movq	%rbx, %rcx
> 	addq	%rax, %rcx
> 	addq	$144, %rsi
9142,9143c9167,9179
< 	jmp	.LBB11_347
< .LBB11_358:                             # %if.then424
---
> 	jmp	.LBB11_349
> .LBB11_359:                             # %sw.default
>                                         #   in Loop: Header=BB11_349 Depth=1
> 	movq	%rcx, %rbx
> 	movl	$.L.str, %edx
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	movq	%rsi, 48(%rsp)                  # 8-byte Spill
> 	xorl	%esi, %esi
> 	xorl	%eax, %eax
> 	callq	x264_log@PLT
> 	movq	48(%rsp), %rsi                  # 8-byte Reload
> 	jmp	.LBB11_360
> .LBB11_361:                             # %if.then424
9145c9181
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9148,9150c9184,9186
< 	jmp	.LBB11_361
< .LBB11_359:                             # %if.then397
< 	movq	%r15, %rdi
---
> 	jmp	.LBB11_364
> .LBB11_362:                             # %if.then397
> 	movq	%rbp, %rdi
9153,9155c9189,9191
< 	movl	1656(%rsp), %r13d
< 	jmp	.LBB11_362
< .LBB11_360:                             # %if.then406
---
> 	movl	1656(%rsp), %r14d
> 	jmp	.LBB11_365
> .LBB11_363:                             # %if.then406
9157c9193
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9160,9161c9196,9197
< .LBB11_361:                             # %if.end566
< 	movq	%r15, %rdi
---
> .LBB11_364:                             # %if.end566
> 	movq	%rbp, %rdi
9164,9169c9200,9206
< 	movl	136(%rbx), %r13d
< 	addl	-8(%rbx), %r13d
< .LBB11_362:                             # %if.end566
< 	movl	%r13d, 36(%rsp)
< 	jmp	.LBB11_364
< .LBB11_363:
---
> 	movl	136(%rbx), %r14d
> 	addl	-8(%rbx), %r14d
> .LBB11_365:                             # %if.end566
> 	movl	%r14d, 36(%rsp)
> 	jmp	.LBB11_367
> .LBB11_366:
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
9171,9175c9208,9211
< 	movq	40(%rsp), %r13                  # 8-byte Reload
< .LBB11_364:                             # %if.end566
< 	cmpl	$0, 16412(%r15)
< 	je	.LBB11_366
< # %bb.365:                              # %if.then569
---
> .LBB11_367:                             # %if.end566
> 	cmpl	$0, 16412(%rbp)
> 	je	.LBB11_369
> # %bb.368:                              # %if.then569
9177c9213
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9180c9216
< 	movl	%r13d, %edx
---
> 	movl	%r14d, %edx
9182c9218
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9194,9195c9230,9231
< 	jmp	.LBB11_367
< .LBB11_366:                             # %if.else580
---
> 	jmp	.LBB11_370
> .LBB11_369:                             # %if.else580
9197c9233
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9199c9235
< 	movl	%r13d, %edx
---
> 	movl	%r14d, %edx
9204,9205c9240,9241
< .LBB11_367:                             # %if.end581
< 	movl	%r13d, 592(%rsp)
---
> .LBB11_370:                             # %if.end581
> 	movl	%r14d, 576(%rsp)
9207,9208c9243,9244
< 	je	.LBB11_382
< # %bb.368:                              # %if.then612
---
> 	je	.LBB11_385
> # %bb.371:                              # %if.then612
9213,9215c9249,9251
< 	cmpl	%ecx, %r13d
< 	movq	%r13, 40(%rsp)                  # 8-byte Spill
< 	cmovll	%r13d, %ecx
---
> 	cmpl	%ecx, %r14d
> 	movq	%r14, 56(%rsp)                  # 8-byte Spill
> 	cmovll	%r14d, %ecx
9224c9260
< 	movl	%esi, 17384(%r15)
---
> 	movl	%esi, 17384(%rbp)
9226,9227c9262,9263
< 	jne	.LBB11_371
< # %bb.369:                              # %land.lhs.true.i3494
---
> 	jne	.LBB11_374
> # %bb.372:                              # %land.lhs.true.i3494
9237,9239c9273,9275
< 	jg	.LBB11_371
< # %bb.370:                              # %if.then.i3496
< 	movl	$16, 17388(%r15)
---
> 	jg	.LBB11_374
> # %bb.373:                              # %if.then.i3496
> 	movl	$16, 17388(%rbp)
9241c9277
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9245c9281
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9248c9284
< .LBB11_371:                             # %if.end.i3462
---
> .LBB11_374:                             # %if.end.i3462
9252,9253c9288,9290
< 	jg	.LBB11_373
< # %bb.372:                              # %if.then10.i
---
> 	jg	.LBB11_376
> # %bb.375:                              # %if.then10.i
> 	movq	24(%rsp), %r15                  # 8-byte Reload
9262c9299
< .LBB11_373:                             # %if.end19.i
---
> .LBB11_376:                             # %if.end19.i
9265,9266c9302,9304
< 	jg	.LBB11_375
< # %bb.374:                              # %if.then22.i
---
> 	jg	.LBB11_378
> # %bb.377:                              # %if.then22.i
> 	movq	24(%rsp), %r15                  # 8-byte Reload
9276c9314
< .LBB11_375:                             # %if.end32.i
---
> .LBB11_378:                             # %if.end32.i
9280,9281c9318,9319
< 	jg	.LBB11_379
< # %bb.376:                              # %if.then35.i
---
> 	jg	.LBB11_382
> # %bb.379:                              # %if.then35.i
9283,9286c9321,9325
< 	movq	%rax, 17384(%r15)
< 	testb	$32, 388(%r15)
< 	jne	.LBB11_389
< # %bb.377:                              # %if.else180.i
---
> 	movq	24(%rsp), %rbx                  # 8-byte Reload
> 	movq	%rax, 17384(%rbx)
> 	testb	$32, 388(%rbx)
> 	jne	.LBB11_392
> # %bb.380:                              # %if.else180.i
9288c9327
< 	movq	%r15, %rdi
---
> 	movq	%rbx, %rdi
9290c9329
< .LBB11_378:                             # %if.end181.i
---
> .LBB11_381:                             # %if.end181.i
9292c9331
< 	movq	%r15, %rdi
---
> 	movq	%rbx, %rdi
9295c9334
< .LBB11_379:                             # %x264_mb_analyse_p_rd.exit
---
> .LBB11_382:                             # %x264_mb_analyse_p_rd.exit
9322,9325c9361,9365
< 	movl	%ecx, 136(%rsp)                 # 4-byte Spill
< 	movl	%ecx, 17384(%r15)
< 	movq	%rax, 176(%rsp)                 # 8-byte Spill
< 	movl	%eax, 17388(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	%ecx, 168(%rsp)                 # 4-byte Spill
> 	movl	%ecx, 17384(%rbp)
> 	movq	%rax, 192(%rsp)                 # 8-byte Spill
> 	movl	%eax, 17388(%rbp)
9327,9329c9367,9368
< 	movq	40(%rsp), %rax                  # 8-byte Reload
< 	jg	.LBB11_381
< # %bb.380:                              # %if.then650
---
> 	jg	.LBB11_384
> # %bb.383:                              # %if.then650
9331c9370
< 	leaq	592(%rsp), %rbx
---
> 	leaq	576(%rsp), %rbx
9333c9372
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9337a9377
> 	movq	%rax, 56(%rsp)                  # 8-byte Spill
9339c9379,9380
< .LBB11_381:                             # %if.end651
---
> .LBB11_384:                             # %if.end651
> 	movq	56(%rsp), %rax                  # 8-byte Reload
9348c9389
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9355,9358c9396,9399
< 	movl	%r14d, %r13d
< .LBB11_382:                             # %if.end652
< 	cmpl	%r13d, %eax
< 	cmovll	%eax, %r13d
---
>                                         # kill: def $r14d killed $r14d def $r14
> .LBB11_385:                             # %if.end652
> 	cmpl	%r14d, %eax
> 	cmovll	%eax, %r14d
9363c9404
< 	movl	136(%rsp), %esi                 # 4-byte Reload
---
> 	movl	168(%rsp), %esi                 # 4-byte Reload
9365,9366c9406,9407
< 	cmpl	%r13d, %edx
< 	cmovll	%edx, %r13d
---
> 	cmpl	%r14d, %edx
> 	cmovll	%edx, %r14d
9373,9374c9414,9415
< 	cmpl	%r13d, %ecx
< 	cmovll	%ecx, %r13d
---
> 	cmpl	%r14d, %ecx
> 	cmovll	%ecx, %r14d
9377,9378c9418,9420
< 	cmpl	%r13d, %ecx
< 	cmovll	%ecx, %r13d
---
> 	cmpl	%r14d, %ecx
> 	cmovll	%ecx, %r14d
> 	movq	%r14, %rcx
9384,9385c9426,9428
< 	movl	%r13d, 36(%rsp)
< 	movl	%eax, 17384(%r15)
---
> 	movq	%rcx, %rbx
> 	movl	%ecx, 36(%rsp)
> 	movl	%eax, 17384(%rbp)
9387,9388c9430,9431
< 	je	.LBB11_385
< # %bb.383:                              # %if.end652
---
> 	je	.LBB11_388
> # %bb.386:                              # %if.end652
9390,9391c9433,9434
< 	jbe	.LBB11_385
< # %bb.384:                              # %cleanup990
---
> 	jbe	.LBB11_388
> # %bb.387:                              # %cleanup990
9393c9436
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9396c9439
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9398,9399c9441,9442
< 	movq	21344(%r15), %rdi
< 	movq	21392(%r15), %rdx
---
> 	movq	21344(%rbp), %rdi
> 	movq	21392(%rbp), %rdx
9411,9413c9454,9459
< 	callq	*32720(%r15)
< 	movq	21352(%r15), %rdi
< 	movq	21400(%r15), %rdx
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	callq	*32720(%rax)
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	movq	21352(%rax), %rdi
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	movq	21400(%rax), %rdx
9428a9475
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
9430,9434c9477,9480
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	callq	*32744(%r15)
< 	movl	25792(%r15), %edx
< 	subl	17428(%r15), %edx
< 	movl	496(%r15), %eax
---
> 	callq	*32744(%rbp)
> 	movl	25792(%rbp), %edx
> 	subl	17428(%rbp), %edx
> 	movl	496(%rbp), %eax
9437c9483
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
9442c9488
< .LBB11_385:                             # %if.end746
---
> .LBB11_388:                             # %if.end746
9444,9445c9490,9491
< 	jl	.LBB11_534
< # %bb.386:                              # %if.end746
---
> 	jl	.LBB11_536
> # %bb.389:                              # %if.end746
9447,9450c9493,9496
< 	je	.LBB11_534
< # %bb.387:                              # %if.then755
< 	ja	.LBB11_402
< # %bb.388:                              # %if.then775
---
> 	je	.LBB11_536
> # %bb.390:                              # %if.then755
> 	ja	.LBB11_405
> # %bb.391:                              # %if.then775
9454,9455c9500,9501
< 	jmp	.LBB11_534
< .LBB11_389:                             # %if.then40.i
---
> 	jmp	.LBB11_536
> .LBB11_392:                             # %if.then40.i
9464,9465c9510,9511
< 	movd	%xmm0, 25132(%r15)
< 	movd	%xmm0, 25140(%r15)
---
> 	movd	%xmm0, 25132(%rbx)
> 	movd	%xmm0, 25140(%rbx)
9470,9471c9516,9517
< 	movd	%xmm0, 25148(%r15)
< 	movd	%xmm0, 25156(%r15)
---
> 	movd	%xmm0, 25148(%rbx)
> 	movd	%xmm0, 25156(%rbx)
9473c9519
< .LBB11_390:                             # %for.cond.i3477
---
> .LBB11_393:                             # %for.cond.i3477
9475c9521
<                                         #     Child Loop BB11_392 Depth 2
---
>                                         #     Child Loop BB11_395 Depth 2
9477,9479c9523,9525
< 	je	.LBB11_378
< # %bb.391:                              # %for.body.i3478
<                                         #   in Loop: Header=BB11_390 Depth=1
---
> 	je	.LBB11_381
> # %bb.394:                              # %for.body.i3478
>                                         #   in Loop: Header=BB11_393 Depth=1
9504c9550
< 	movl	%eax, 64(%rsp)                  # 4-byte Spill
---
> 	movl	%eax, 48(%rsp)                  # 4-byte Spill
9511,9512c9557,9558
< .LBB11_392:                             # %for.cond136.i
<                                         #   Parent Loop BB11_390 Depth=1
---
> .LBB11_395:                             # %for.cond136.i
>                                         #   Parent Loop BB11_393 Depth=1
9515,9517c9561,9563
< 	je	.LBB11_399
< # %bb.393:                              # %for.body139.i
<                                         #   in Loop: Header=BB11_392 Depth=2
---
> 	je	.LBB11_402
> # %bb.396:                              # %for.body139.i
>                                         #   in Loop: Header=BB11_395 Depth=2
9519,9521c9565,9567
< 	jg	.LBB11_398
< # %bb.394:                              # %lor.lhs.false.i3487
<                                         #   in Loop: Header=BB11_392 Depth=2
---
> 	jg	.LBB11_401
> # %bb.397:                              # %lor.lhs.false.i3487
>                                         #   in Loop: Header=BB11_395 Depth=2
9523,9525c9569,9571
< 	jne	.LBB11_397
< # %bb.395:                              # %lor.lhs.false.i3487
<                                         #   in Loop: Header=BB11_392 Depth=2
---
> 	jne	.LBB11_400
> # %bb.398:                              # %lor.lhs.false.i3487
>                                         #   in Loop: Header=BB11_395 Depth=2
9527,9528c9573,9574
< 	jne	.LBB11_397
< # %bb.396:                              #   in Loop: Header=BB11_392 Depth=2
---
> 	jne	.LBB11_400
> # %bb.399:                              #   in Loop: Header=BB11_395 Depth=2
9530,9532c9576,9578
< 	jmp	.LBB11_398
< .LBB11_397:                             # %if.end151.i
<                                         #   in Loop: Header=BB11_392 Depth=2
---
> 	jmp	.LBB11_401
> .LBB11_400:                             # %if.end151.i
>                                         #   in Loop: Header=BB11_395 Depth=2
9542c9588
< 	movl	64(%rsp), %edx                  # 4-byte Reload
---
> 	movl	48(%rsp), %edx                  # 4-byte Reload
9552,9553c9598,9599
< .LBB11_398:                             # %cleanup.i
<                                         #   in Loop: Header=BB11_392 Depth=2
---
> .LBB11_401:                             # %cleanup.i
>                                         #   in Loop: Header=BB11_395 Depth=2
9555,9559c9601,9605
< 	jmp	.LBB11_392
< .LBB11_399:                             # %for.end.i3493
<                                         #   in Loop: Header=BB11_390 Depth=1
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	movzbl	17392(%rax,%r14), %eax
---
> 	jmp	.LBB11_395
> .LBB11_402:                             # %for.end.i3493
>                                         #   in Loop: Header=BB11_393 Depth=1
> 	movq	24(%rsp), %rbx                  # 8-byte Reload
> 	movzbl	17392(%rbx,%r14), %eax
9561,9565c9607,9611
< 	je	.LBB11_401
< # %bb.400:                              # %if.then169.i
<                                         #   in Loop: Header=BB11_390 Depth=1
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
< 	movb	%r15b, 17392(%rdi,%r14)
---
> 	je	.LBB11_404
> # %bb.403:                              # %if.then169.i
>                                         #   in Loop: Header=BB11_393 Depth=1
> 	movb	%r15b, 17392(%rbx,%r14)
> 	movq	%rbx, %rdi
9570,9571c9616,9617
< .LBB11_401:                             # %if.end175.i
<                                         #   in Loop: Header=BB11_390 Depth=1
---
> .LBB11_404:                             # %if.end175.i
>                                         #   in Loop: Header=BB11_393 Depth=1
9573,9576c9619,9621
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	jmp	.LBB11_390
< .LBB11_402:                             # %if.else776
< 	movq	176(%rsp), %rax                 # 8-byte Reload
---
> 	jmp	.LBB11_393
> .LBB11_405:                             # %if.else776
> 	movq	192(%rsp), %rax                 # 8-byte Reload
9578c9623
< 	movq	24(%rsp), %r15                  # 8-byte Reload
---
> 	movq	24(%rsp), %r13                  # 8-byte Reload
9580c9625
< .LBB11_403:                             # %if.then859
---
> .LBB11_406:                             # %if.then859
9582c9627
< 	movq	%r15, %rdi
---
> 	movq	%r13, %rdi
9584c9629
< 	leaq	17392(%r15), %rbx
---
> 	leaq	17392(%r13), %rbx
9590c9635
< .LBB11_404:                             # %for.cond861
---
> .LBB11_407:                             # %for.cond861
9593,9595c9638,9640
< 	je	.LBB11_534
< # %bb.405:                              # %for.body865
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> 	je	.LBB11_536
> # %bb.408:                              # %for.body865
>                                         #   in Loop: Header=BB11_407 Depth=1
9598,9601c9643,9646
< 	ja	.LBB11_413
< # %bb.406:                              # %for.body865
<                                         #   in Loop: Header=BB11_404 Depth=1
< 	movq	%rdx, 64(%rsp)                  # 8-byte Spill
---
> 	ja	.LBB11_416
> # %bb.409:                              # %for.body865
>                                         #   in Loop: Header=BB11_407 Depth=1
> 	movq	%rdx, 48(%rsp)                  # 8-byte Spill
9603,9604c9648,9649
< .LBB11_407:                             # %if.then938
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> .LBB11_410:                             # %if.then938
>                                         #   in Loop: Header=BB11_407 Depth=1
9608c9653
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
9635,9637c9680,9682
< 	jmp	.LBB11_412
< .LBB11_408:                             # %if.then913
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> 	jmp	.LBB11_415
> .LBB11_411:                             # %if.then913
>                                         #   in Loop: Header=BB11_407 Depth=1
9641c9686
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
9652,9654c9697,9699
< 	jmp	.LBB11_411
< .LBB11_409:                             # %if.then873
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> 	jmp	.LBB11_414
> .LBB11_412:                             # %if.then873
>                                         #   in Loop: Header=BB11_407 Depth=1
9656c9701
< 	movq	%rbp, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rbp, 56(%rsp)                  # 8-byte Spill
9663c9708
< 	movq	64(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	48(%rsp), %rdx                  # 8-byte Reload
9665,9668c9710,9713
< 	movq	40(%rsp), %rbp                  # 8-byte Reload
< 	jmp	.LBB11_413
< .LBB11_410:                             # %if.then888
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> 	movq	56(%rsp), %rbp                  # 8-byte Reload
> 	jmp	.LBB11_416
> .LBB11_413:                             # %if.then888
>                                         #   in Loop: Header=BB11_407 Depth=1
9672c9717
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
9683,9684c9728,9729
< .LBB11_411:                             # %for.inc975
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> .LBB11_414:                             # %for.inc975
>                                         #   in Loop: Header=BB11_407 Depth=1
9687,9688c9732,9733
< .LBB11_412:                             # %for.inc975
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> .LBB11_415:                             # %for.inc975
>                                         #   in Loop: Header=BB11_407 Depth=1
9691,9694c9736,9739
< 	movq	64(%rsp), %rdx                  # 8-byte Reload
< 	movq	40(%rsp), %rcx                  # 8-byte Reload
< .LBB11_413:                             # %for.inc975
<                                         #   in Loop: Header=BB11_404 Depth=1
---
> 	movq	48(%rsp), %rdx                  # 8-byte Reload
> 	movq	56(%rsp), %rcx                  # 8-byte Reload
> .LBB11_416:                             # %for.inc975
>                                         #   in Loop: Header=BB11_407 Depth=1
9704,9705c9749,9750
< 	jmp	.LBB11_404
< .LBB11_414:                             # %if.else1269
---
> 	jmp	.LBB11_407
> .LBB11_417:                             # %if.else1269
9709c9754
< 	addq	192(%rsp), %rax                 # 8-byte Folded Reload
---
> 	addq	208(%rsp), %rax                 # 8-byte Folded Reload
9713c9758
< 	addq	%r15, %rax
---
> 	addq	%rbp, %rax
9716c9761
< 	movl	$13, 17388(%r15)
---
> 	movl	$13, 17388(%rbp)
9720,9721c9765,9766
< 	movq	%rcx, 608(%rsp)                 # 8-byte Spill
< .LBB11_415:                             # %for.cond.i3703
---
> 	movq	%rcx, 592(%rsp)                 # 8-byte Spill
> .LBB11_418:                             # %for.cond.i3703
9723c9768
<                                         #     Child Loop BB11_417 Depth 2
---
>                                         #     Child Loop BB11_420 Depth 2
9725,9727c9770,9772
< 	je	.LBB11_420
< # %bb.416:                              # %for.body.i3704
<                                         #   in Loop: Header=BB11_415 Depth=1
---
> 	je	.LBB11_423
> # %bb.419:                              # %for.body.i3704
>                                         #   in Loop: Header=BB11_418 Depth=1
9733c9778
< 	movq	%rcx, 520(%rsp)
---
> 	movq	%rcx, 512(%rsp)
9735c9780
< 	movl	%ecx, 580(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 564(%rsp)                 # 4-byte Spill
9737c9782
< 	movl	%ecx, 576(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 560(%rsp)                 # 4-byte Spill
9741c9786
< 	movq	%rcx, 792(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 784(%rsp)                 # 8-byte Spill
9743c9788
< 	movl	%ecx, 572(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 556(%rsp)                 # 4-byte Spill
9745c9790
< 	movl	%ecx, 568(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 552(%rsp)                 # 4-byte Spill
9748c9793
< 	movq	%rax, 784(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 776(%rsp)                 # 8-byte Spill
9750c9795
< 	movq	%rsi, 104(%rsp)                 # 8-byte Spill
---
> 	movq	%rsi, 792(%rsp)                 # 8-byte Spill
9753c9798
< 	movl	%eax, 564(%rsp)                 # 4-byte Spill
---
> 	movl	%eax, 80(%rsp)                  # 4-byte Spill
9755c9800
< 	movq	%rax, 616(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 600(%rsp)                 # 8-byte Spill
9757,9758c9802,9803
< 	movl	%eax, 560(%rsp)                 # 4-byte Spill
< 	movq	%rdx, 776(%rsp)                 # 8-byte Spill
---
> 	movl	%eax, 548(%rsp)                 # 4-byte Spill
> 	movq	%rdx, 768(%rsp)                 # 8-byte Spill
9760c9805
< 	movq	%rax, 768(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 760(%rsp)                 # 8-byte Spill
9763,9766c9808,9811
< 	movq	$0, 96(%rsp)                    # 8-byte Folded Spill
< 	movq	200(%rsp), %rax                 # 8-byte Reload
< 	movq	%rax, 112(%rsp)                 # 8-byte Spill
< 	movq	%r12, 128(%rsp)                 # 8-byte Spill
---
> 	movq	$0, 104(%rsp)                   # 8-byte Folded Spill
> 	movq	168(%rsp), %rax                 # 8-byte Reload
> 	movq	%rax, 96(%rsp)                  # 8-byte Spill
> 	movq	%r12, 112(%rsp)                 # 8-byte Spill
9768,9770c9813,9815
< 	movl	$0, 56(%rsp)                    # 4-byte Folded Spill
< .LBB11_417:                             # %for.cond13.i
<                                         #   Parent Loop BB11_415 Depth=1
---
> 	movl	$0, 64(%rsp)                    # 4-byte Folded Spill
> .LBB11_420:                             # %for.cond13.i
>                                         #   Parent Loop BB11_418 Depth=1
9773,9775c9818,9820
< 	je	.LBB11_419
< # %bb.418:                              # %for.body16.i
<                                         #   in Loop: Header=BB11_417 Depth=2
---
> 	je	.LBB11_422
> # %bb.421:                              # %for.body16.i
>                                         #   in Loop: Header=BB11_420 Depth=2
9782c9827
< 	movq	%rsi, 120(%rsp)                 # 8-byte Spill
---
> 	movq	%rsi, 72(%rsp)                  # 8-byte Spill
9785c9830
< 	movq	%rdx, 72(%rsp)                  # 8-byte Spill
---
> 	movq	%rdx, 136(%rsp)                 # 8-byte Spill
9789c9834
< 	movq	%rcx, 88(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 128(%rsp)                 # 8-byte Spill
9794c9839
< 	movq	%rcx, 64(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 48(%rsp)                  # 8-byte Spill
9801c9846
< 	movq	%rdx, 152(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 120(%rsp)                 # 8-byte Spill
9808c9853
< 	movq	%rcx, 136(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
9813c9858
< 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 200(%rsp)                 # 8-byte Spill
9823c9868
< 	movq	%rcx, 224(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 176(%rsp)                 # 8-byte Spill
9828c9873
< 	movq	%rcx, 512(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 504(%rsp)                 # 8-byte Spill
9833c9878
< 	movq	%rcx, 504(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 496(%rsp)                 # 8-byte Spill
9845,9846c9890,9891
< 	leaq	8256(%r15), %r11
< 	cmoveq	%rax, %r11
---
> 	leaq	8256(%r15), %r13
> 	cmoveq	%rax, %r13
9851c9896
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
9860,9861c9905,9906
< 	movq	%r14, 48(%rsp)                  # 8-byte Spill
< 	leaq	8340(%rsp), %r13
---
> 	movq	%r14, 40(%rsp)                  # 8-byte Spill
> 	leaq	8340(%rsp), %r11
9863,9864c9908,9909
< 	cmoveq	%rax, %r13
< 	movq	%r13, 808(%rsp)                 # 8-byte Spill
---
> 	cmoveq	%rax, %r11
> 	movq	%r11, 808(%rsp)                 # 8-byte Spill
9904c9949
< 	addq	792(%rsp), %rcx                 # 8-byte Folded Reload
---
> 	addq	784(%rsp), %rcx                 # 8-byte Folded Reload
9907c9952
< 	movq	784(%rsp), %rsi                 # 8-byte Reload
---
> 	movq	776(%rsp), %rsi                 # 8-byte Reload
9914c9959
< 	movslq	(%r13), %rcx
---
> 	movslq	(%r11), %rcx
9918,9919c9963,9964
< 	imull	576(%rsp), %edx                 # 4-byte Folded Reload
< 	addl	580(%rsp), %edx                 # 4-byte Folded Reload
---
> 	imull	560(%rsp), %edx                 # 4-byte Folded Reload
> 	addl	564(%rsp), %edx                 # 4-byte Folded Reload
9924c9969
< 	movq	40(%rsp), %r8                   # 8-byte Reload
---
> 	movq	56(%rsp), %r8                   # 8-byte Reload
9926c9971
< 	movq	%rdi, (%r11)
---
> 	movq	%rdi, (%r13)
9936c9981
< 	movq	504(%rsp), %r8                  # 8-byte Reload
---
> 	movq	496(%rsp), %r8                  # 8-byte Reload
9938,9939c9983,9984
< 	imull	568(%rsp), %eax                 # 4-byte Folded Reload
< 	addl	572(%rsp), %eax                 # 4-byte Folded Reload
---
> 	imull	552(%rsp), %eax                 # 4-byte Folded Reload
> 	addl	556(%rsp), %eax                 # 4-byte Folded Reload
9943c9988
< 	movq	512(%rsp), %r8                  # 8-byte Reload
---
> 	movq	504(%rsp), %r8                  # 8-byte Reload
9946c9991
< 	movq	224(%rsp), %rsi                 # 8-byte Reload
---
> 	movq	176(%rsp), %rsi                 # 8-byte Reload
9949c9994
< 	movq	112(%rsp), %rax                 # 8-byte Reload
---
> 	movq	96(%rsp), %rax                  # 8-byte Reload
9954c9999
< 	movq	144(%rsp), %rax                 # 8-byte Reload
---
> 	movq	200(%rsp), %rax                 # 8-byte Reload
9959d10003
< 	movq	%rbx, %r13
9961,9964c10005,10007
< 	movq	104(%rsp), %rsi                 # 8-byte Reload
<                                         # kill: def $esi killed $esi killed $rsi
< 	movl	564(%rsp), %r14d                # 4-byte Reload
< 	movl	%r14d, %edx
---
> 	movq	792(%rsp), %r14                 # 8-byte Reload
> 	movl	%r14d, %esi
> 	movl	80(%rsp), %edx                  # 4-byte Reload
9967c10010
< 	popq	%rbx
---
> 	popq	%r13
9969,9971c10012,10014
< 	movl	%ebx, %ecx
< 	movl	%ebx, %r8d
< 	movq	96(%rsp), %rbp                  # 8-byte Reload
---
> 	movl	%r13d, %ecx
> 	movl	%r13d, %r8d
> 	movq	104(%rsp), %rbp                 # 8-byte Reload
9974c10017
< 	movq	%r13, %rdi
---
> 	movq	%rbx, %rdi
9976,9978c10019,10021
< 	movl	560(%rsp), %edx                 # 4-byte Reload
< 	movl	%ebx, %ecx
< 	movq	136(%rsp), %r8                  # 8-byte Reload
---
> 	movl	548(%rsp), %edx                 # 4-byte Reload
> 	movl	%r13d, %ecx
> 	movq	144(%rsp), %r8                  # 8-byte Reload
9980,9981c10023
< 	movq	%r13, %rdi
< 	movq	%r13, %rbx
---
> 	movq	%rbx, %rdi
9983c10025
< 	movq	152(%rsp), %rdx                 # 8-byte Reload
---
> 	movq	120(%rsp), %rdx                 # 8-byte Reload
9992c10034
< 	movq	64(%rsp), %rcx                  # 8-byte Reload
---
> 	movq	48(%rsp), %rcx                  # 8-byte Reload
9994c10036
< 	movq	608(%rsp), %rcx                 # 8-byte Reload
---
> 	movq	592(%rsp), %rcx                 # 8-byte Reload
9996c10038
< 	movq	48(%rsp), %rax                  # 8-byte Reload
---
> 	movq	40(%rsp), %rax                  # 8-byte Reload
9999c10041
< 	movq	88(%rsp), %r13                  # 8-byte Reload
---
> 	movq	128(%rsp), %r13                 # 8-byte Reload
10003,10006c10045,10046
< 	movq	104(%rsp), %rsi                 # 8-byte Reload
<                                         # kill: def $esi killed $esi killed $rsi
< 	movq	128(%rsp), %rbx                 # 8-byte Reload
< 	movl	%r14d, %edx
---
> 	movl	%r14d, %esi
> 	movl	80(%rsp), %edx                  # 4-byte Reload
10012d10051
< 	movl	56(%rsp), %r14d                 # 4-byte Reload
10015a10055
> 	movq	%r13, %rdi
10019,10020c10059,10060
< 	addq	120(%rsp), %rcx                 # 8-byte Folded Reload
< 	movq	616(%rsp), %rdx                 # 8-byte Reload
---
> 	addq	72(%rsp), %rcx                  # 8-byte Folded Reload
> 	movq	600(%rsp), %rdx                 # 8-byte Reload
10023c10063
< 	addq	$520, %rsi                      # imm = 0x208
---
> 	addq	$512, %rsi                      # imm = 0x200
10026,10027c10066,10068
< 	movswl	(%r13), %r8d
< 	movq	72(%rsp), %rax                  # 8-byte Reload
---
> 	movl	64(%rsp), %r13d                 # 4-byte Reload
> 	movswl	(%rdi), %r8d
> 	movq	136(%rsp), %rax                 # 8-byte Reload
10037,10043c10078,10082
< 	movq	%rbx, %rdi
< 	movq	40(%rsp), %rdx                  # 8-byte Reload
< 	movq	24(%rsp), %rax                  # 8-byte Reload
< 	callq	*32624(%rax)
< 	movq	%rax, 624(%rsp,%r12,2)
< 	movq	64(%rsp), %rax                  # 8-byte Reload
< 	addl	(%rax), %r14d
---
> 	movq	112(%rsp), %r14                 # 8-byte Reload
> 	movq	%r14, %rdi
> 	movq	56(%rsp), %rdx                  # 8-byte Reload
> 	callq	*32624(%rbx)
> 	movq	%rax, 608(%rsp,%r12,2)
10045,10046c10084,10087
< 	addl	(%rax), %r14d
< 	movl	%r14d, 56(%rsp)                 # 4-byte Spill
---
> 	addl	(%rax), %r13d
> 	movq	40(%rsp), %rax                  # 8-byte Reload
> 	addl	(%rax), %r13d
> 	movl	%r13d, 64(%rsp)                 # 4-byte Spill
10048,10049c10089,10090
< 	addq	$64, %rbx
< 	movq	%rbx, 128(%rsp)                 # 8-byte Spill
---
> 	addq	$64, %r14
> 	movq	%r14, 112(%rsp)                 # 8-byte Spill
10051,10059c10092,10100
< 	movq	%rbp, 96(%rsp)                  # 8-byte Spill
< 	subq	$-128, 112(%rsp)                # 8-byte Folded Spill
< 	jmp	.LBB11_417
< .LBB11_419:                             # %for.cond.cleanup15.i
<                                         #   in Loop: Header=BB11_415 Depth=1
< 	movq	624(%rsp), %rdx
< 	movq	632(%rsp), %r8
< 	movl	520(%rsp), %ecx
< 	movl	524(%rsp), %r9d
---
> 	movq	%rbp, 104(%rsp)                 # 8-byte Spill
> 	subq	$-128, 96(%rsp)                 # 8-byte Folded Spill
> 	jmp	.LBB11_420
> .LBB11_422:                             # %for.cond.cleanup15.i
>                                         #   in Loop: Header=BB11_418 Depth=1
> 	movq	608(%rsp), %rdx
> 	movq	616(%rsp), %r8
> 	movl	512(%rsp), %ecx
> 	movl	516(%rsp), %r9d
10063,10064c10104,10105
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	addq	26624(%r15), %rax
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	addq	26624(%rbp), %rax
10074c10115
< 	callq	*32664(%r15)
---
> 	callq	*32664(%rbp)
10076,10077c10117,10118
< 	movq	768(%rsp), %r13                 # 8-byte Reload
< 	movq	-12580(%r14,%r13), %rdi
---
> 	movq	760(%rsp), %r15                 # 8-byte Reload
> 	movq	-12580(%r14,%r15), %rdi
10084,10085c10125,10126
< 	callq	*31840(%r15)
< 	movq	776(%rsp), %r8                  # 8-byte Reload
---
> 	callq	*31840(%rbp)
> 	movq	768(%rsp), %r8                  # 8-byte Reload
10089c10130
< 	movl	56(%rsp), %edi                  # 4-byte Reload
---
> 	movl	64(%rsp), %edi                  # 4-byte Reload
10093c10134
< 	movl	-12532(%r14,%r13), %ecx
---
> 	movl	-12532(%r14,%r15), %ecx
10095,10096c10136,10137
< 	movl	%edx, -12532(%r14,%r13)
< 	movl	-5732(%r14,%r13), %esi
---
> 	movl	%edx, -12532(%r14,%r15)
> 	movl	-5732(%r14,%r15), %esi
10098c10139
< 	movl	%eax, -5732(%r14,%r13)
---
> 	movl	%eax, -5732(%r14,%r15)
10121c10162
< 	movb	%cl, 17392(%r15,%r8)
---
> 	movb	%cl, 17392(%rbp,%r8)
10123c10164
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10128,10131c10169,10172
< 	addq	$4, 608(%rsp)                   # 8-byte Folded Spill
< 	movq	616(%rsp), %rdx                 # 8-byte Reload
< 	jmp	.LBB11_415
< .LBB11_420:                             # %x264_mb_analyse_inter_b8x8.exit
---
> 	addq	$4, 592(%rsp)                   # 8-byte Folded Spill
> 	movq	600(%rsp), %rdx                 # 8-byte Reload
> 	jmp	.LBB11_418
> .LBB11_423:                             # %x264_mb_analyse_inter_b8x8.exit
10138,10141c10179,10182
< 	movl	%edx, %r14d
< 	cmovll	%ecx, %r14d
< 	movl	%r14d, 36(%rsp)
< 	movl	84(%rsp), %esi                  # 4-byte Reload
---
> 	movl	%edx, %r15d
> 	cmovll	%ecx, %r15d
> 	movl	%r15d, 36(%rsp)
> 	movl	92(%rsp), %esi                  # 4-byte Reload
10147c10188
< 	movl	%esi, 84(%rsp)                  # 4-byte Spill
---
> 	movl	%esi, 92(%rsp)                  # 4-byte Spill
10150c10191
< .LBB11_421:                             # %for.cond1277
---
> .LBB11_424:                             # %for.cond1277
10153,10155c10194,10196
< 	je	.LBB11_435
< # %bb.422:                              # %for.body1281
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> 	je	.LBB11_438
> # %bb.425:                              # %for.body1281
>                                         #   in Loop: Header=BB11_424 Depth=1
10168,10171c10209,10212
< 	jg	.LBB11_424
< # %bb.423:                              # %if.then1383
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$3, -13828(%rsp,%rsi)
---
> 	jg	.LBB11_427
> # %bb.426:                              # %if.then1383
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$3, -13820(%rsp,%rsi)
10173,10174c10214,10215
< .LBB11_424:                             # %if.end1387
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_427:                             # %if.end1387
>                                         #   in Loop: Header=BB11_424 Depth=1
10186,10189c10227,10230
< 	jge	.LBB11_426
< # %bb.425:                              # %if.then1391
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$7, -13828(%rsp,%rsi)
---
> 	jge	.LBB11_429
> # %bb.428:                              # %if.then1391
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$7, -13820(%rsp,%rsi)
10191,10192c10232,10233
< .LBB11_426:                             # %if.end1395
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_429:                             # %if.end1395
>                                         #   in Loop: Header=BB11_424 Depth=1
10198,10201c10239,10242
< 	jge	.LBB11_428
< # %bb.427:                              # %if.then1400
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$11, -13828(%rsp,%rsi)
---
> 	jge	.LBB11_431
> # %bb.430:                              # %if.then1400
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$11, -13820(%rsp,%rsi)
10203,10204c10244,10245
< .LBB11_428:                             # %if.end1405
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_431:                             # %if.end1405
>                                         #   in Loop: Header=BB11_424 Depth=1
10218,10221c10259,10262
< 	jg	.LBB11_430
< # %bb.429:                              # %if.then1496
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$3, -13836(%rsp,%rsi)
---
> 	jg	.LBB11_433
> # %bb.432:                              # %if.then1496
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$3, -13828(%rsp,%rsi)
10223,10224c10264,10265
< .LBB11_430:                             # %if.end1500
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_433:                             # %if.end1500
>                                         #   in Loop: Header=BB11_424 Depth=1
10236,10239c10277,10280
< 	jge	.LBB11_432
< # %bb.431:                              # %if.then1504
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$7, -13836(%rsp,%rsi)
---
> 	jge	.LBB11_435
> # %bb.434:                              # %if.then1504
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$7, -13828(%rsp,%rsi)
10241,10242c10282,10283
< .LBB11_432:                             # %if.end1508
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_435:                             # %if.end1508
>                                         #   in Loop: Header=BB11_424 Depth=1
10248,10251c10289,10292
< 	jge	.LBB11_434
< # %bb.433:                              # %if.then1513
<                                         #   in Loop: Header=BB11_421 Depth=1
< 	movl	$11, -13836(%rsp,%rsi)
---
> 	jge	.LBB11_437
> # %bb.436:                              # %if.then1513
>                                         #   in Loop: Header=BB11_424 Depth=1
> 	movl	$11, -13828(%rsp,%rsi)
10253,10254c10294,10295
< .LBB11_434:                             # %if.end1518
<                                         #   in Loop: Header=BB11_421 Depth=1
---
> .LBB11_437:                             # %if.end1518
>                                         #   in Loop: Header=BB11_424 Depth=1
10258,10259c10299,10300
< 	jmp	.LBB11_421
< .LBB11_435:                             # %for.cond.cleanup1280
---
> 	jmp	.LBB11_424
> .LBB11_438:                             # %for.cond.cleanup1280
10263,10264c10304,10305
< 	movl	216(%rsp), %ecx
< 	movl	220(%rsp), %edx
---
> 	movl	224(%rsp), %ecx
> 	movl	228(%rsp), %edx
10277,10279c10318,10320
< 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
< 	movl	208(%rsp), %ecx
< 	movl	212(%rsp), %edx
---
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
> 	movl	216(%rsp), %ecx
> 	movl	220(%rsp), %edx
10291c10332
< 	movl	%ecx, 160(%rsp)                 # 4-byte Spill
---
> 	movl	%ecx, 184(%rsp)                 # 4-byte Spill
10293,10297c10334,10338
< 	jge	.LBB11_439
< # %bb.436:                              # %for.cond.cleanup1280
< 	cmpl	%r14d, %edx
< 	jge	.LBB11_439
< # %bb.437:                              # %if.then1571
---
> 	jge	.LBB11_442
> # %bb.439:                              # %for.cond.cleanup1280
> 	cmpl	%r15d, %edx
> 	jge	.LBB11_442
> # %bb.440:                              # %if.then1571
10299c10340
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10301,10302c10342,10343
< 	movl	%edx, %ebp
< 	movl	%r14d, %edx
---
> 	movl	%edx, %r14d
> 	movl	%r15d, %edx
10304c10345
< 	movl	%ebp, %edx
---
> 	movl	%r14d, %edx
10306,10308c10347,10349
< 	cmpl	%r14d, %eax
< 	jge	.LBB11_439
< # %bb.438:                              # %if.then1574
---
> 	cmpl	%r15d, %eax
> 	jge	.LBB11_442
> # %bb.441:                              # %if.then1574
10314c10355
< 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
10316,10323c10357,10364
< 	movl	%ecx, 84(%rsp)                  # 4-byte Spill
< 	movl	%eax, %r14d
< .LBB11_439:                             # %if.end1577
< 	cmpl	%r14d, 160(%rsp)                # 4-byte Folded Reload
< 	jge	.LBB11_460
< # %bb.440:                              # %if.then1580
< 	movl	%edx, 224(%rsp)                 # 4-byte Spill
< 	movl	$15, 17388(%r15)
---
> 	movl	%ecx, 92(%rsp)                  # 4-byte Spill
> 	movl	%eax, %r15d
> .LBB11_442:                             # %if.end1577
> 	cmpl	%r15d, 184(%rsp)                # 4-byte Folded Reload
> 	jge	.LBB11_463
> # %bb.443:                              # %if.then1580
> 	movl	%edx, 176(%rsp)                 # 4-byte Spill
> 	movl	$15, 17388(%rbp)
10329c10370
< 	movq	%rcx, 128(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 112(%rsp)                 # 8-byte Spill
10332c10373
< 	movq	%rax, 184(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 200(%rsp)                 # 8-byte Spill
10334,10335c10375,10376
< 	movl	%r14d, 136(%rsp)                # 4-byte Spill
< .LBB11_441:                             # %for.cond.i3802
---
> 	movl	%r15d, 144(%rsp)                # 4-byte Spill
> .LBB11_444:                             # %for.cond.i3802
10337,10338c10378,10379
<                                         #     Child Loop BB11_443 Depth 2
<                                         #       Child Loop BB11_445 Depth 3
---
>                                         #     Child Loop BB11_446 Depth 2
>                                         #       Child Loop BB11_448 Depth 3
10340,10342c10381,10383
< 	je	.LBB11_453
< # %bb.442:                              # %for.body.i3803
<                                         #   in Loop: Header=BB11_441 Depth=1
---
> 	je	.LBB11_456
> # %bb.445:                              # %for.body.i3803
>                                         #   in Loop: Header=BB11_444 Depth=1
10344c10385
< 	movq	%rax, 520(%rsp)
---
> 	movq	%rax, 512(%rsp)
10348c10389
< 	movq	25008(%r15), %rax
---
> 	movq	25008(%rbp), %rax
10351c10392
< 	movq	21344(%r15), %rax
---
> 	movq	21344(%rbp), %rax
10355c10396
< 	movq	21352(%r15), %rax
---
> 	movq	21352(%rbp), %rax
10358c10399
< 	movq	21360(%r15), %rax
---
> 	movq	21360(%rbp), %rax
10364c10405
< 	movq	%rdx, 104(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 80(%rsp)                  # 8-byte Spill
10366c10407
< 	movq	%rdx, 96(%rsp)                  # 8-byte Spill
---
> 	movq	%rdx, 104(%rsp)                 # 8-byte Spill
10368,10370c10409
< 	movl	%edx, 112(%rsp)                 # 4-byte Spill
< 	movq	%rcx, 152(%rsp)                 # 8-byte Spill
< 	imulq	$144, %rcx, %rcx
---
> 	movl	%edx, 96(%rsp)                  # 4-byte Spill
10371a10411,10412
> 	imulq	$144, %rcx, %rcx
> 	movq	%rcx, 72(%rsp)                  # 8-byte Spill
10374c10415
< 	movq	%rcx, 40(%rsp)                  # 8-byte Spill
---
> 	movq	%rcx, 56(%rsp)                  # 8-byte Spill
10376c10417
< 	movq	%rax, 88(%rsp)                  # 8-byte Spill
---
> 	movq	%rax, 128(%rsp)                 # 8-byte Spill
10378,10379c10419,10420
< .LBB11_443:                             # %for.cond38.i
<                                         #   Parent Loop BB11_441 Depth=1
---
> .LBB11_446:                             # %for.cond38.i
>                                         #   Parent Loop BB11_444 Depth=1
10381c10422
<                                         #       Child Loop BB11_445 Depth 3
---
>                                         #       Child Loop BB11_448 Depth 3
10383,10385c10424,10426
< 	je	.LBB11_450
< # %bb.444:                              # %for.body41.i
<                                         #   in Loop: Header=BB11_443 Depth=2
---
> 	je	.LBB11_453
> # %bb.447:                              # %for.body41.i
>                                         #   in Loop: Header=BB11_446 Depth=2
10393,10394c10434,10435
< 	movq	%r14, 56(%rsp)                  # 8-byte Spill
< 	movq	40(%rsp), %rsi                  # 8-byte Reload
---
> 	movq	%r14, 64(%rsp)                  # 8-byte Spill
> 	movq	56(%rsp), %rsi                  # 8-byte Reload
10402,10403c10443,10444
< 	movq	%r8, 72(%rsp)                   # 8-byte Spill
< 	movq	120(%rsp), %rax                 # 8-byte Reload
---
> 	movq	%r8, 136(%rsp)                  # 8-byte Spill
> 	movq	72(%rsp), %rax                  # 8-byte Reload
10405,10406c10446,10447
< 	movl	%eax, 592(%rsp)
< 	movq	88(%rsp), %rdx                  # 8-byte Reload
---
> 	movl	%eax, 576(%rsp)
> 	movq	128(%rsp), %rdx                 # 8-byte Reload
10408c10449
< 	movl	%ecx, 596(%rsp)
---
> 	movl	%ecx, 580(%rsp)
10413,10414c10454,10455
< 	movq	%rdx, 64(%rsp)                  # 8-byte Spill
< 	movq	%rdi, 48(%rsp)                  # 8-byte Spill
---
> 	movq	%rdx, 48(%rsp)                  # 8-byte Spill
> 	movq	%rdi, 40(%rsp)                  # 8-byte Spill
10417,10419c10458,10460
< .LBB11_445:                             # %for.cond55.i
<                                         #   Parent Loop BB11_441 Depth=1
<                                         #     Parent Loop BB11_443 Depth=2
---
> .LBB11_448:                             # %for.cond55.i
>                                         #   Parent Loop BB11_444 Depth=1
>                                         #     Parent Loop BB11_446 Depth=2
10421,10425c10462,10466
< 	cmpq	%rbp, 64(%rsp)                  # 8-byte Folded Reload
< 	je	.LBB11_449
< # %bb.446:                              # %for.body58.i
<                                         #   in Loop: Header=BB11_445 Depth=3
< 	movslq	592(%rsp,%rbp,4), %rax
---
> 	cmpq	%rbp, 48(%rsp)                  # 8-byte Folded Reload
> 	je	.LBB11_452
> # %bb.449:                              # %for.body58.i
>                                         #   in Loop: Header=BB11_448 Depth=3
> 	movslq	576(%rsp,%rbp,4), %rax
10430c10471
< 	addq	192(%rsp), %rcx                 # 8-byte Folded Reload
---
> 	addq	208(%rsp), %rcx                 # 8-byte Folded Reload
10453c10494
< 	addq	200(%rsp), %rcx                 # 8-byte Folded Reload
---
> 	addq	168(%rsp), %rcx                 # 8-byte Folded Reload
10461c10502
< 	movq	56(%rsp), %rsi                  # 8-byte Reload
---
> 	movq	64(%rsp), %rsi                  # 8-byte Reload
10464,10465c10505,10506
< 	movl	%ecx, 624(%rsp)
< 	movq	104(%rsp), %rcx                 # 8-byte Reload
---
> 	movl	%ecx, 608(%rsp)
> 	movq	80(%rsp), %rcx                  # 8-byte Reload
10467,10468c10508,10509
< 	movl	%ecx, 628(%rsp)
< 	movq	96(%rsp), %rcx                  # 8-byte Reload
---
> 	movl	%ecx, 612(%rsp)
> 	movq	104(%rsp), %rcx                 # 8-byte Reload
10470c10511
< 	movl	%ecx, 632(%rsp)
---
> 	movl	%ecx, 616(%rsp)
10475c10516
< 	movl	112(%rsp), %esi                 # 4-byte Reload
---
> 	movl	96(%rsp), %esi                  # 4-byte Reload
10492c10533
< 	movq	128(%rsp), %r8                  # 8-byte Reload
---
> 	movq	112(%rsp), %r8                  # 8-byte Reload
10496c10537
< 	leaq	624(%rsp), %rdx
---
> 	leaq	608(%rsp), %rdx
10506,10507c10547,10548
< 	movq	40(%rsp), %rcx                  # 8-byte Reload
< 	movq	48(%rsp), %rdx                  # 8-byte Reload
---
> 	movq	56(%rsp), %rcx                  # 8-byte Reload
> 	movq	40(%rsp), %rdx                  # 8-byte Reload
10509,10511c10550,10552
< 	jge	.LBB11_448
< # %bb.447:                              # %if.then.i3834
<                                         #   in Loop: Header=BB11_445 Depth=3
---
> 	jge	.LBB11_451
> # %bb.450:                              # %if.then.i3834
>                                         #   in Loop: Header=BB11_448 Depth=3
10513c10554
< 	movq	72(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	136(%rsp), %rdi                 # 8-byte Reload
10517,10518c10558,10559
< .LBB11_448:                             # %if.end.i3832
<                                         #   in Loop: Header=BB11_445 Depth=3
---
> .LBB11_451:                             # %if.end.i3832
>                                         #   in Loop: Header=BB11_448 Depth=3
10520,10522c10561,10563
< 	jmp	.LBB11_445
< .LBB11_449:                             # %for.cond.cleanup57.i
<                                         #   in Loop: Header=BB11_443 Depth=2
---
> 	jmp	.LBB11_448
> .LBB11_452:                             # %for.cond.cleanup57.i
>                                         #   in Loop: Header=BB11_446 Depth=2
10524,10526c10565,10568
< 	jmp	.LBB11_443
< .LBB11_450:                             # %for.cond.cleanup40.i
<                                         #   in Loop: Header=BB11_441 Depth=1
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	jmp	.LBB11_446
> .LBB11_453:                             # %for.cond.cleanup40.i
>                                         #   in Loop: Header=BB11_444 Depth=1
10528c10570
< 	movq	120(%rsp), %r15                 # 8-byte Reload
---
> 	movq	72(%rsp), %r15                  # 8-byte Reload
10538c10580
< 	popq	%r13
---
> 	popq	%r12
10540c10582
< 	movl	%r13d, 8(%rsp)
---
> 	movl	%r12d, 8(%rsp)
10543c10585
< 	popq	%rbp
---
> 	popq	%r13
10545c10587
< 	movl	%ebp, (%rsp)
---
> 	movl	%r13d, (%rsp)
10547c10589
< 	leaq	520(%rsp), %rsi
---
> 	leaq	512(%rsp), %rsi
10549,10551c10591,10592
< 	movq	24(%rsp), %r12                  # 8-byte Reload
< 	callq	*32624(%r12)
< 	movq	%rax, %rbp
---
> 	callq	*32624(%rbp)
> 	movq	%rax, %r13
10559c10600
< 	movl	%r13d, 8(%rsp)
---
> 	movl	%r12d, 8(%rsp)
10562c10603
< 	popq	%r13
---
> 	popq	%r15
10564,10566c10605,10607
< 	movl	%r13d, (%rsp)
< 	movq	184(%rsp), %rdi                 # 8-byte Reload
< 	leaq	524(%rsp), %rsi
---
> 	movl	%r15d, (%rsp)
> 	movq	200(%rsp), %rdi                 # 8-byte Reload
> 	leaq	516(%rsp), %rsi
10568,10570c10609,10611
< 	callq	*32624(%r12)
< 	movl	520(%rsp), %ecx
< 	movl	524(%rsp), %r9d
---
> 	callq	*32624(%rbp)
> 	movl	512(%rsp), %ecx
> 	movl	516(%rsp), %r9d
10574c10615
< 	addq	26624(%r12), %rdx
---
> 	addq	26624(%rbp), %rdx
10577,10580c10618,10621
< 	leaq	240(%rsp), %rdi
< 	movl	%r13d, %esi
< 	movq	%rbp, %rdx
< 	movq	%r12, %r15
---
> 	leaq	240(%rsp), %r12
> 	movq	%r12, %rdi
> 	movl	%r15d, %esi
> 	movq	%r13, %rdx
10582c10623
< 	callq	*32656(%r12)
---
> 	callq	*32656(%rbp)
10588,10590c10629,10631
< 	leaq	240(%rsp), %rdx
< 	movl	%r13d, %ecx
< 	callq	*31832(%r12)
---
> 	movq	%r12, %rdx
> 	movl	%r15d, %ecx
> 	callq	*31832(%rbp)
10596c10637
< 	movq	152(%rsp), %r8                  # 8-byte Reload
---
> 	movq	120(%rsp), %r8                  # 8-byte Reload
10616,10619c10657,10660
< 	movl	136(%rsp), %r14d                # 4-byte Reload
< 	jne	.LBB11_452
< # %bb.451:                              # %land.lhs.true.i3844
<                                         #   in Loop: Header=BB11_441 Depth=1
---
> 	movl	144(%rsp), %r15d                # 4-byte Reload
> 	jne	.LBB11_455
> # %bb.454:                              # %land.lhs.true.i3844
>                                         #   in Loop: Header=BB11_444 Depth=1
10622c10663
< 	cmpl	$0, 16428(%r15)
---
> 	cmpl	$0, 16428(%rbp)
10627c10668
< 	imull	%r14d, %eax
---
> 	imull	%r15d, %eax
10635,10638c10676,10679
< 	jg	.LBB11_457
< .LBB11_452:                             # %if.end402.i
<                                         #   in Loop: Header=BB11_441 Depth=1
< 	movq	%r15, %rdi
---
> 	jg	.LBB11_460
> .LBB11_455:                             # %if.end402.i
>                                         #   in Loop: Header=BB11_444 Depth=1
> 	movq	%rbp, %rdi
10643,10645c10684,10686
< 	movq	104(%rsp), %rcx                 # 8-byte Reload
< 	jmp	.LBB11_441
< .LBB11_453:                             # %for.end411.i
---
> 	movq	80(%rsp), %rcx                  # 8-byte Reload
> 	jmp	.LBB11_444
> .LBB11_456:                             # %for.end411.i
10660,10661c10701,10702
< 	jmp	.LBB11_458
< .LBB11_454:                             # %if.then825
---
> 	jmp	.LBB11_461
> .LBB11_457:                             # %if.then825
10663c10704
< 	movl	$50529027, 17392(%r15)          # imm = 0x3030303
---
> 	movl	$50529027, 17392(%r13)          # imm = 0x3030303
10665c10706
< 	leaq	25132(%r15), %rdi
---
> 	leaq	25132(%r13), %rdi
10674d10714
< 	movq	%r15, %r13
10700,10701c10740,10741
< 	jmp	.LBB11_532
< .LBB11_455:                             # %if.then779
---
> 	jmp	.LBB11_534
> .LBB11_458:                             # %if.then779
10703c10743
< 	leaq	25132(%r15), %rdi
---
> 	leaq	25132(%r13), %rdi
10714c10754
< 	movl	%r13d, 1656(%rsp)
---
> 	movl	%ebx, 1656(%rsp)
10716,10718c10756,10758
< 	movq	%r15, %rdi
< 	jmp	.LBB11_531
< .LBB11_456:                             # %if.then791
---
> 	movq	%r13, %rdi
> 	jmp	.LBB11_533
> .LBB11_459:                             # %if.then791
10720c10760
< 	movl	$50529027, 17392(%r15)          # imm = 0x3030303
---
> 	movl	$50529027, 17392(%r13)          # imm = 0x3030303
10723,10724c10763,10764
< 	movl	%eax, 25132(%r15)
< 	movl	%eax, 25140(%r15)
---
> 	movl	%eax, 25132(%r13)
> 	movl	%eax, 25140(%r13)
10728,10729c10768,10769
< 	movl	%eax, 25148(%r15)
< 	movl	%eax, 25156(%r15)
---
> 	movl	%eax, 25148(%r13)
> 	movl	%eax, 25156(%r13)
10731c10771
< 	movq	%r15, %rdi
---
> 	movq	%r13, %rdi
10740c10780
< 	movq	%r15, %rdi
---
> 	movq	%r13, %rdi
10742,10743c10782,10783
< 	jmp	.LBB11_532
< .LBB11_457:                             # %if.then400.i
---
> 	jmp	.LBB11_534
> .LBB11_460:                             # %if.then400.i
10746,10750c10786,10790
< .LBB11_458:                             # %x264_mb_analyse_inter_b8x16.exit
< 	cmpl	%r14d, %eax
< 	movl	224(%rsp), %edx                 # 4-byte Reload
< 	jge	.LBB11_460
< # %bb.459:                              # %if.then1583
---
> .LBB11_461:                             # %x264_mb_analyse_inter_b8x16.exit
> 	cmpl	%r15d, %eax
> 	movl	176(%rsp), %edx                 # 4-byte Reload
> 	jge	.LBB11_463
> # %bb.462:                              # %if.then1583
10753,10754c10793,10794
< 	movl	%ecx, 84(%rsp)                  # 4-byte Spill
< 	movl	%eax, %r14d
---
> 	movl	%ecx, 92(%rsp)                  # 4-byte Spill
> 	movl	%eax, %r15d
10760,10762c10800,10802
< 	movq	%rax, 144(%rsp)                 # 8-byte Spill
< .LBB11_460:                             # %if.end1586
< 	cmpl	%r14d, %edx
---
> 	movq	%rax, 160(%rsp)                 # 8-byte Spill
> .LBB11_463:                             # %if.end1586
> 	cmpl	%r15d, %edx
10764,10765c10804,10805
< # %bb.461:                              # %if.end1586
< 	cmpl	160(%rsp), %edx                 # 4-byte Folded Reload
---
> # %bb.464:                              # %if.end1586
> 	cmpl	184(%rsp), %edx                 # 4-byte Folded Reload
10767c10807
< # %bb.462:                              # %if.then1591
---
> # %bb.465:                              # %if.then1591
10769c10809
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10771c10811
< 	movl	%r14d, %edx
---
> 	movl	%r15d, %edx
10774c10814
< 	cmpl	%r14d, %eax
---
> 	cmpl	%r15d, %eax
10776c10816
< # %bb.463:                              # %if.then1595
---
> # %bb.466:                              # %if.then1595
10779,10780c10819,10820
< 	movl	%ecx, 84(%rsp)                  # 4-byte Spill
< 	movl	%eax, %r14d
---
> 	movl	%ecx, 92(%rsp)                  # 4-byte Spill
> 	movl	%eax, %r15d
10786c10826
< 	movq	%rax, 144(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 160(%rsp)                 # 8-byte Spill
10788,10789c10828
< .LBB11_464:                             # %for.cond1701.preheader
< 	movl	%r14d, %ebp
---
> .LBB11_467:                             # %for.cond1701.preheader
10792c10831
< .LBB11_465:                             # %for.cond1701
---
> .LBB11_468:                             # %for.cond1701
10795,10797c10834,10836
< 	je	.LBB11_480
< # %bb.466:                              # %for.body1705
<                                         #   in Loop: Header=BB11_465 Depth=1
---
> 	je	.LBB11_487
> # %bb.469:                              # %for.body1705
>                                         #   in Loop: Header=BB11_468 Depth=1
10799,10801c10838,10840
< 	je	.LBB11_468
< # %bb.467:                              # %if.end1715
<                                         #   in Loop: Header=BB11_465 Depth=1
---
> 	je	.LBB11_471
> # %bb.470:                              # %if.end1715
>                                         #   in Loop: Header=BB11_468 Depth=1
10803c10842
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10806,10809c10845,10848
< 	je	.LBB11_469
< .LBB11_468:                             # %if.then1721
<                                         #   in Loop: Header=BB11_465 Depth=1
< 	movq	%r15, %rdi
---
> 	je	.LBB11_472
> .LBB11_471:                             # %if.then1721
>                                         #   in Loop: Header=BB11_468 Depth=1
> 	movq	%rbp, %rdi
10812,10813c10851,10852
< .LBB11_469:                             # %for.inc1727
<                                         #   in Loop: Header=BB11_465 Depth=1
---
> .LBB11_472:                             # %for.inc1727
>                                         #   in Loop: Header=BB11_468 Depth=1
10816,10817c10855,10856
< 	jmp	.LBB11_465
< .LBB11_470:                             # %if.then1611
---
> 	jmp	.LBB11_468
> .LBB11_473:                             # %if.then1611
10821c10860
< 	movl	84(%rsp), %eax                  # 4-byte Reload
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
10823,10824c10862,10863
< 	je	.LBB11_484
< # %bb.471:                              # %if.then1611
---
> 	je	.LBB11_486
> # %bb.474:                              # %if.then1611
10826,10827c10865,10866
< 	je	.LBB11_482
< # %bb.472:                              # %if.then1611
---
> 	je	.LBB11_484
> # %bb.475:                              # %if.then1611
10829,10831c10868,10870
< 	jne	.LBB11_486
< # %bb.473:                              # %if.then1628
< 	movq	%r15, %rdi
---
> 	jne	.LBB11_488
> # %bb.476:                              # %if.then1628
> 	movq	%rbp, %rdi
10834,10839c10873,10877
< 	movl	84(%rsp), %eax                  # 4-byte Reload
< 	imull	$3, 1088(%rsp), %r14d
< 	addl	1656(%rsp), %r14d
< 	jmp	.LBB11_483
< .LBB11_474:                             # %for.cond1666.preheader
< 	movl	%r14d, %ebp
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
> 	imull	$3, 1088(%rsp), %r15d
> 	addl	1656(%rsp), %r15d
> 	jmp	.LBB11_485
> .LBB11_477:                             # %for.cond1666.preheader
10842c10880
< .LBB11_475:                             # %for.cond1666
---
> .LBB11_478:                             # %for.cond1666
10845,10847c10883,10885
< 	je	.LBB11_480
< # %bb.476:                              # %for.body1670
<                                         #   in Loop: Header=BB11_475 Depth=1
---
> 	je	.LBB11_487
> # %bb.479:                              # %for.body1670
>                                         #   in Loop: Header=BB11_478 Depth=1
10849,10851c10887,10889
< 	je	.LBB11_478
< # %bb.477:                              # %if.end1680
<                                         #   in Loop: Header=BB11_475 Depth=1
---
> 	je	.LBB11_481
> # %bb.480:                              # %if.end1680
>                                         #   in Loop: Header=BB11_478 Depth=1
10853c10891
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10856,10859c10894,10897
< 	je	.LBB11_479
< .LBB11_478:                             # %if.then1686
<                                         #   in Loop: Header=BB11_475 Depth=1
< 	movq	%r15, %rdi
---
> 	je	.LBB11_482
> .LBB11_481:                             # %if.then1686
>                                         #   in Loop: Header=BB11_478 Depth=1
> 	movq	%rbp, %rdi
10862,10863c10900,10901
< .LBB11_479:                             # %for.inc1692
<                                         #   in Loop: Header=BB11_475 Depth=1
---
> .LBB11_482:                             # %for.inc1692
>                                         #   in Loop: Header=BB11_478 Depth=1
10866,10875c10904,10909
< 	jmp	.LBB11_475
< .LBB11_480:
< 	movl	84(%rsp), %eax                  # 4-byte Reload
< 	movl	%ebp, %r14d
< 	jmp	.LBB11_486
< .LBB11_481:
< 	movl	%r13d, %r14d
< 	jmp	.LBB11_486
< .LBB11_482:                             # %if.then1641
< 	movq	%r15, %rdi
---
> 	jmp	.LBB11_478
> .LBB11_483:
> 	movl	%r13d, %r15d
> 	jmp	.LBB11_488
> .LBB11_484:                             # %if.then1641
> 	movq	%rbp, %rdi
10878,10884c10912,10918
< 	movl	84(%rsp), %eax                  # 4-byte Reload
< 	imull	$3, 1088(%rsp), %r14d
< 	addl	8456(%rsp), %r14d
< .LBB11_483:                             # %if.end1813
< 	movl	%r14d, 36(%rsp)
< 	jmp	.LBB11_486
< .LBB11_484:                             # %if.then1654
---
> 	movl	92(%rsp), %eax                  # 4-byte Reload
> 	imull	$3, 1088(%rsp), %r15d
> 	addl	8456(%rsp), %r15d
> .LBB11_485:                             # %if.end1813
> 	movl	%r15d, 36(%rsp)
> 	jmp	.LBB11_488
> .LBB11_486:                             # %if.then1654
10886c10920
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10889c10923
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
10891,10894c10925,10928
< .LBB11_485:
< 	movl	84(%rsp), %eax                  # 4-byte Reload
< .LBB11_486:                             # %if.end1813
< 	movl	%r14d, 236(%rsp)
---
> .LBB11_487:
> 	movl	92(%rsp), %eax                  # 4-byte Reload
> .LBB11_488:                             # %if.end1813
> 	movl	%r15d, 236(%rsp)
10896,10898c10930,10933
< 	movl	%r14d, %ebp
< 	je	.LBB11_490
< .LBB11_487:                             # %if.then1816
---
> 	movq	%rbp, %r13
> 	movl	%r15d, %ebp
> 	je	.LBB11_492
> .LBB11_489:                             # %if.then1816
10900c10935
< 	movq	%r15, %rdi
---
> 	movq	%r13, %rdi
10902c10937
< 	movl	%r14d, %edx
---
> 	movl	%r15d, %edx
10905c10940
< 	movl	172(%rsp), %ebp                 # 4-byte Reload
---
> 	movl	156(%rsp), %ebp                 # 4-byte Reload
10945,10946c10980,10981
< 	jge	.LBB11_489
< # %bb.488:                              # %if.then1816
---
> 	jge	.LBB11_491
> # %bb.490:                              # %if.then1816
10949c10984
< .LBB11_489:                             # %if.then1816
---
> .LBB11_491:                             # %if.then1816
10975,10977c11010,11012
< 	movl	%esi, 17384(%r15)
< 	movq	%rcx, 144(%rsp)                 # 8-byte Spill
< 	movl	%ecx, 17388(%r15)
---
> 	movl	%esi, 17384(%r13)
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
> 	movl	%ecx, 17388(%r13)
10979,10980c11014,11015
< .LBB11_490:                             # %if.end1866
< 	movl	%eax, %r13d
---
> .LBB11_492:                             # %if.end1866
> 	movl	%eax, %r12d
10982c11017
< 	movq	%r15, %rdi
---
> 	movq	%r13, %rdi
10984c11019
< 	movl	%r14d, %edx
---
> 	movl	%r15d, %edx
10986c11021
< 	xorl	%r12d, %r12d
---
> 	xorl	%edx, %edx
10989,10990c11024,11025
< 	je	.LBB11_492
< # %bb.491:                              # %if.then1869
---
> 	je	.LBB11_494
> # %bb.493:                              # %if.then1869
10994c11029
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
11006c11041
< 	movq	24(%rsp), %rdi                  # 8-byte Reload
---
> 	movq	%r13, %rdi
11009a11045
> 	xorl	%edx, %edx
11011d11046
< 	movq	24(%rsp), %r15                  # 8-byte Reload
11013c11048
< .LBB11_492:                             # %if.end1872
---
> .LBB11_494:                             # %if.end1872
11021c11056
< 	cmovll	%ecx, %r13d
---
> 	cmovll	%ecx, %r12d
11029c11064
< 	cmovgel	%r13d, %r14d
---
> 	cmovgel	%r12d, %r14d
11033c11068
< 	cmovll	%r12d, %r14d
---
> 	cmovll	%edx, %r14d
11043,11045c11078,11080
< 	movl	%r14d, 17384(%r15)
< 	movq	144(%rsp), %rcx                 # 8-byte Reload
< 	movl	%ecx, 17388(%r15)
---
> 	movl	%r14d, 17384(%r13)
> 	movq	160(%rsp), %rcx                 # 8-byte Reload
> 	movl	%ecx, 17388(%r13)
11047,11048c11082,11083
< 	jl	.LBB11_495
< # %bb.493:                              # %if.end1872
---
> 	jl	.LBB11_497
> # %bb.495:                              # %if.end1872
11050,11051c11085,11086
< 	ja	.LBB11_495
< # %bb.494:                              # %if.then1919
---
> 	ja	.LBB11_497
> # %bb.496:                              # %if.then1919
11053c11088
< 	movq	%r15, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
11055,11058c11090,11094
< .LBB11_495:                             # %if.end1920
< 	cmpl	$5, 16408(%r15)
< 	jl	.LBB11_497
< # %bb.496:                              # %if.then1925
---
> .LBB11_497:                             # %if.end1920
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	cmpl	$5, 16408(%rax)
> 	jl	.LBB11_499
> # %bb.498:                              # %if.then1925
11062,11063c11098,11099
< 	jae	.LBB11_510
< .LBB11_497:                             # %if.end1926
---
> 	jae	.LBB11_512
> .LBB11_499:                             # %if.end1926
11065,11066c11101,11102
< 	jl	.LBB11_534
< # %bb.498:                              # %if.end1926
---
> 	jl	.LBB11_536
> # %bb.500:                              # %if.end1926
11069,11070c11105,11106
< 	ja	.LBB11_534
< # %bb.499:                              # %if.then1936
---
> 	ja	.LBB11_536
> # %bb.501:                              # %if.then1936
11072,11073c11108
< 	movq	24(%rsp), %rbx                  # 8-byte Reload
< 	movq	%rbx, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
11075c11110
< 	movq	144(%rsp), %rax                 # 8-byte Reload
---
> 	movq	160(%rsp), %rax                 # 8-byte Reload
11078c11113
< .LBB11_500:                             # %for.cond2167.preheader
---
> .LBB11_502:                             # %for.cond2167.preheader
11086c11121
< .LBB11_501:                             # %for.cond2167
---
> .LBB11_503:                             # %for.cond2167
11089,11091c11124,11126
< 	je	.LBB11_534
< # %bb.502:                              # %for.body2171
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	je	.LBB11_536
> # %bb.504:                              # %for.body2171
>                                         #   in Loop: Header=BB11_503 Depth=1
11099,11101c11134,11136
< 	je	.LBB11_508
< # %bb.503:                              # %for.body2171
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	je	.LBB11_510
> # %bb.505:                              # %for.body2171
>                                         #   in Loop: Header=BB11_503 Depth=1
11103,11105c11138,11140
< 	je	.LBB11_507
< # %bb.504:                              # %for.body2171
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	je	.LBB11_509
> # %bb.506:                              # %for.body2171
>                                         #   in Loop: Header=BB11_503 Depth=1
11107,11109c11142,11144
< 	jne	.LBB11_509
< # %bb.505:                              # %if.then2179
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	jne	.LBB11_511
> # %bb.507:                              # %if.then2179
>                                         #   in Loop: Header=BB11_503 Depth=1
11114,11116c11149,11151
< 	jmp	.LBB11_506
< .LBB11_507:                             # %if.then2194
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	jmp	.LBB11_508
> .LBB11_509:                             # %if.then2194
>                                         #   in Loop: Header=BB11_503 Depth=1
11123,11124c11158,11159
< .LBB11_506:                             # %for.inc2239
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> .LBB11_508:                             # %for.inc2239
>                                         #   in Loop: Header=BB11_503 Depth=1
11126,11128c11161,11163
< 	jmp	.LBB11_509
< .LBB11_508:                             # %if.then2209
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> 	jmp	.LBB11_511
> .LBB11_510:                             # %if.then2209
>                                         #   in Loop: Header=BB11_503 Depth=1
11138,11139c11173,11174
< .LBB11_509:                             # %for.inc2239
<                                         #   in Loop: Header=BB11_501 Depth=1
---
> .LBB11_511:                             # %for.inc2239
>                                         #   in Loop: Header=BB11_503 Depth=1
11143,11144c11178,11179
< 	jmp	.LBB11_501
< .LBB11_510:                             # %if.end.i3849
---
> 	jmp	.LBB11_503
> .LBB11_512:                             # %if.end.i3849
11149,11150c11184,11185
< 	ja	.LBB11_497
< # %bb.511:                              # %if.end.i3849
---
> 	ja	.LBB11_499
> # %bb.513:                              # %if.end.i3849
11152c11187
< .LBB11_512:                             # %for.cond102.preheader.i
---
> .LBB11_514:                             # %for.cond102.preheader.i
11155c11190
< .LBB11_513:                             # %for.cond102.i
---
> .LBB11_515:                             # %for.cond102.i
11158,11160c11193,11195
< 	je	.LBB11_497
< # %bb.514:                              # %for.body106.i
<                                         #   in Loop: Header=BB11_513 Depth=1
---
> 	je	.LBB11_499
> # %bb.516:                              # %for.body106.i
>                                         #   in Loop: Header=BB11_515 Depth=1
11163,11165c11198,11200
< 	jne	.LBB11_516
< # %bb.515:                              # %if.then113.i
<                                         #   in Loop: Header=BB11_513 Depth=1
---
> 	jne	.LBB11_518
> # %bb.517:                              # %if.then113.i
>                                         #   in Loop: Header=BB11_515 Depth=1
11175,11176c11210,11211
< .LBB11_516:                             # %for.inc139.i
<                                         #   in Loop: Header=BB11_513 Depth=1
---
> .LBB11_518:                             # %for.inc139.i
>                                         #   in Loop: Header=BB11_515 Depth=1
11179,11180c11214,11215
< 	jmp	.LBB11_513
< .LBB11_517:                             # %for.cond2079.preheader
---
> 	jmp	.LBB11_515
> .LBB11_519:                             # %for.cond2079.preheader
11189c11224
< .LBB11_518:                             # %for.cond2079
---
> .LBB11_520:                             # %for.cond2079
11192,11194c11227,11229
< 	je	.LBB11_534
< # %bb.519:                              # %for.body2083
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	je	.LBB11_536
> # %bb.521:                              # %for.body2083
>                                         #   in Loop: Header=BB11_520 Depth=1
11202,11204c11237,11239
< 	je	.LBB11_525
< # %bb.520:                              # %for.body2083
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	je	.LBB11_527
> # %bb.522:                              # %for.body2083
>                                         #   in Loop: Header=BB11_520 Depth=1
11206,11208c11241,11243
< 	je	.LBB11_524
< # %bb.521:                              # %for.body2083
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	je	.LBB11_526
> # %bb.523:                              # %for.body2083
>                                         #   in Loop: Header=BB11_520 Depth=1
11210,11212c11245,11247
< 	jne	.LBB11_526
< # %bb.522:                              # %if.then2102
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	jne	.LBB11_528
> # %bb.524:                              # %if.then2102
>                                         #   in Loop: Header=BB11_520 Depth=1
11217,11219c11252,11254
< 	jmp	.LBB11_523
< .LBB11_524:                             # %if.then2115
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	jmp	.LBB11_525
> .LBB11_526:                             # %if.then2115
>                                         #   in Loop: Header=BB11_520 Depth=1
11225,11226c11260,11261
< .LBB11_523:                             # %for.inc2158
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> .LBB11_525:                             # %for.inc2158
>                                         #   in Loop: Header=BB11_520 Depth=1
11228,11230c11263,11265
< 	jmp	.LBB11_526
< .LBB11_525:                             # %if.then2128
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> 	jmp	.LBB11_528
> .LBB11_527:                             # %if.then2128
>                                         #   in Loop: Header=BB11_520 Depth=1
11241,11242c11276,11277
< .LBB11_526:                             # %for.inc2158
<                                         #   in Loop: Header=BB11_518 Depth=1
---
> .LBB11_528:                             # %for.inc2158
>                                         #   in Loop: Header=BB11_520 Depth=1
11246,11247c11281,11282
< 	jmp	.LBB11_518
< .LBB11_527:                             # %if.then1939
---
> 	jmp	.LBB11_520
> .LBB11_529:                             # %if.then1939
11249,11250c11284,11285
< 	je	.LBB11_614
< # %bb.528:                              # %if.then1939
---
> 	je	.LBB11_616
> # %bb.530:                              # %if.then1939
11252,11253c11287,11288
< 	je	.LBB11_613
< # %bb.529:                              # %if.then1939
---
> 	je	.LBB11_615
> # %bb.531:                              # %if.then1939
11255,11256c11290,11291
< 	jne	.LBB11_534
< # %bb.530:                              # %if.then1942
---
> 	jne	.LBB11_536
> # %bb.532:                              # %if.then1942
11260c11295
< .LBB11_531:                             # %cleanup.thread
---
> .LBB11_533:                             # %cleanup.thread
11263c11298
< .LBB11_532:                             # %cleanup.thread
---
> .LBB11_534:                             # %cleanup.thread
11265c11300
< .LBB11_533:                             # %cleanup.thread
---
> .LBB11_535:                             # %cleanup.thread
11267,11269c11302,11304
< .LBB11_534:                             # %cleanup.thread
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< .LBB11_535:                             # %if.end2261
---
> .LBB11_536:                             # %cleanup.thread
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> .LBB11_537:                             # %if.end2261
11271c11306
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
11276,11278c11311,11313
< 	jl	.LBB11_541
< # %bb.536:                              # %if.then2265
< 	movslq	17384(%r15), %rcx
---
> 	jl	.LBB11_543
> # %bb.538:                              # %if.then2265
> 	movslq	17384(%rbp), %rcx
11281,11285c11316,11320
< 	jb	.LBB11_546
< # %bb.537:                              # %land.lhs.true2274
< 	cmpl	$16, 17388(%r15)
< 	je	.LBB11_546
< # %bb.538:                              # %land.lhs.true2279
---
> 	jb	.LBB11_548
> # %bb.539:                              # %land.lhs.true2274
> 	cmpl	$16, 17388(%rbp)
> 	je	.LBB11_548
> # %bb.540:                              # %land.lhs.true2279
11291,11294c11326,11329
< 	movl	25248(%r15,%rdx), %esi
< 	cmpl	25320(%r15,%rdx), %esi
< 	jne	.LBB11_546
< # %bb.539:                              # %land.lhs.true2295
---
> 	movl	25248(%rbp,%rdx), %esi
> 	cmpl	25320(%rbp,%rdx), %esi
> 	jne	.LBB11_548
> # %bb.541:                              # %land.lhs.true2295
11296,11302c11331,11337
< 	movb	25132(%r15,%rcx), %dl
< 	cmpb	25150(%r15,%rcx), %dl
< 	jne	.LBB11_546
< # %bb.540:                              # %if.then2313
< 	movl	$16, 17388(%r15)
< 	jmp	.LBB11_546
< .LBB11_541:                             # %if.end2317
---
> 	movb	25132(%rbp,%rcx), %dl
> 	cmpb	25150(%rbp,%rcx), %dl
> 	jne	.LBB11_548
> # %bb.542:                              # %if.then2313
> 	movl	$16, 17388(%rbp)
> 	jmp	.LBB11_548
> .LBB11_543:                             # %if.end2317
11304,11306c11339,11341
< 	jne	.LBB11_583
< # %bb.542:                              # %if.then2320
< 	movq	%r15, %rdi
---
> 	jne	.LBB11_585
> # %bb.544:                              # %if.then2320
> 	movq	%rbp, %rdi
11309,11317c11344,11352
< 	je	.LBB11_583
< # %bb.543:                              # %land.lhs.true.i3885
< 	cmpl	$0, 392(%r15)
< 	je	.LBB11_583
< # %bb.544:                              # %land.lhs.true2.i
< 	cmpl	$0, 25812(%r15)
< 	jne	.LBB11_583
< # %bb.545:                              # %if.then.i3889
< 	movq	%r15, %rdi
---
> 	je	.LBB11_585
> # %bb.545:                              # %land.lhs.true.i3885
> 	cmpl	$0, 392(%rbp)
> 	je	.LBB11_585
> # %bb.546:                              # %land.lhs.true2.i
> 	cmpl	$0, 25812(%rbp)
> 	jne	.LBB11_585
> # %bb.547:                              # %if.then.i3889
> 	movq	%rbp, %rdi
11319,11320c11354,11355
< 	movq	21344(%r15), %rdi
< 	movq	21392(%r15), %rdx
---
> 	movq	21344(%rbp), %rdi
> 	movq	21392(%rbp), %rdx
11331c11366,11367
< 	callq	*31784(%r15)
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	callq	*31784(%rax)
11333,11334c11369,11372
< 	movq	21344(%r15), %rdi
< 	movq	21392(%r15), %rdx
---
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	movq	21344(%rax), %rdi
> 	movq	24(%rsp), %rax                  # 8-byte Reload
> 	movq	21392(%rax), %rdx
11337c11375,11376
< 	callq	*31672(%r15)
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	callq	*31672(%rbp)
11341,11342c11380,11381
< 	movl	%ecx, 17396(%r15)
< 	movl	$1, 17420(%r15)
---
> 	movl	%ecx, 17396(%rbp)
> 	movl	$1, 17420(%rbp)
11344c11383
< .LBB11_546:                             # %if.end2321
---
> .LBB11_548:                             # %if.end2321
11346,11348c11385,11387
< 	jne	.LBB11_583
< # %bb.547:                              # %land.lhs.true2325
< 	movl	17384(%r15), %eax
---
> 	jne	.LBB11_585
> # %bb.549:                              # %land.lhs.true2325
> 	movl	17384(%rbp), %eax
11350,11351c11389,11390
< 	je	.LBB11_583
< # %bb.548:                              # %land.lhs.true2325
---
> 	je	.LBB11_585
> # %bb.550:                              # %land.lhs.true2325
11353,11355c11392,11394
< 	je	.LBB11_583
< # %bb.549:                              # %if.then2335
< 	movl	25792(%r15), %ebx
---
> 	je	.LBB11_585
> # %bb.551:                              # %if.then2335
> 	movl	25792(%rbp), %ebx
11357c11396
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
11359,11360c11398,11399
< 	movq	16640(%r15), %rdx
< 	movslq	16392(%r15), %rcx
---
> 	movq	16640(%rbp), %rdx
> 	movslq	16392(%rbp), %rcx
11362c11401
< 	movw	%cx, 104(%rsp)                  # 2-byte Spill
---
> 	movw	%cx, 80(%rsp)                   # 2-byte Spill
11367c11406
< 	movl	%ebx, 56(%rsp)                  # 4-byte Spill
---
> 	movl	%ebx, 64(%rsp)                  # 4-byte Spill
11369,11372c11408,11411
< 	movl	%eax, 112(%rsp)                 # 4-byte Spill
< 	movl	%eax, 64(%rsp)                  # 4-byte Spill
< 	movl	%ebx, 96(%rsp)                  # 4-byte Spill
< .LBB11_550:                             # %for.cond.i3902
---
> 	movl	%eax, 96(%rsp)                  # 4-byte Spill
> 	movl	%eax, 48(%rsp)                  # 4-byte Spill
> 	movl	%ebx, 104(%rsp)                 # 4-byte Spill
> .LBB11_552:                             # %for.cond.i3902
11374c11413
<                                         #     Child Loop BB11_559 Depth 2
---
>                                         #     Child Loop BB11_561 Depth 2
11376,11380c11415,11419
< 	jl	.LBB11_571
< # %bb.551:                              # %for.body.i3909
<                                         #   in Loop: Header=BB11_550 Depth=1
< 	movl	16428(%r15), %eax
< 	movl	25800(%r15), %ecx
---
> 	jl	.LBB11_573
> # %bb.553:                              # %for.body.i3909
>                                         #   in Loop: Header=BB11_552 Depth=1
> 	movl	16428(%rbp), %eax
> 	movl	25800(%rbp), %ecx
11386,11388c11425,11427
< 	jne	.LBB11_553
< # %bb.552:                              # %lor.lhs.false.i3912
<                                         #   in Loop: Header=BB11_550 Depth=1
---
> 	jne	.LBB11_555
> # %bb.554:                              # %lor.lhs.false.i3912
>                                         #   in Loop: Header=BB11_552 Depth=1
11397,11399c11436,11438
< 	jne	.LBB11_554
< .LBB11_553:                             # %if.then.i3929
<                                         #   in Loop: Header=BB11_550 Depth=1
---
> 	jne	.LBB11_556
> .LBB11_555:                             # %if.then.i3929
>                                         #   in Loop: Header=BB11_552 Depth=1
11406,11407c11445,11446
< 	jmp	.LBB11_555
< .LBB11_554:                             #   in Loop: Header=BB11_550 Depth=1
---
> 	jmp	.LBB11_557
> .LBB11_556:                             #   in Loop: Header=BB11_552 Depth=1
11409,11411c11448,11450
< .LBB11_555:                             # %if.end.i3915
<                                         #   in Loop: Header=BB11_550 Depth=1
< 	cmpw	$0, 104(%rsp)                   # 2-byte Folded Reload
---
> .LBB11_557:                             # %if.end.i3915
>                                         #   in Loop: Header=BB11_552 Depth=1
> 	cmpw	$0, 80(%rsp)                    # 2-byte Folded Reload
11416c11455
< 	movl	$268435456, 40(%rsp)            # 4-byte Folded Spill
---
> 	movl	$268435456, 56(%rsp)            # 4-byte Folded Spill
11422,11425c11461,11464
< 	movl	%edi, 48(%rsp)                  # 4-byte Spill
< 	jne	.LBB11_558
< # %bb.556:                              # %if.then27.i
<                                         #   in Loop: Header=BB11_550 Depth=1
---
> 	movl	%edi, 40(%rsp)                  # 4-byte Spill
> 	jne	.LBB11_560
> # %bb.558:                              # %if.then27.i
>                                         #   in Loop: Header=BB11_552 Depth=1
11429c11468,11469
< 	movl	496(%r15), %ecx
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	496(%rbp), %ecx
11432,11433c11472,11473
< 	movl	%eax, 25792(%r15)
< 	movq	7216(%r15), %rcx
---
> 	movl	%eax, 25792(%rbp)
> 	movq	7216(%rbp), %rcx
11436c11476
< 	movl	%eax, 25796(%r15)
---
> 	movl	%eax, 25796(%rbp)
11438c11478
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
11440,11442c11480,11482
< 	movl	%eax, 40(%rsp)                  # 4-byte Spill
< 	movq	16640(%r15), %rax
< 	movslq	16392(%r15), %rcx
---
> 	movl	%eax, 56(%rsp)                  # 4-byte Spill
> 	movq	16640(%rbp), %rax
> 	movslq	16392(%rbp), %rcx
11444,11451c11484,11490
< 	je	.LBB11_573
< # %bb.557:                              # %if.end67.i
<                                         #   in Loop: Header=BB11_550 Depth=1
< 	movl	25792(%r15), %ebp
< 	movl	48(%rsp), %edi                  # 4-byte Reload
< .LBB11_558:                             # %if.end73.i
<                                         #   in Loop: Header=BB11_550 Depth=1
< 	movq	%r15, %r14
---
> 	je	.LBB11_575
> # %bb.559:                              # %if.end67.i
>                                         #   in Loop: Header=BB11_552 Depth=1
> 	movl	25792(%rbp), %ebp
> 	movl	40(%rsp), %edi                  # 4-byte Reload
> .LBB11_560:                             # %if.end73.i
>                                         #   in Loop: Header=BB11_552 Depth=1
11454,11456c11493,11496
< 	movl	112(%rsp), %ebx                 # 4-byte Reload
< .LBB11_559:                             # %while.cond.i
<                                         #   Parent Loop BB11_550 Depth=1
---
> 	movl	96(%rsp), %ebx                  # 4-byte Reload
> 	movq	24(%rsp), %r14                  # 8-byte Reload
> .LBB11_561:                             # %while.cond.i
>                                         #   Parent Loop BB11_552 Depth=1
11461,11463c11501,11503
< 	jl	.LBB11_570
< # %bb.560:                              # %land.rhs.i3922
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	jl	.LBB11_572
> # %bb.562:                              # %land.rhs.i3922
>                                         #   in Loop: Header=BB11_561 Depth=2
11465,11467c11505,11507
< 	jg	.LBB11_570
< # %bb.561:                              # %while.body.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	jg	.LBB11_572
> # %bb.563:                              # %while.body.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11475,11480c11515,11520
< 	jne	.LBB11_563
< # %bb.562:                              #   in Loop: Header=BB11_559 Depth=2
< 	movl	40(%rsp), %eax                  # 4-byte Reload
< 	jmp	.LBB11_566
< .LBB11_563:                             # %if.else.i3923
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	jne	.LBB11_565
> # %bb.564:                              #   in Loop: Header=BB11_561 Depth=2
> 	movl	56(%rsp), %eax                  # 4-byte Reload
> 	jmp	.LBB11_568
> .LBB11_565:                             # %if.else.i3923
>                                         #   in Loop: Header=BB11_561 Depth=2
11488,11491c11528,11531
< 	cmpl	64(%rsp), %eax                  # 4-byte Folded Reload
< 	jge	.LBB11_565
< # %bb.564:                              # %if.then114.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	cmpl	48(%rsp), %eax                  # 4-byte Folded Reload
> 	jge	.LBB11_567
> # %bb.566:                              # %if.then114.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11493,11499c11533,11539
< 	movl	%ecx, 56(%rsp)                  # 4-byte Spill
< 	movl	%eax, 64(%rsp)                  # 4-byte Spill
< .LBB11_565:                             # %if.end118.i
<                                         #   in Loop: Header=BB11_559 Depth=2
< 	movl	48(%rsp), %edi                  # 4-byte Reload
< .LBB11_566:                             # %if.end118.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	movl	%ecx, 64(%rsp)                  # 4-byte Spill
> 	movl	%eax, 48(%rsp)                  # 4-byte Spill
> .LBB11_567:                             # %if.end118.i
>                                         #   in Loop: Header=BB11_561 Depth=2
> 	movl	40(%rsp), %edi                  # 4-byte Reload
> .LBB11_568:                             # %if.end118.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11505,11507c11545,11547
< 	jg	.LBB11_570
< # %bb.567:                              # %if.end128.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	jg	.LBB11_572
> # %bb.569:                              # %if.end128.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11509,11511c11549,11551
< 	jne	.LBB11_569
< # %bb.568:                              # %land.lhs.true131.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	jne	.LBB11_571
> # %bb.570:                              # %land.lhs.true131.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11516,11518c11556,11558
< 	je	.LBB11_570
< .LBB11_569:                             # %if.end140.i
<                                         #   in Loop: Header=BB11_559 Depth=2
---
> 	je	.LBB11_572
> .LBB11_571:                             # %if.end140.i
>                                         #   in Loop: Header=BB11_561 Depth=2
11522,11524c11562,11564
< 	jmp	.LBB11_559
< .LBB11_570:                             # %for.inc.i3927
<                                         #   in Loop: Header=BB11_550 Depth=1
---
> 	jmp	.LBB11_561
> .LBB11_572:                             # %for.inc.i3927
>                                         #   in Loop: Header=BB11_552 Depth=1
11526,11529c11566,11569
< 	movq	24(%rsp), %r15                  # 8-byte Reload
< 	movl	96(%rsp), %ebx                  # 4-byte Reload
< 	jmp	.LBB11_550
< .LBB11_571:                             # %cleanup147.i
---
> 	movq	24(%rsp), %rbp                  # 8-byte Reload
> 	movl	104(%rsp), %ebx                 # 4-byte Reload
> 	jmp	.LBB11_552
> .LBB11_573:                             # %cleanup147.i
11531,11539c11571,11579
< 	je	.LBB11_575
< .LBB11_572:
< 	movl	56(%rsp), %ebp                  # 4-byte Reload
< 	jmp	.LBB11_578
< .LBB11_573:                             # %cleanup.i3928
< 	movl	25800(%r15), %eax
< 	cmpl	25792(%r15), %eax
< 	jg	.LBB11_572
< # %bb.574:                              # %cleanup.i3928
---
> 	je	.LBB11_577
> .LBB11_574:
> 	movl	64(%rsp), %r14d                 # 4-byte Reload
> 	jmp	.LBB11_580
> .LBB11_575:                             # %cleanup.i3928
> 	movl	25800(%rbp), %eax
> 	cmpl	25792(%rbp), %eax
> 	jg	.LBB11_574
> # %bb.576:                              # %cleanup.i3928
11541,11549c11581,11589
< 	movl	56(%rsp), %ebp                  # 4-byte Reload
< 	je	.LBB11_576
< 	jmp	.LBB11_578
< .LBB11_575:                             # %cleanup147.if.then149_crit_edge.i
< 	movl	25800(%r15), %eax
< 	movl	56(%rsp), %ebp                  # 4-byte Reload
< .LBB11_576:                             # %if.then149.i
< 	movl	%eax, 25792(%r15)
< 	movq	7216(%r15), %rcx
---
> 	movl	64(%rsp), %r14d                 # 4-byte Reload
> 	je	.LBB11_578
> 	jmp	.LBB11_580
> .LBB11_577:                             # %cleanup147.if.then149_crit_edge.i
> 	movl	25800(%rbp), %eax
> 	movl	64(%rsp), %r14d                 # 4-byte Reload
> .LBB11_578:                             # %if.then149.i
> 	movl	%eax, 25792(%rbp)
> 	movq	7216(%rbp), %rcx
11552c11592
< 	movl	%eax, 25796(%r15)
---
> 	movl	%eax, 25796(%rbp)
11554c11594
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
11556,11564c11596,11604
< 	cmpl	64(%rsp), %eax                  # 4-byte Folded Reload
< 	jge	.LBB11_578
< # %bb.577:                              # %if.then166.i
< 	movl	25792(%r15), %ebp
< 	movl	%eax, 64(%rsp)                  # 4-byte Spill
< .LBB11_578:                             # %if.end170.i
< 	movl	%ebp, 25792(%r15)
< 	movq	7216(%r15), %rax
< 	movslq	%ebp, %rcx
---
> 	cmpl	48(%rsp), %eax                  # 4-byte Folded Reload
> 	jge	.LBB11_580
> # %bb.579:                              # %if.then166.i
> 	movl	25792(%rbp), %r14d
> 	movl	%eax, 48(%rsp)                  # 4-byte Spill
> .LBB11_580:                             # %if.end170.i
> 	movl	%r14d, 25792(%rbp)
> 	movq	7216(%rbp), %rax
> 	movslq	%r14d, %rcx
11566c11606
< 	movl	%eax, 25796(%r15)
---
> 	movl	%eax, 25796(%rbp)
11568,11573c11608,11613
< 	je	.LBB11_583
< # %bb.579:                              # %land.lhs.true185.i
< 	cmpl	$0, 392(%r15)
< 	je	.LBB11_583
< # %bb.580:                              # %land.lhs.true188.i3906
< 	movq	%r15, %rdi
---
> 	je	.LBB11_585
> # %bb.581:                              # %land.lhs.true185.i
> 	cmpl	$0, 392(%rbp)
> 	je	.LBB11_585
> # %bb.582:                              # %land.lhs.true188.i3906
> 	movq	%rbp, %rdi
11576,11578c11616,11618
< 	je	.LBB11_583
< # %bb.581:                              # %if.then191.i
< 	xorb	$1, 17396(%r15)
---
> 	je	.LBB11_585
> # %bb.583:                              # %if.then191.i
> 	xorb	$1, 17396(%rbp)
11580c11620
< 	movq	%r15, %rdi
---
> 	movq	%rbp, %rdi
11582,11588c11622,11628
< 	cmpl	64(%rsp), %eax                  # 4-byte Folded Reload
< 	jle	.LBB11_583
< # %bb.582:                              # %if.then198.i
< 	xorb	$1, 17396(%r15)
< .LBB11_583:                             # %if.end2336
< 	movl	440(%r15), %eax
< 	movl	%eax, 16416(%r15)
---
> 	cmpl	48(%rsp), %eax                  # 4-byte Folded Reload
> 	jle	.LBB11_585
> # %bb.584:                              # %if.then198.i
> 	xorb	$1, 17396(%rbp)
> .LBB11_585:                             # %if.end2336
> 	movl	440(%rbp), %eax
> 	movl	%eax, 16416(%rbp)
11590c11630
< 	cmpl	$0, 452(%r15)
---
> 	cmpl	$0, 452(%rbp)
11592,11593c11632,11633
< 	movl	%ecx, 16420(%r15)
< 	movl	17384(%r15), %ecx
---
> 	movl	%ecx, 16420(%rbp)
> 	movl	17384(%rbp), %ecx
11595,11596c11635,11636
< 	je	.LBB11_587
< # %bb.584:                              # %if.end2336
---
> 	je	.LBB11_589
> # %bb.586:                              # %if.end2336
11598,11600c11638,11640
< 	je	.LBB11_587
< # %bb.585:                              # %land.lhs.true2354
< 	cmpl	$0, 16432(%r15)
---
> 	je	.LBB11_589
> # %bb.587:                              # %land.lhs.true2354
> 	cmpl	$0, 16432(%rbp)
11606,11608c11646,11648
< 	jne	.LBB11_587
< # %bb.586:                              # %if.then2363
< 	movq	%r15, %rdi
---
> 	jne	.LBB11_589
> # %bb.588:                              # %if.then2363
> 	movq	%rbp, %rdi
11611,11612c11651,11652
< 	movl	16416(%r15), %eax
< .LBB11_587:                             # %if.end2364
---
> 	movl	16416(%rbp), %eax
> .LBB11_589:                             # %if.end2364
11614,11620c11654,11660
< 	je	.LBB11_589
< # %bb.588:                              # %lor.lhs.false2369
< 	cmpl	$0, 16420(%r15)
< 	je	.LBB11_590
< .LBB11_589:                             # %if.then2373
< 	andl	$0, 17416(%r15)
< .LBB11_590:                             # %cleanup2376
---
> 	je	.LBB11_591
> # %bb.590:                              # %lor.lhs.false2369
> 	cmpl	$0, 16420(%rbp)
> 	je	.LBB11_592
> .LBB11_591:                             # %if.then2373
> 	andl	$0, 17416(%rbp)
> .LBB11_592:                             # %cleanup2376
11636c11676
< .LBB11_591:                             # %for.cond1988.preheader
---
> .LBB11_593:                             # %for.cond1988.preheader
11645c11685
< .LBB11_592:                             # %for.cond1988
---
> .LBB11_594:                             # %for.cond1988
11648,11650c11688,11690
< 	je	.LBB11_534
< # %bb.593:                              # %for.body1992
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	je	.LBB11_536
> # %bb.595:                              # %for.body1992
>                                         #   in Loop: Header=BB11_594 Depth=1
11660,11662c11700,11702
< 	je	.LBB11_599
< # %bb.594:                              # %for.body1992
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	je	.LBB11_601
> # %bb.596:                              # %for.body1992
>                                         #   in Loop: Header=BB11_594 Depth=1
11664,11666c11704,11706
< 	je	.LBB11_598
< # %bb.595:                              # %for.body1992
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	je	.LBB11_600
> # %bb.597:                              # %for.body1992
>                                         #   in Loop: Header=BB11_594 Depth=1
11668,11670c11708,11710
< 	jne	.LBB11_600
< # %bb.596:                              # %if.then2013
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	jne	.LBB11_602
> # %bb.598:                              # %if.then2013
>                                         #   in Loop: Header=BB11_594 Depth=1
11675,11677c11715,11717
< 	jmp	.LBB11_597
< .LBB11_598:                             # %if.then2026
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	jmp	.LBB11_599
> .LBB11_600:                             # %if.then2026
>                                         #   in Loop: Header=BB11_594 Depth=1
11684,11685c11724,11725
< .LBB11_597:                             # %for.inc2070
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> .LBB11_599:                             # %for.inc2070
>                                         #   in Loop: Header=BB11_594 Depth=1
11687,11689c11727,11729
< 	jmp	.LBB11_600
< .LBB11_599:                             # %if.then2039
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> 	jmp	.LBB11_602
> .LBB11_601:                             # %if.then2039
>                                         #   in Loop: Header=BB11_594 Depth=1
11699,11700c11739,11740
< .LBB11_600:                             # %for.inc2070
<                                         #   in Loop: Header=BB11_592 Depth=1
---
> .LBB11_602:                             # %for.inc2070
>                                         #   in Loop: Header=BB11_594 Depth=1
11704,11705c11744,11745
< 	jmp	.LBB11_592
< .LBB11_601:                             # %for.cond62.preheader.i
---
> 	jmp	.LBB11_594
> .LBB11_603:                             # %for.cond62.preheader.i
11708c11748
< .LBB11_602:                             # %for.cond62.i
---
> .LBB11_604:                             # %for.cond62.i
11711,11713c11751,11753
< 	je	.LBB11_497
< # %bb.603:                              # %for.body66.i
<                                         #   in Loop: Header=BB11_602 Depth=1
---
> 	je	.LBB11_499
> # %bb.605:                              # %for.body66.i
>                                         #   in Loop: Header=BB11_604 Depth=1
11715,11717c11755,11757
< 	jne	.LBB11_605
< # %bb.604:                              # %if.then71.i
<                                         #   in Loop: Header=BB11_602 Depth=1
---
> 	jne	.LBB11_607
> # %bb.606:                              # %if.then71.i
>                                         #   in Loop: Header=BB11_604 Depth=1
11727,11728c11767,11768
< .LBB11_605:                             # %for.inc97.i
<                                         #   in Loop: Header=BB11_602 Depth=1
---
> .LBB11_607:                             # %for.inc97.i
>                                         #   in Loop: Header=BB11_604 Depth=1
11731,11732c11771,11772
< 	jmp	.LBB11_602
< .LBB11_606:                             # %sw.bb.i
---
> 	jmp	.LBB11_604
> .LBB11_608:                             # %sw.bb.i
11734,11735c11774,11775
< 	jne	.LBB11_497
< # %bb.607:                              # %if.then16.i
---
> 	jne	.LBB11_499
> # %bb.609:                              # %if.then16.i
11745,11746c11785,11786
< 	jmp	.LBB11_497
< .LBB11_608:                             # %for.cond.preheader.i3869
---
> 	jmp	.LBB11_499
> .LBB11_610:                             # %for.cond.preheader.i3869
11749c11789
< .LBB11_609:                             # %for.cond.i3871
---
> .LBB11_611:                             # %for.cond.i3871
11752,11754c11792,11794
< 	je	.LBB11_497
< # %bb.610:                              # %for.body.i3872
<                                         #   in Loop: Header=BB11_609 Depth=1
---
> 	je	.LBB11_499
> # %bb.612:                              # %for.body.i3872
>                                         #   in Loop: Header=BB11_611 Depth=1
11756,11758c11796,11798
< 	jne	.LBB11_612
< # %bb.611:                              # %if.then34.i
<                                         #   in Loop: Header=BB11_609 Depth=1
---
> 	jne	.LBB11_614
> # %bb.613:                              # %if.then34.i
>                                         #   in Loop: Header=BB11_611 Depth=1
11770,11771c11810,11811
< .LBB11_612:                             # %for.inc.i3873
<                                         #   in Loop: Header=BB11_609 Depth=1
---
> .LBB11_614:                             # %for.inc.i3873
>                                         #   in Loop: Header=BB11_611 Depth=1
11774,11775c11814,11815
< 	jmp	.LBB11_609
< .LBB11_613:                             # %if.then1952
---
> 	jmp	.LBB11_611
> .LBB11_615:                             # %if.then1952
11782c11822
< 	movq	%rbx, %rdi
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
11785,11786c11825,11826
< 	jmp	.LBB11_533
< .LBB11_614:                             # %if.then1962
---
> 	jmp	.LBB11_535
> .LBB11_616:                             # %if.then1962
11792c11832,11833
< 	addq	26624(%rbx), %rax
---
> 	movq	24(%rsp), %rdi                  # 8-byte Reload
> 	addq	26624(%rdi), %rax
11795d11835
< 	movq	%rbx, %rdi
11798c11838
< 	jmp	.LBB11_534
---
> 	jmp	.LBB11_536
11805,11808c11845,11848
< 	.quad	.LBB11_240
< 	.quad	.LBB11_474
< 	.quad	.LBB11_464
< 	.quad	.LBB11_470
---
> 	.quad	.LBB11_241
> 	.quad	.LBB11_477
> 	.quad	.LBB11_467
> 	.quad	.LBB11_473
11810c11850,11852
< 	.quad	.LBB11_512
---
> 	.quad	.LBB11_514
> 	.quad	.LBB11_610
> 	.quad	.LBB11_603
11812,11813d11853
< 	.quad	.LBB11_601
< 	.quad	.LBB11_606
11815,11818c11855,11858
< 	.quad	.LBB11_500
< 	.quad	.LBB11_591
< 	.quad	.LBB11_517
< 	.quad	.LBB11_527
---
> 	.quad	.LBB11_502
> 	.quad	.LBB11_593
> 	.quad	.LBB11_519
> 	.quad	.LBB11_529
11820,11823c11860,11863
< 	.quad	.LBB11_346
< 	.quad	.LBB11_360
< 	.quad	.LBB11_358
< 	.quad	.LBB11_359
---
> 	.quad	.LBB11_348
> 	.quad	.LBB11_363
> 	.quad	.LBB11_361
> 	.quad	.LBB11_362
11825,11827d11864
< 	.quad	.LBB11_350
< 	.quad	.LBB11_353
< 	.quad	.LBB11_351
11828a11866,11868
> 	.quad	.LBB11_355
> 	.quad	.LBB11_353
> 	.quad	.LBB11_354
11830,11833c11870,11873
< 	.quad	.LBB11_403
< 	.quad	.LBB11_456
< 	.quad	.LBB11_454
< 	.quad	.LBB11_455
---
> 	.quad	.LBB11_406
> 	.quad	.LBB11_459
> 	.quad	.LBB11_457
> 	.quad	.LBB11_458
11835d11874
< 	.quad	.LBB11_407
11837,11838c11876,11878
< 	.quad	.LBB11_408
< 	.quad	.LBB11_409
---
> 	.quad	.LBB11_413
> 	.quad	.LBB11_411
> 	.quad	.LBB11_412
Comparing x264_src/encoder/macroblock.s and x264_src/encoder/macroblock.mod.s
Comparing x264_src/encoder/encoder.s and x264_src/encoder/encoder.mod.s
1254c1254
< 	cmpl	%ebp, %eax
---
> 	cmpl	$51, %eax
1265c1265
< 	cmpl	$51, %ecx
---
> 	cmpl	%ebp, %ecx
Comparing x264_src/encoder/ratecontrol.s and x264_src/encoder/ratecontrol.mod.s
Comparing x264_src/encoder/set.s and x264_src/encoder/set.mod.s
Comparing x264_src/encoder/me.s and x264_src/encoder/me.mod.s
6380c6380
< 	movl	%r9d, 148(%rsp)                 # 4-byte Spill
---
> 	movl	%r9d, 156(%rsp)                 # 4-byte Spill
6386c6386
< 	movq	%r8, 136(%rsp)                  # 8-byte Spill
---
> 	movq	%r8, 144(%rsp)                  # 8-byte Spill
6453c6453
< 	movl	%esi, 32(%rsp)                  # 4-byte Spill
---
> 	movl	%esi, 36(%rsp)                  # 4-byte Spill
6456c6456
< 	movq	136(%rsp), %rdx                 # 8-byte Reload
---
> 	movq	144(%rsp), %rdx                 # 8-byte Reload
6465c6465
< 	movq	%rdx, 192(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 136(%rsp)                 # 8-byte Spill
6472c6472
< 	movl	%eax, 36(%rsp)                  # 4-byte Spill
---
> 	movl	%eax, 52(%rsp)                  # 4-byte Spill
6484c6484
< 	movq	%rdx, 176(%rsp)                 # 8-byte Spill
---
> 	movq	%rdx, 184(%rsp)                 # 8-byte Spill
6489c6489
< 	cmpl	$0, 136(%rsp)                   # 4-byte Folded Reload
---
> 	cmpl	$0, 144(%rsp)                   # 4-byte Folded Reload
6517c6517
< 	movq	176(%rsp), %rdx                 # 8-byte Reload
---
> 	movq	184(%rsp), %rdx                 # 8-byte Reload
6553c6553
< 	movl	36(%rsp), %eax                  # 4-byte Reload
---
> 	movl	52(%rsp), %eax                  # 4-byte Reload
6561c6561
< 	movq	%rcx, 168(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 176(%rsp)                 # 8-byte Spill
6564c6564
< 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 168(%rsp)                 # 8-byte Spill
6568c6568
< 	movl	$268435456, 48(%rsp)            # 4-byte Folded Spill
---
> 	movl	$268435456, 44(%rsp)            # 4-byte Folded Spill
6571c6571
< 	movq	%rax, 152(%rsp)                 # 8-byte Spill
---
> 	movq	%rax, 160(%rsp)                 # 8-byte Spill
6575,6576c6575,6576
< 	movl	%r14d, %r9d
< 	movl	%r14d, 40(%rsp)                 # 4-byte Spill
---
> 	movl	%r14d, %r8d
> 	movl	%r14d, 32(%rsp)                 # 4-byte Spill
6585c6585
< 	movl	%r13d, 44(%rsp)                 # 4-byte Spill
---
> 	movl	%r13d, 40(%rsp)                 # 4-byte Spill
6608,6609c6608,6609
< 	addl	32(%rsp), %r15d                 # 4-byte Folded Reload
< 	addl	44(%rsp), %r13d                 # 4-byte Folded Reload
---
> 	addl	36(%rsp), %r15d                 # 4-byte Folded Reload
> 	addl	40(%rsp), %r13d                 # 4-byte Folded Reload
6612c6612
< 	movl	%r9d, (%rsi)
---
> 	movl	%r8d, (%rsi)
6621c6621
< 	movl	36(%rsp), %edx                  # 4-byte Reload
---
> 	movl	52(%rsp), %edx                  # 4-byte Reload
6623c6623
< 	movl	%r9d, (%rsp)
---
> 	movl	%r8d, (%rsp)
6670c6670
< 	movl	40(%rsp), %r9d                  # 4-byte Reload
---
> 	movl	32(%rsp), %r8d                  # 4-byte Reload
6699c6699
< 	movl	40(%rsp), %eax                  # 4-byte Reload
---
> 	movl	32(%rsp), %eax                  # 4-byte Reload
6709c6709
< 	movl	36(%rsp), %edx                  # 4-byte Reload
---
> 	movl	52(%rsp), %edx                  # 4-byte Reload
6723c6723
< 	movq	168(%rsp), %rax                 # 8-byte Reload
---
> 	movq	176(%rsp), %rax                 # 8-byte Reload
6739c6739
< 	addq	160(%rsp), %rbx                 # 8-byte Folded Reload
---
> 	addq	168(%rsp), %rbx                 # 8-byte Folded Reload
6766c6766
< 	movl	40(%rsp), %r9d                  # 4-byte Reload
---
> 	movl	32(%rsp), %r8d                  # 4-byte Reload
6775c6775
< 	movslq	32(%rsp), %rdi                  # 4-byte Folded Reload
---
> 	movslq	36(%rsp), %rdi                  # 4-byte Folded Reload
6778c6778
< 	movslq	44(%rsp), %r14                  # 4-byte Folded Reload
---
> 	movslq	40(%rsp), %r14                  # 4-byte Folded Reload
6788c6788
< 	movq	%rbx, 184(%rsp)                 # 8-byte Spill
---
> 	movq	%rbx, 192(%rsp)                 # 8-byte Spill
6793c6793
< 	movl	%r9d, %ebx
---
> 	movl	%r8d, %ebx
6818c6818
< 	movl	%ebx, %r9d
---
> 	movl	%ebx, %r8d
6822c6822
< 	movl	%r13d, 52(%rsp)                 # 4-byte Spill
---
> 	movl	%r13d, 48(%rsp)                 # 4-byte Spill
6839c6839
< 	movl	%r13d, 52(%rsp)                 # 4-byte Spill
---
> 	movl	%r13d, 48(%rsp)                 # 4-byte Spill
6842c6842
< 	movq	184(%rsp), %rbx                 # 8-byte Reload
---
> 	movq	192(%rsp), %rbx                 # 8-byte Reload
6869c6869
< 	movq	176(%rsp), %r15                 # 8-byte Reload
---
> 	movq	184(%rsp), %r15                 # 8-byte Reload
6900c6900
< 	movl	48(%rsp), %esi                  # 4-byte Reload
---
> 	movl	44(%rsp), %esi                  # 4-byte Reload
6916c6916
< 	movq	184(%rsp), %rax                 # 8-byte Reload
---
> 	movq	192(%rsp), %rax                 # 8-byte Reload
6922c6922
< 	movl	%esi, 48(%rsp)                  # 4-byte Spill
---
> 	movl	%esi, 44(%rsp)                  # 4-byte Spill
6939c6939
< 	movq	168(%rsp), %rax                 # 8-byte Reload
---
> 	movq	176(%rsp), %rax                 # 8-byte Reload
6960c6960
< 	addq	160(%rsp), %rbx                 # 8-byte Folded Reload
---
> 	addq	168(%rsp), %rbx                 # 8-byte Folded Reload
6971c6971
< 	movl	148(%rsp), %esi                 # 4-byte Reload
---
> 	movl	156(%rsp), %esi                 # 4-byte Reload
6974c6974
< 	movq	152(%rsp), %rcx                 # 8-byte Reload
---
> 	movq	160(%rsp), %rcx                 # 8-byte Reload
6977c6977
< 	movl	52(%rsp), %r13d                 # 4-byte Reload
---
> 	movl	48(%rsp), %r13d                 # 4-byte Reload
6980c6980
< 	movq	%rcx, 152(%rsp)                 # 8-byte Spill
---
> 	movq	%rcx, 160(%rsp)                 # 8-byte Spill
6984c6984
< 	movl	48(%rsp), %eax                  # 4-byte Reload
---
> 	movl	44(%rsp), %eax                  # 4-byte Reload
6987c6987
< 	movl	52(%rsp), %r13d                 # 4-byte Reload
---
> 	movl	48(%rsp), %r13d                 # 4-byte Reload
6990c6990
< 	movl	%eax, 48(%rsp)                  # 4-byte Spill
---
> 	movl	%eax, 44(%rsp)                  # 4-byte Spill
6994c6994
< 	movl	40(%rsp), %r9d                  # 4-byte Reload
---
> 	movl	32(%rsp), %r8d                  # 4-byte Reload
6998c6998
< 	movl	40(%rsp), %r9d                  # 4-byte Reload
---
> 	movl	32(%rsp), %r8d                  # 4-byte Reload
7000c7000
< 	movl	52(%rsp), %r13d                 # 4-byte Reload
---
> 	movl	48(%rsp), %r13d                 # 4-byte Reload
7010c7010
< 	movl	44(%rsp), %r13d                 # 4-byte Reload
---
> 	movl	40(%rsp), %r13d                 # 4-byte Reload
7016c7016
< 	addl	%eax, 32(%rsp)                  # 4-byte Folded Spill
---
> 	addl	%eax, 36(%rsp)                  # 4-byte Folded Spill
7033c7033
< 	movl	32(%rsp), %r10d                 # 4-byte Reload
---
> 	movl	36(%rsp), %edx                  # 4-byte Reload
7036,7038c7036,7038
< 	movq	192(%rsp), %r14                 # 8-byte Reload
< 	addl	%r14d, %r14d
< 	movq	136(%rsp), %r12                 # 8-byte Reload
---
> 	movq	136(%rsp), %rbx                 # 8-byte Reload
> 	addl	%ebx, %ebx
> 	movq	144(%rsp), %r12                 # 8-byte Reload
7040,7047c7040,7046
< 	sarl	$2, %r9d
< 	movl	36(%rsp), %edi                  # 4-byte Reload
< 	sarl	$2, %edi
< 	movl	%edi, %r8d
< 	movl	%edi, 36(%rsp)                  # 4-byte Spill
< 	movl	$65535, %edi                    # imm = 0xFFFF
< 	movl	%r10d, %eax
< 	andl	%edi, %eax
---
> 	sarl	$2, %r8d
> 	movl	52(%rsp), %r14d                 # 4-byte Reload
> 	sarl	$2, %r14d
> 	movl	%r8d, 32(%rsp)                  # 4-byte Spill
> 	movl	$65535, %ebp                    # imm = 0xFFFF
> 	movl	%edx, %eax
> 	andl	%ebp, %eax
7055,7056c7054,7056
< 	movl	%r14d, %esi
< 	movl	%r10d, 32(%rsp)                 # 4-byte Spill
---
> 	movl	%ebx, %esi
> 	movq	%rbx, 136(%rsp)                 # 8-byte Spill
> 	movl	%edx, 36(%rsp)                  # 4-byte Spill
7058,7059c7058,7059
< 	movl	%r9d, %ecx
< 	movl	%r9d, %ebp
---
> 	movl	%r8d, %ecx
> 	movl	%r14d, %r8d
7063c7063
< 	movl	32(%rsp), %ecx                  # 4-byte Reload
---
> 	movl	36(%rsp), %ecx                  # 4-byte Reload
7075c7075
< 	movl	44(%rsp), %edx                  # 4-byte Reload
---
> 	movl	40(%rsp), %edx                  # 4-byte Reload
7086c7086
< 	movl	%r14d, %esi
---
> 	movl	%ebx, %esi
7088,7091c7088,7090
< 	movl	%ebp, %ebx
< 	movl	%ebp, %ecx
< 	movl	36(%rsp), %ebp                  # 4-byte Reload
< 	movl	%ebp, %r8d
---
> 	movl	32(%rsp), %ebx                  # 4-byte Reload
> 	movl	%ebx, %ecx
> 	movl	%r14d, %r8d
7094,7095c7093
< 	movl	$65535, %ecx                    # imm = 0xFFFF
< 	andl	28(%rsp), %ecx                  # 4-byte Folded Reload
---
> 	andl	28(%rsp), %ebp                  # 4-byte Folded Reload
7098c7096
< 	orl	%ecx, %eax
---
> 	orl	%ebp, %eax
7105c7103,7104
< 	movl	%r14d, %esi
---
> 	movq	136(%rsp), %rbp                 # 8-byte Reload
> 	movl	%ebp, %esi
7108c7107
< 	movl	%ebp, %r8d
---
> 	movl	%r14d, %r8d
7116a7116
> 	cmpl	$33, %eax
7119c7119
< 	popq	%rcx
---
> 	popq	%rsi
7121,7123c7121
< 	cmpl	%ecx, %eax
< 	cmovael	%ecx, %eax
< 	movl	%ecx, %esi
---
> 	cmovael	%esi, %eax
7137,7138c7135,7136
< 	movl	44(%rsp), %r13d                 # 4-byte Reload
< 	movl	%r14d, %esi
---
> 	movl	40(%rsp), %r13d                 # 4-byte Reload
> 	movl	%ebp, %esi
7141c7139
< 	movl	%ebp, %r8d
---
> 	movl	%r14d, %r8d
7147c7145
< 	movl	32(%rsp), %r10d                 # 4-byte Reload
---
> 	movl	36(%rsp), %edx                  # 4-byte Reload
7152c7150
< 	movw	%r10w, 140(%r15)
---
> 	movw	%dx, 140(%r15)
7868a7867
> 	cmpl	$33, %eax
7873d7871
< 	cmpl	%ecx, %eax
Comparing x264_src/encoder/cabac.s and x264_src/encoder/cabac.mod.s
Comparing x264_src/encoder/cavlc.s and x264_src/encoder/cavlc.mod.s
Comparing x264_src/input/thread.s and x264_src/input/thread.mod.s
Comparing x264_src/input/y4m.s and x264_src/input/y4m.mod.s
Comparing x264_src/input/timecode.s and x264_src/input/timecode.mod.s
Comparing x264_src/input/yuv.s and x264_src/input/yuv.mod.s
Comparing x264_src/x264.s and x264_src/x264.mod.s
Comparing x264_src/output/flv_bytestream.s and x264_src/output/flv_bytestream.mod.s
Comparing x264_src/output/matroska_ebml.s and x264_src/output/matroska_ebml.mod.s
Comparing x264_src/output/flv.s and x264_src/output/flv.mod.s
Comparing x264_src/output/matroska.s and x264_src/output/matroska.mod.s
Comparing x264_src/output/raw.s and x264_src/output/raw.mod.s
Comparing x264_src/common/cpu.s and x264_src/common/cpu.mod.s
Comparing x264_src/common/frame.s and x264_src/common/frame.mod.s
Comparing x264_src/common/dct.s and x264_src/common/dct.mod.s
Comparing x264_src/common/quant.s and x264_src/common/quant.mod.s
Comparing x264_src/common/macroblock.s and x264_src/common/macroblock.mod.s
2841c2841
< 	testl	%edx, %edx
---
> 	testb	$2, %al
4098c4098
< 	cmpl	%ebp, %r11d
---
> 	cmpl	$127, %r11d
4117c4117
< 	cmpl	$127, %r15d
---
> 	cmpl	%ebp, %r15d
Comparing x264_src/common/mdate.s and x264_src/common/mdate.mod.s
Comparing x264_src/common/deblock.s and x264_src/common/deblock.mod.s
Comparing x264_src/common/pixel.s and x264_src/common/pixel.mod.s
Comparing x264_src/common/common.s and x264_src/common/common.mod.s
Comparing x264_src/common/set.s and x264_src/common/set.mod.s
Comparing x264_src/common/mvpred.s and x264_src/common/mvpred.mod.s
Comparing x264_src/common/vlc.s and x264_src/common/vlc.mod.s
Comparing x264_src/common/rectangle.s and x264_src/common/rectangle.mod.s
Comparing x264_src/common/predict.s and x264_src/common/predict.mod.s
Comparing x264_src/common/cabac.s and x264_src/common/cabac.mod.s
Comparing x264_src/common/mc.s and x264_src/common/mc.mod.s
2049d2048
< 	cmpl	$0, 32(%r8)
2051a2051
> 	cmpl	%eax, 32(%r8)
Comparing x264_src/extras/getopt.s and x264_src/extras/getopt.mod.s
