; ModuleID = 'x264_src/output/flv.c'
source_filename = "x264_src/output/flv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cli_output_t = type { ptr, ptr, ptr, ptr, ptr }

@flv_output = dso_local local_unnamed_addr constant %struct.cli_output_t { ptr @open_file, ptr @set_param, ptr @write_headers, ptr @write_frame, ptr @close_file }, align 8
@.str = private unnamed_addr constant [4 x i8] c"FLV\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"onMetaData\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"width\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"height\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"framerate\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"videocodecid\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"duration\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"filesize\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"videodatarate\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = external local_unnamed_addr global ptr, align 8
@.str.10 = private unnamed_addr constant [117 x i8] c"flv [warning]: duplicate DTS %ld generated by rounding\0A               current internal decoding framerate: %.6f fps\0A\00", align 1
@.str.11 = private unnamed_addr constant [120 x i8] c"flv [warning]: duplicate CTS %ld generated by rounding\0A               current internal composition framerate: %.6f fps\0A\00", align 1

; Function Attrs: nounwind uwtable
define internal range(i32 -1, 1) i32 @open_file(ptr noundef %psz_filename, ptr nocapture noundef writeonly %p_handle) #0 {
entry:
  %calloc = tail call dereferenceable_or_null(120) ptr @calloc(i64 1, i64 120)
  store ptr null, ptr %p_handle, align 8
  %tobool.not = icmp eq ptr %calloc, null
  br i1 %tobool.not, label %cleanup, label %if.end

if.end:                                           ; preds = %entry
  %call1 = tail call ptr @flv_create_writer(ptr noundef %psz_filename) #10
  store ptr %call1, ptr %calloc, align 8
  %tobool3.not = icmp eq ptr %call1, null
  br i1 %tobool3.not, label %cleanup, label %do.body

do.body:                                          ; preds = %if.end
  tail call void @x264_put_tag(ptr noundef nonnull %call1, ptr noundef nonnull @.str) #10
  tail call void @x264_put_byte(ptr noundef nonnull %call1, i8 noundef zeroext 1) #10
  tail call void @x264_put_byte(ptr noundef nonnull %call1, i8 noundef zeroext 1) #10
  tail call void @x264_put_be32(ptr noundef nonnull %call1, i32 noundef 9) #10
  tail call void @x264_put_be32(ptr noundef nonnull %call1, i32 noundef 0) #10
  %call.i = tail call i32 @flv_flush_data(ptr noundef nonnull %call1) #10
  %cmp = icmp slt i32 %call.i, 0
  br i1 %cmp, label %cleanup, label %do.end

do.end:                                           ; preds = %do.body
  store ptr %calloc, ptr %p_handle, align 8
  br label %cleanup

cleanup:                                          ; preds = %do.body, %if.end, %entry, %do.end
  %retval.0 = phi i32 [ 0, %do.end ], [ -1, %entry ], [ -1, %if.end ], [ -1, %do.body ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal noundef i32 @set_param(ptr nocapture noundef %handle, ptr nocapture noundef readonly %p_param) #0 {
entry:
  %0 = load ptr, ptr %handle, align 8
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 18) #10
  %d_cur = getelementptr inbounds i8, ptr %0, i64 8
  %1 = load i32, ptr %d_cur, align 8
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_be32(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 2) #10
  tail call void @x264_put_amf_string(ptr noundef %0, ptr noundef nonnull @.str.1) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 8) #10
  tail call void @x264_put_be32(ptr noundef %0, i32 noundef 7) #10
  tail call void @x264_put_amf_string(ptr noundef %0, ptr noundef nonnull @.str.2) #10
  %i_width = getelementptr inbounds i8, ptr %p_param, i64 20
  %2 = load i32, ptr %i_width, align 4
  %conv = sitofp i32 %2 to double
  tail call void @x264_put_amf_double(ptr noundef %0, double noundef %conv) #10
  tail call void @x264_put_amf_string(ptr noundef %0, ptr noundef nonnull @.str.3) #10
  %i_height = getelementptr inbounds i8, ptr %p_param, i64 24
  %3 = load i32, ptr %i_height, align 8
  %conv2 = sitofp i32 %3 to double
  tail call void @x264_put_amf_double(ptr noundef %0, double noundef %conv2) #10
  tail call void @x264_put_amf_string(ptr noundef %0, ptr noundef nonnull @.str.4) #10
  %b_vfr_input = getelementptr inbounds i8, ptr %p_param, i64 648
  %4 = load i32, ptr %b_vfr_input, align 8
  %tobool.not = icmp eq i32 %4, 0
  br i1 %tobool.not, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i_fps_num = getelementptr inbounds i8, ptr %p_param, i64 652
  %5 = load i32, ptr %i_fps_num, align 4
  %conv3 = uitofp i32 %5 to double
  %i_fps_den = getelementptr inbounds i8, ptr %p_param, i64 656
  %6 = load i32, ptr %i_fps_den, align 8
  %conv4 = uitofp i32 %6 to double
  %div = fdiv double %conv3, %conv4
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load i32, ptr %d_cur, align 8
  %conv6 = zext i32 %7 to i64
  %d_total = getelementptr inbounds i8, ptr %0, i64 24
  %8 = load i64, ptr %d_total, align 8
  %add = add nuw nsw i64 %conv6, 1
  %add7 = add i64 %add, %8
  %i_framerate_pos = getelementptr inbounds i8, ptr %handle, i64 48
  store i64 %add7, ptr %i_framerate_pos, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %.sink = phi double [ 0.000000e+00, %if.else ], [ %div, %if.then ]
  tail call void @x264_put_amf_double(ptr noundef nonnull %0, double noundef %.sink) #10
  tail call void @x264_put_amf_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.5) #10
  tail call void @x264_put_amf_double(ptr noundef nonnull %0, double noundef 7.000000e+00) #10
  tail call void @x264_put_amf_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.6) #10
  %9 = load i32, ptr %d_cur, align 8
  %conv9 = zext i32 %9 to i64
  %d_total10 = getelementptr inbounds i8, ptr %0, i64 24
  %10 = load i64, ptr %d_total10, align 8
  %add11 = add nuw nsw i64 %conv9, 1
  %add12 = add i64 %add11, %10
  %i_duration_pos = getelementptr inbounds i8, ptr %handle, i64 56
  store i64 %add12, ptr %i_duration_pos, align 8
  tail call void @x264_put_amf_double(ptr noundef nonnull %0, double noundef 0.000000e+00) #10
  tail call void @x264_put_amf_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.7) #10
  %11 = load i32, ptr %d_cur, align 8
  %conv14 = zext i32 %11 to i64
  %12 = load i64, ptr %d_total10, align 8
  %add16 = add nuw nsw i64 %conv14, 1
  %add17 = add i64 %add16, %12
  %i_filesize_pos = getelementptr inbounds i8, ptr %handle, i64 64
  store i64 %add17, ptr %i_filesize_pos, align 8
  tail call void @x264_put_amf_double(ptr noundef nonnull %0, double noundef 0.000000e+00) #10
  tail call void @x264_put_amf_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.8) #10
  %13 = load i32, ptr %d_cur, align 8
  %conv19 = zext i32 %13 to i64
  %14 = load i64, ptr %d_total10, align 8
  %add21 = add nuw nsw i64 %conv19, 1
  %add22 = add i64 %add21, %14
  %i_bitrate_pos = getelementptr inbounds i8, ptr %handle, i64 72
  store i64 %add22, ptr %i_bitrate_pos, align 8
  tail call void @x264_put_amf_double(ptr noundef nonnull %0, double noundef 0.000000e+00) #10
  tail call void @x264_put_amf_string(ptr noundef nonnull %0, ptr noundef nonnull @.str.9) #10
  tail call void @x264_put_byte(ptr noundef nonnull %0, i8 noundef zeroext 9) #10
  %15 = load i32, ptr %d_cur, align 8
  %sub = sub i32 %15, %1
  %sub24 = add i32 %sub, -10
  tail call void @rewrite_amf_be24(ptr noundef nonnull %0, i32 noundef %sub24, i32 noundef %1) #10
  %add25 = add i32 %sub, 1
  tail call void @x264_put_be32(ptr noundef nonnull %0, i32 noundef %add25) #10
  %i_fps_num26 = getelementptr inbounds i8, ptr %p_param, i64 652
  %16 = load i32, ptr %i_fps_num26, align 4
  %conv27 = zext i32 %16 to i64
  %i_fps_num28 = getelementptr inbounds i8, ptr %handle, i64 24
  store i64 %conv27, ptr %i_fps_num28, align 8
  %i_fps_den29 = getelementptr inbounds i8, ptr %p_param, i64 656
  %17 = load i32, ptr %i_fps_den29, align 8
  %conv30 = zext i32 %17 to i64
  %i_fps_den31 = getelementptr inbounds i8, ptr %handle, i64 32
  store i64 %conv30, ptr %i_fps_den31, align 8
  %i_timebase_num = getelementptr inbounds i8, ptr %p_param, i64 660
  %18 = load i32, ptr %i_timebase_num, align 4
  %i_timebase_num32 = getelementptr inbounds i8, ptr %handle, i64 104
  store i32 %18, ptr %i_timebase_num32, align 8
  %i_timebase_den = getelementptr inbounds i8, ptr %p_param, i64 664
  %19 = load i32, ptr %i_timebase_den, align 8
  %i_timebase_den33 = getelementptr inbounds i8, ptr %handle, i64 108
  store i32 %19, ptr %i_timebase_den33, align 4
  %20 = load i32, ptr %b_vfr_input, align 8
  %b_vfr_input35 = getelementptr inbounds i8, ptr %handle, i64 112
  store i32 %20, ptr %b_vfr_input35, align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @write_headers(ptr nocapture noundef %handle, ptr nocapture noundef readonly %p_nal) #0 {
entry:
  %0 = load ptr, ptr %handle, align 8
  %i_payload = getelementptr inbounds i8, ptr %p_nal, i64 8
  %1 = load i32, ptr %i_payload, align 8
  %i_payload3 = getelementptr inbounds i8, ptr %p_nal, i64 32
  %2 = load i32, ptr %i_payload3, align 8
  %i_payload5 = getelementptr inbounds i8, ptr %p_nal, i64 56
  %3 = load i32, ptr %i_payload5, align 8
  %conv = sext i32 %3 to i64
  %call = tail call noalias ptr @malloc(i64 noundef %conv) #11
  %sei = getelementptr inbounds i8, ptr %handle, i64 8
  store ptr %call, ptr %sei, align 8
  %tobool.not = icmp eq ptr %call, null
  br i1 %tobool.not, label %cleanup37, label %if.end

if.end:                                           ; preds = %entry
  %sei_len = getelementptr inbounds i8, ptr %handle, i64 16
  store i32 %3, ptr %sei_len, align 8
  %p_payload = getelementptr inbounds i8, ptr %p_nal, i64 64
  %4 = load ptr, ptr %p_payload, align 8
  tail call void @llvm.memcpy.p0.p0.i64(ptr nonnull align 1 %call, ptr align 1 %4, i64 %conv, i1 false)
  %p_payload11 = getelementptr inbounds i8, ptr %p_nal, i64 16
  %5 = load ptr, ptr %p_payload11, align 8
  %add.ptr = getelementptr inbounds i8, ptr %5, i64 4
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 9) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 0) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  %d_cur = getelementptr inbounds i8, ptr %0, i64 8
  %6 = load i32, ptr %d_cur, align 8
  %start = getelementptr inbounds i8, ptr %handle, i64 116
  store i32 %6, ptr %start, align 4
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 23) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 0) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 1) #10
  %arrayidx12 = getelementptr inbounds i8, ptr %5, i64 5
  %7 = load i8, ptr %arrayidx12, align 1
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext %7) #10
  %arrayidx13 = getelementptr inbounds i8, ptr %5, i64 6
  %8 = load i8, ptr %arrayidx13, align 1
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext %8) #10
  %arrayidx14 = getelementptr inbounds i8, ptr %5, i64 7
  %9 = load i8, ptr %arrayidx14, align 1
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext %9) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext -1) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext -31) #10
  %sub = add nsw i32 %1, -4
  %conv15 = trunc i32 %sub to i16
  tail call void @x264_put_be16(ptr noundef %0, i16 noundef zeroext %conv15) #10
  %call17 = tail call i32 @flv_append_data(ptr noundef %0, ptr noundef nonnull %add.ptr, i32 noundef %sub) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 1) #10
  %sub18 = add nsw i32 %2, -4
  %conv19 = trunc i32 %sub18 to i16
  tail call void @x264_put_be16(ptr noundef %0, i16 noundef zeroext %conv19) #10
  %p_payload21 = getelementptr inbounds i8, ptr %p_nal, i64 40
  %10 = load ptr, ptr %p_payload21, align 8
  %add.ptr22 = getelementptr inbounds i8, ptr %10, i64 4
  %call24 = tail call i32 @flv_append_data(ptr noundef %0, ptr noundef nonnull %add.ptr22, i32 noundef %sub18) #10
  %11 = load i32, ptr %d_cur, align 8
  %12 = load i32, ptr %start, align 4
  %sub27 = sub i32 %11, %12
  %sub29 = add i32 %12, -10
  tail call void @rewrite_amf_be24(ptr noundef %0, i32 noundef %sub27, i32 noundef %sub29) #10
  %add = add i32 %sub27, 11
  tail call void @x264_put_be32(ptr noundef %0, i32 noundef %add) #10
  %call30 = tail call i32 @flv_flush_data(ptr noundef %0) #10
  %add34 = add i32 %2, %1
  %add35 = add i32 %add34, %3
  %cmp.inv = icmp sgt i32 %call30, -1
  %retval.0 = select i1 %cmp.inv, i32 %add35, i32 -1
  br label %cleanup37

cleanup37:                                        ; preds = %entry, %if.end
  %retval.1 = phi i32 [ %retval.0, %if.end ], [ -1, %entry ]
  ret i32 %retval.1
}

; Function Attrs: nounwind uwtable
define internal noundef i32 @write_frame(ptr nocapture noundef %handle, ptr noundef %p_nalu, i32 noundef %i_size, ptr nocapture noundef readonly %p_picture) #0 {
entry:
  %0 = load ptr, ptr %handle, align 8
  %i_dts = getelementptr inbounds i8, ptr %p_picture, i64 24
  %1 = load i64, ptr %i_dts, align 8
  %mul = mul nsw i64 %1, 1000
  %conv = sitofp i64 %mul to double
  %i_timebase_num = getelementptr inbounds i8, ptr %handle, i64 104
  %2 = load i32, ptr %i_timebase_num, align 8
  %conv2 = uitofp i32 %2 to double
  %i_timebase_den = getelementptr inbounds i8, ptr %handle, i64 108
  %3 = load i32, ptr %i_timebase_den, align 4
  %conv3 = uitofp i32 %3 to double
  %div = fdiv double %conv2, %conv3
  %4 = tail call double @llvm.fmuladd.f64(double %conv, double %div, double 5.000000e-01)
  %conv5 = fptosi double %4 to i64
  %i_pts = getelementptr inbounds i8, ptr %p_picture, i64 16
  %5 = load i64, ptr %i_pts, align 8
  %mul6 = mul nsw i64 %5, 1000
  %conv7 = sitofp i64 %mul6 to double
  %6 = tail call double @llvm.fmuladd.f64(double %conv7, double %div, double 5.000000e-01)
  %conv14 = fptosi double %6 to i64
  %sub = sub nsw i64 %conv14, %conv5
  %i_framenum = getelementptr inbounds i8, ptr %handle, i64 40
  %7 = load i64, ptr %i_framenum, align 8
  %tobool.not = icmp eq i64 %7, 0
  br i1 %tobool.not, label %if.end61, label %if.then

if.then:                                          ; preds = %entry
  %i_prev_dts = getelementptr inbounds i8, ptr %handle, i64 88
  %8 = load i64, ptr %i_prev_dts, align 8
  %mul15 = mul nsw i64 %8, 1000
  %conv16 = sitofp i64 %mul15 to double
  %9 = tail call double @llvm.fmuladd.f64(double %conv16, double %div, double 5.000000e-01)
  %conv23 = fptosi double %9 to i64
  %i_prev_pts = getelementptr inbounds i8, ptr %handle, i64 96
  %10 = load i64, ptr %i_prev_pts, align 8
  %mul24 = mul nsw i64 %10, 1000
  %conv25 = sitofp i64 %mul24 to double
  %11 = tail call double @llvm.fmuladd.f64(double %conv25, double %div, double 5.000000e-01)
  %conv32 = fptosi double %11 to i64
  %cmp = icmp eq i64 %conv23, %conv5
  br i1 %cmp, label %if.then34, label %if.end

if.then34:                                        ; preds = %if.then
  %div39 = fdiv double %conv3, %conv2
  %sub42 = sub nsw i64 %1, %8
  %conv43 = sitofp i64 %sub42 to double
  %div44 = fdiv double %div39, %conv43
  %12 = load ptr, ptr @stderr, align 8
  %call = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %12, ptr noundef nonnull @.str.10, i64 noundef %conv5, double noundef %div44) #12
  br label %if.end

if.end:                                           ; preds = %if.then34, %if.then
  %cmp45 = icmp eq i64 %conv32, %conv14
  br i1 %cmp45, label %if.then47, label %if.end61

if.then47:                                        ; preds = %if.end
  %13 = load i32, ptr %i_timebase_den, align 4
  %conv50 = uitofp i32 %13 to double
  %14 = load i32, ptr %i_timebase_num, align 8
  %conv52 = uitofp i32 %14 to double
  %div53 = fdiv double %conv50, %conv52
  %15 = load i64, ptr %i_pts, align 8
  %16 = load i64, ptr %i_prev_pts, align 8
  %sub56 = sub nsw i64 %15, %16
  %conv57 = sitofp i64 %sub56 to double
  %div58 = fdiv double %div53, %conv57
  %17 = load ptr, ptr @stderr, align 8
  %call59 = tail call i32 (ptr, ptr, ...) @fprintf(ptr noundef %17, ptr noundef nonnull @.str.11, i64 noundef %conv14, double noundef %div58) #12
  br label %if.end61

if.end61:                                         ; preds = %if.end, %if.then47, %entry
  %18 = load i64, ptr %i_dts, align 8
  %i_prev_dts63 = getelementptr inbounds i8, ptr %handle, i64 88
  store i64 %18, ptr %i_prev_dts63, align 8
  %19 = load i64, ptr %i_pts, align 8
  %i_prev_pts65 = getelementptr inbounds i8, ptr %handle, i64 96
  store i64 %19, ptr %i_prev_pts65, align 8
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 9) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  %conv66 = trunc i64 %conv5 to i32
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef %conv66) #10
  %shr = lshr i64 %conv5, 24
  %conv67 = trunc i64 %shr to i8
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext %conv67) #10
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef 0) #10
  %d_cur = getelementptr inbounds i8, ptr %0, i64 8
  %20 = load i32, ptr %d_cur, align 8
  %start = getelementptr inbounds i8, ptr %handle, i64 116
  store i32 %20, ptr %start, align 4
  %b_keyframe = getelementptr inbounds i8, ptr %p_picture, i64 12
  %21 = load i32, ptr %b_keyframe, align 4
  %tobool68.not = icmp eq i32 %21, 0
  %conv69 = select i1 %tobool68.not, i8 39, i8 23
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext %conv69) #10
  tail call void @x264_put_byte(ptr noundef %0, i8 noundef zeroext 1) #10
  %conv70 = trunc i64 %sub to i32
  tail call void @x264_put_be24(ptr noundef %0, i32 noundef %conv70) #10
  %sei = getelementptr inbounds i8, ptr %handle, i64 8
  %22 = load ptr, ptr %sei, align 8
  %tobool71.not = icmp eq ptr %22, null
  br i1 %tobool71.not, label %if.end77, label %if.then72

if.then72:                                        ; preds = %if.end61
  %sei_len = getelementptr inbounds i8, ptr %handle, i64 16
  %23 = load i32, ptr %sei_len, align 8
  %call74 = tail call i32 @flv_append_data(ptr noundef nonnull %0, ptr noundef nonnull %22, i32 noundef %23) #10
  %24 = load ptr, ptr %sei, align 8
  tail call void @free(ptr noundef %24) #10
  store ptr null, ptr %sei, align 8
  br label %if.end77

if.end77:                                         ; preds = %if.then72, %if.end61
  %call78 = tail call i32 @flv_append_data(ptr noundef nonnull %0, ptr noundef %p_nalu, i32 noundef %i_size) #10
  %25 = load i32, ptr %d_cur, align 8
  %26 = load i32, ptr %start, align 4
  %sub81 = sub i32 %25, %26
  %sub83 = add i32 %26, -10
  tail call void @rewrite_amf_be24(ptr noundef nonnull %0, i32 noundef %sub81, i32 noundef %sub83) #10
  %add = add i32 %sub81, 11
  tail call void @x264_put_be32(ptr noundef nonnull %0, i32 noundef %add) #10
  %call84 = tail call i32 @flv_flush_data(ptr noundef nonnull %0) #10
  %cmp85 = icmp slt i32 %call84, 0
  br i1 %cmp85, label %cleanup, label %do.end

do.end:                                           ; preds = %if.end77
  %27 = load i64, ptr %i_framenum, align 8
  %inc = add nsw i64 %27, 1
  store i64 %inc, ptr %i_framenum, align 8
  br label %cleanup

cleanup:                                          ; preds = %if.end77, %do.end
  %retval.0 = phi i32 [ %i_size, %do.end ], [ -1, %if.end77 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind uwtable
define internal range(i32 -1, 1) i32 @close_file(ptr nocapture noundef %handle, i64 noundef %largest_pts, i64 noundef %second_largest_pts) #0 {
entry:
  %x.i58 = alloca i64, align 8
  %x.i53 = alloca i64, align 8
  %x.i48 = alloca i64, align 8
  %x.i = alloca i64, align 8
  %0 = load ptr, ptr %handle, align 8
  %call = tail call i32 @flv_flush_data(ptr noundef %0) #10
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %cleanup, label %do.end

do.end:                                           ; preds = %entry
  %mul = shl nsw i64 %largest_pts, 1
  %sub = sub nsw i64 %mul, %second_largest_pts
  %conv = sitofp i64 %sub to double
  %i_timebase_num = getelementptr inbounds i8, ptr %handle, i64 104
  %1 = load i32, ptr %i_timebase_num, align 8
  %conv2 = uitofp i32 %1 to double
  %mul3 = fmul double %conv, %conv2
  %i_timebase_den = getelementptr inbounds i8, ptr %handle, i64 108
  %2 = load i32, ptr %i_timebase_den, align 4
  %conv4 = uitofp i32 %2 to double
  %div = fdiv double %mul3, %conv4
  %fp = getelementptr inbounds i8, ptr %0, i64 16
  %3 = load ptr, ptr %fp, align 8
  %call8 = tail call i64 @ftell(ptr noundef %3)
  %i_framerate_pos = getelementptr inbounds i8, ptr %handle, i64 48
  %4 = load i64, ptr %i_framerate_pos, align 8
  %tobool9.not = icmp eq i64 %4, 0
  br i1 %tobool9.not, label %if.end15, label %if.then10

if.then10:                                        ; preds = %do.end
  %i_framenum = getelementptr inbounds i8, ptr %handle, i64 40
  %5 = load i64, ptr %i_framenum, align 8
  %conv11 = sitofp i64 %5 to double
  %div12 = fdiv double %conv11, %div
  %6 = load ptr, ptr %fp, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %x.i) #10
  %call.i = tail call i64 @dbl2int(double noundef %div12) #10
  %add.i.i = tail call noundef i64 @llvm.bswap.i64(i64 %call.i)
  store i64 %add.i.i, ptr %x.i, align 8
  %call2.i = tail call i32 @fseek(ptr noundef %6, i64 noundef %4, i32 noundef 0)
  %call3.i = call i64 @fwrite(ptr noundef nonnull %x.i, i64 noundef 8, i64 noundef 1, ptr noundef %6)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %x.i) #10
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %do.end
  %7 = load ptr, ptr %fp, align 8
  %i_duration_pos = getelementptr inbounds i8, ptr %handle, i64 56
  %8 = load i64, ptr %i_duration_pos, align 8
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %x.i48) #10
  %call.i49 = tail call i64 @dbl2int(double noundef %div) #10
  %add.i.i50 = tail call noundef i64 @llvm.bswap.i64(i64 %call.i49)
  store i64 %add.i.i50, ptr %x.i48, align 8
  %call2.i51 = tail call i32 @fseek(ptr noundef %7, i64 noundef %8, i32 noundef 0)
  %call3.i52 = call i64 @fwrite(ptr noundef nonnull %x.i48, i64 noundef 8, i64 noundef 1, ptr noundef %7)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %x.i48) #10
  %9 = load ptr, ptr %fp, align 8
  %i_filesize_pos = getelementptr inbounds i8, ptr %handle, i64 64
  %10 = load i64, ptr %i_filesize_pos, align 8
  %conv18 = uitofp i64 %call8 to double
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %x.i53) #10
  %call.i54 = tail call i64 @dbl2int(double noundef %conv18) #10
  %add.i.i55 = tail call noundef i64 @llvm.bswap.i64(i64 %call.i54)
  store i64 %add.i.i55, ptr %x.i53, align 8
  %call2.i56 = tail call i32 @fseek(ptr noundef %9, i64 noundef %10, i32 noundef 0)
  %call3.i57 = call i64 @fwrite(ptr noundef nonnull %x.i53, i64 noundef 8, i64 noundef 1, ptr noundef %9)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %x.i53) #10
  %11 = load ptr, ptr %fp, align 8
  %i_bitrate_pos = getelementptr inbounds i8, ptr %handle, i64 72
  %12 = load i64, ptr %i_bitrate_pos, align 8
  %mul20 = shl i64 %call8, 3
  %conv21 = uitofp i64 %mul20 to double
  %mul22 = fmul double %div, 1.000000e+03
  %div23 = fdiv double %conv21, %mul22
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %x.i58) #10
  %call.i59 = tail call i64 @dbl2int(double noundef %div23) #10
  %add.i.i60 = tail call noundef i64 @llvm.bswap.i64(i64 %call.i59)
  store i64 %add.i.i60, ptr %x.i58, align 8
  %call2.i61 = tail call i32 @fseek(ptr noundef %11, i64 noundef %12, i32 noundef 0)
  %call3.i62 = call i64 @fwrite(ptr noundef nonnull %x.i58, i64 noundef 8, i64 noundef 1, ptr noundef %11)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %x.i58) #10
  %13 = load ptr, ptr %fp, align 8
  %call26 = tail call i32 @fclose(ptr noundef %13)
  tail call void @free(ptr noundef nonnull %handle) #10
  tail call void @free(ptr noundef nonnull %0) #10
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end15
  %retval.0 = phi i32 [ 0, %if.end15 ], [ -1, %entry ]
  ret i32 %retval.0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #2

declare ptr @flv_create_writer(ptr noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

declare void @x264_put_tag(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @x264_put_byte(ptr noundef, i8 noundef zeroext) local_unnamed_addr #3

declare void @x264_put_be32(ptr noundef, i32 noundef) local_unnamed_addr #3

declare i32 @flv_flush_data(ptr noundef) local_unnamed_addr #3

declare void @x264_put_be24(ptr noundef, i32 noundef) local_unnamed_addr #3

declare void @x264_put_amf_string(ptr noundef, ptr noundef) local_unnamed_addr #3

declare void @x264_put_amf_double(ptr noundef, double noundef) local_unnamed_addr #3

declare void @rewrite_amf_be24(ptr noundef, i32 noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #4

declare void @x264_put_be16(ptr noundef, i16 noundef zeroext) local_unnamed_addr #3

declare i32 @flv_append_data(ptr noundef, ptr noundef, i32 noundef) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #5

; Function Attrs: nofree nounwind
declare noundef i32 @fprintf(ptr nocapture noundef, ptr nocapture noundef readonly, ...) local_unnamed_addr #6

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i64 @ftell(ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i32 @fclose(ptr nocapture noundef) local_unnamed_addr #6

declare i64 @dbl2int(double noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noundef i32 @fseek(ptr nocapture noundef, i64 noundef, i32 noundef) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare noundef i64 @fwrite(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #6

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.bswap.i64(i64) #8

; Function Attrs: nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #9

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #5 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #9 = { nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #10 = { nounwind }
attributes #11 = { nounwind allocsize(0) }
attributes #12 = { cold nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 19.0.0git (git@github.com:QuqqU/GPUISel-llvm.git ed922481952e7fbe7b5da8613bc5ccf78f796536)"}
